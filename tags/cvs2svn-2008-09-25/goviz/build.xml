<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="goviz" default="all" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="0.1"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.war" value="${build.dir}/war"/>
	<!-- The java compiler to use, I suggest changing this to    -->
	<!-- 'jikes' if you have it, otherwise leave alone           -->
	<property name="build.compiler" value="jikes"/>
		
	<target name="init">
		<!-- Show a splash screen while building the project     -->
		<!-- If for some reason you don't want the glorious      -->
		<!-- mygrid logo, then just remove the imageurl att.     -->
		<splash showduration="0"/>
	</target>
	
	<!-- Path used during compilation -->
	<path id="compile-classpath">
		<!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<!-- Jar files that are only used when building the project go here -->
		<fileset dir="./devlib">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<!-- Import tidier task -->
	<taskdef name="cleanimports" classname="com.tombrus.cleanImports.ant.CleanImports"> 
    	<!-- declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>
	
	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Process the source tree to clean up the import declarations -->
	<!-- CAUTION - modifies the /src directory                       -->
	<target name="tidy" depends="init">
		<cleanimports srcdir="${src.dir}">
            <cleanformat>
				<!-- Use wildcards iff there are more than five imports -->
                <options collapseAbove="5" blankLines="1" ambiguities="on"/>
				<import/>
				<!-- Handle common java import stuff -->
                <import comment="Utility Imports" package="java.util"/>
                <import comment="IO Imports" package="java.io"/>
				<import comment="RMI Imports" package="java.rmi"/>
                <options blankLines="0"/>
				<import own="true"/>
				<options blankLines="2"/>
                <import javalang="true"/>
            </cleanformat>
			<classpath refid="compile-classpath"/>
        </cleanimports>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			sourceBrowser="yes"/>
	</target>	 	

	<!-- Clean the build -->
	<target name="clean" depends="init">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}"/>
	</target>

	<!-- Build jar file and javadocs -->
	<target name="all" depends="war,javadoc"/>
	
	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.war}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.html"/>
				<include name="**/*.xml"/>
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac srcdir="${build.src}" destdir="${build.classes}">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}.jar" basedir="${build.classes}" update="no"/>
	</target>

	<!-- Create the war file -->
	<target name="war" depends="jar">
		<copy todir="${build.war}" filtering="on">
			<fileset dir="./ws-template">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<copy todir="${build.war}/WEB-INF/lib" filtering="on">
			<fileset dir="./lib">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${build.war}/WEB-INF/lib" filtering="on">
			<fileset dir="${build.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<jar destfile="${build.dir}/${ant.project.name}.war" basedir="${build.war}" update="no"/>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes" 
			 destdir="${build.javadocs}" 
			 sourcepath="${build.src}" 
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>" 
			 packagenames="*" 
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>
	
	<!-- Example of how to run something in your code -->
	<target name="test" depends="jar">
		<java classname="org.embl.ebi.escience.goviz.Test" fork="yes">
		  	<classpath refid="compile-classpath"/>
		</java>
	</target>
	
</project>

