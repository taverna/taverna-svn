<?xml version="1.0" encoding="UTF-8"?>

<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">

  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:P81DV9PQW02" author="Paul Fisher" title="Gene pathways in a QTL region">The workflow takes in as parameters: a species name, a chromosome, a start and end position, and options of what to extract from the getGeneInfo file.



It aims to find genes in a chromosome QTL region, linked to a phenotype, and then gathers annotations including metabolic pathways for those genes.</s:workflowdescription>

  <s:processor name="database" boring="true">

    <s:stringconstant>gene</s:stringconstant>

  </s:processor>

  <s:processor name="start" boring="true">

    <s:stringconstant>29000000</s:stringconstant>

  </s:processor>

  <s:processor name="regex" boring="true">

    <s:stringconstant>\n</s:stringconstant>

  </s:processor>

  <s:processor name="chromo" boring="true">

    <s:stringconstant>17</s:stringconstant>

  </s:processor>

  <s:processor name="end" boring="true">

    <s:stringconstant>32500000</s:stringconstant>

  </s:processor>

  <s:processor name="new_line_regex" boring="true">

    <s:stringconstant>\n</s:stringconstant>

  </s:processor>

  <s:processor name="remove_Nulls">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++){

   if (!(split[i].equals("")))

   {

       nonEmpty.add(split[i].trim());

   }

}



String[] non_empty = new String[nonEmpty.size()];



for (int i = 0; i &lt; non_empty.length; i ++)

{

   non_empty[i] = nonEmpty.elementAt(i);

}



String output = "";



for (int i = 0; i &lt; non_empty.length; i++)

{

	output = output + (String) (non_empty[i] + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="split_gene_ids">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++) 

{		

	String trimmed = split[i].trim();

	String[] trimmedSplit = trimmed.split("\t");

	if (trimmedSplit.length == 2)

	{

	    nonEmpty.add(trimmedSplit[1].trim());	

	}

}



String output = "";



for (int i = 0; i &lt; nonEmpty.size(); i++)

{

	output = output + (String) (nonEmpty.elementAt(i) + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="regex_2" boring="true">

    <s:stringconstant>\n</s:stringconstant>

  </s:processor>

  <s:processor name="REMOVE_NULLS_2">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++){

   if (!(split[i].equals("")))

   {

       nonEmpty.add(split[i].trim());

   }

}



String[] non_empty = new String[nonEmpty.size()];



for (int i = 0; i &lt; non_empty.length; i ++)

{

   non_empty[i] = nonEmpty.elementAt(i);

}



String output = "";



for (int i = 0; i &lt; non_empty.length; i++)

{

	output = output + (String) (non_empty[i] + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="parse_swiss">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++) 

{		

	String trimmed = split[i].trim();

	String[] trimmedSplit = trimmed.split(":");

	if (trimmedSplit.length == 2)

	{

	    nonEmpty.add(trimmedSplit[1].trim());	

	}

}



String output = "";



for (int i = 0; i &lt; nonEmpty.size(); i++)

{

	output = output + (String) (nonEmpty.elementAt(i) + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="add_ncbi_to_string">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++) 

{		

	String trimmed = split[i].trim();

	nonEmpty.add(trimmed);	

}



String output = "";



for (int i = 0; i &lt; nonEmpty.size(); i++)

{

	output = output + "ncbi-geneid:" + (String) (nonEmpty.elementAt(i) + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="species" boring="true">

    <s:stringconstant>mus_musculus</s:stringconstant>

  </s:processor>

  <s:processor name="split_ncbi_gene_ids">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++) 

{		

	String trimmed = split[i].trim();

	String[] trimmedSplit = trimmed.split("\t");

	if (trimmedSplit.length == 2)

	{

	    nonEmpty.add(trimmedSplit[1].trim());	

	}

}



String output = "";



for (int i = 0; i &lt; nonEmpty.size(); i++)

{

	output = output + (String) (nonEmpty.elementAt(i) + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="options" boring="true">

    <s:stringconstant>swiss</s:stringconstant>

  </s:processor>

  <s:processor name="split_by_regex">

    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

  </s:processor>

  <s:processor name="merge_swiss_ids">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="Split_string_into_string_list_by_regular_expression1">

    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

  </s:processor>

  <s:processor name="split_swissprot_by_regex">

    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

  </s:processor>

  <s:processor name="add_uniproti_to_string">

    <s:beanshell>

      <s:scriptvalue>String[] split = input.split("\n");

Vector nonEmpty = new Vector();



for (int i = 0; i &lt; split.length; i++) 

{		

	String trimmed = split[i].trim();

	nonEmpty.add(trimmed);	

}



String output = "";



for (int i = 0; i &lt; nonEmpty.size(); i++)

{

	output = output + "uniprot:" + (String) (nonEmpty.elementAt(i) + "\n");

}</s:scriptvalue>

      <s:beanshellinputlist>

        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>

      </s:beanshellinputlist>

      <s:beanshelloutputlist>

        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>

      </s:beanshelloutputlist>

    </s:beanshell>

  </s:processor>

  <s:processor name="merge_genes_and_pathways">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="Merge_string_list_to_string">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="Split_string_into_string_list_by_regular_expression">

    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

  </s:processor>

  <s:processor name="Merge_string_list_to_string3">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="Merge_string_list_to_string2">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="Split_string_into_string_list_by_regular_expression2">

    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

  </s:processor>

  <s:processor name="Remove_duplicate_strings">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringStripDuplicates</s:local>

  </s:processor>

  <s:processor name="Merge_string_list_to_string1">

    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

  </s:processor>

  <s:processor name="parametersXML">

    <s:local>

      org.embl.ebi.escience.scuflworkers.java.XMLInputSplitter

      <s:extensions>

        <s:complextype optional="false" unbounded="false" typename="eSearchRequest" name="parameters">

          <s:elements>

            <s:basetype optional="true" unbounded="false" typename="string" name="db" />

            <s:basetype optional="true" unbounded="false" typename="string" name="term" />

            <s:basetype optional="true" unbounded="false" typename="string" name="WebEnv" />

            <s:basetype optional="true" unbounded="false" typename="string" name="QueryKey" />

            <s:basetype optional="true" unbounded="false" typename="string" name="usehistory" />

            <s:basetype optional="true" unbounded="false" typename="string" name="tool" />

            <s:basetype optional="true" unbounded="false" typename="string" name="email" />

            <s:basetype optional="true" unbounded="false" typename="string" name="field" />

            <s:basetype optional="true" unbounded="false" typename="string" name="reldate" />

            <s:basetype optional="true" unbounded="false" typename="string" name="mindate" />

            <s:basetype optional="true" unbounded="false" typename="string" name="maxdate" />

            <s:basetype optional="true" unbounded="false" typename="string" name="datetype" />

            <s:basetype optional="true" unbounded="false" typename="string" name="RetStart" />

            <s:basetype optional="true" unbounded="false" typename="string" name="RetMax" />

            <s:basetype optional="true" unbounded="false" typename="string" name="rettype" />

            <s:basetype optional="true" unbounded="false" typename="string" name="sort" />

          </s:elements>

        </s:complextype>

      </s:extensions>

    </s:local>

  </s:processor>

  <s:processor name="getgenesbyspecies">

    <s:description>Retrieves a list of Ensembl genes for a given species, chromosome and position</s:description>

    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/qtl_analysis.getgenesbyspecies</s:soaplabwsdl>

  </s:processor>

  <s:processor name="parse_ncbi_protein_xml">

    <s:description>Extracts a GenBank id from an eSearch XML output file</s:description>

    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/text_mining.parse_ncbi_protein_xml</s:soaplabwsdl>

  </s:processor>

  <s:processor name="getcurrentdatabase">

    <s:description>Retrieves the current databases from ENSEMBL for a species</s:description>

    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/qtl_analysis.getcurrentdatabase</s:soaplabwsdl>

  </s:processor>

  <s:processor name="parse_ddbj_gene_info">

    <s:description>extract information from geneGeneInfo processor at http://xml.nig.ac.jp/wsdl/Ensembl.wsdl</s:description>

    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/seq_analysis.parse_ddbj_gene_info</s:soaplabwsdl>

  </s:processor>

  <s:processor name="NestedWorkflow">

    <s:workflow>

      <s:scufl version="0.2" log="0">

        <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:NEH6KY21LR75" author="" title="" />

        <s:processor name="Merge_string_list_to_string1">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

        </s:processor>

        <s:processor name="Merge_string_list_to_string">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

        </s:processor>

        <s:processor name="Concatenate_two_strings">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringConcat</s:local>

          <s:iterationstrategy>

            <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">

              <i:iterator name="string2" />

              <i:iterator name="string1" />

            </i:dot>

          </s:iterationstrategy>

        </s:processor>

        <s:processor name="lister">

          <s:arbitrarywsdl>

            <s:wsdl>http://phoebus.cs.man.ac.uk:8081/axis/EnsemblListner.jws?wsdl</s:wsdl>

            <s:operation>lister</s:operation>

          </s:arbitrarywsdl>

        </s:processor>

        <s:processor name="get_pathways_by_genes1">

          <s:arbitrarywsdl>

            <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>

            <s:operation>get_pathways_by_genes</s:operation>

          </s:arbitrarywsdl>

        </s:processor>

        <s:link source="Concatenate_two_strings:output" sink="Merge_string_list_to_string1:stringlist" />

        <s:link source="Concatenate_two_strings:output" sink="pathway_output" />

        <s:link source="Merge_string_list_to_string1:concatenated" sink="pathway_genes" />

        <s:link source="Merge_string_list_to_string:concatenated" sink="Concatenate_two_strings:string2" />

        <s:link source="gene_ids" sink="lister:file" />

        <s:link source="Merge_string_list_to_string:concatenated" sink="merged" />

        <s:link source="get_pathways_by_genes1:return" sink="Merge_string_list_to_string:stringlist" />

        <s:link source="get_pathways_by_genes1:return" sink="pathway_2" />

        <s:link source="lister:listerReturn" sink="Concatenate_two_strings:string1" />

        <s:link source="lister:listerReturn" sink="get_pathways_by_genes1:genes_id_list" />

        <s:link source="lister:listerReturn" sink="split_genes_2" />

        <s:source name="gene_ids" />

        <s:sink name="pathway_output" />

        <s:sink name="merged" />

        <s:sink name="pathway_2" />

        <s:sink name="split_genes_2" />

        <s:sink name="pathway_genes" />

      </s:scufl>

    </s:workflow>

  </s:processor>

  <s:processor name="getGeneInfo">

    <s:description>get gene information</s:description>

    <s:arbitrarywsdl>

      <s:wsdl>http://xml.nig.ac.jp/wsdl/Ensembl.wsdl</s:wsdl>

      <s:operation>getGeneInfo</s:operation>

    </s:arbitrarywsdl>

  </s:processor>

  <s:processor name="Kegg_gene_ids">

    <s:arbitrarywsdl>

      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>

      <s:operation>bconv</s:operation>

    </s:arbitrarywsdl>

  </s:processor>

  <s:processor name="Kegg_gene_ids_2">

    <s:arbitrarywsdl>

      <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>

      <s:operation>bconv</s:operation>

    </s:arbitrarywsdl>

  </s:processor>

  <s:processor name="NestedWorkflow1">

    <s:workflow>

      <s:scufl version="0.2" log="0">

        <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:NEH6KY21LR75" author="" title="" />

        <s:processor name="String_Constant" boring="true">

          <s:stringconstant>\n</s:stringconstant>

        </s:processor>

        <s:processor name="Merge_string_list_to_string1">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

        </s:processor>

        <s:processor name="Merge_string_list_to_string">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>

        </s:processor>

        <s:processor name="Split_string_into_string_list_by_regular_expression">

          <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>

        </s:processor>

        <s:processor name="Concatenate_two_strings">

          <s:local>org.embl.ebi.escience.scuflworkers.java.StringConcat</s:local>

          <s:iterationstrategy>

            <i:dot xmlns:i="http://org.embl.ebi.escience/xscufliteration/0.1beta10">

              <i:iterator name="string1" />

              <i:iterator name="string2" />

            </i:dot>

          </s:iterationstrategy>

        </s:processor>

        <s:processor name="lister">

          <s:arbitrarywsdl>

            <s:wsdl>http://phoebus.cs.man.ac.uk:8081/axis/EnsemblListner.jws?wsdl</s:wsdl>

            <s:operation>lister</s:operation>

          </s:arbitrarywsdl>

        </s:processor>

        <s:processor name="get_pathways_by_genes1">

          <s:arbitrarywsdl>

            <s:wsdl>http://soap.genome.jp/KEGG.wsdl</s:wsdl>

            <s:operation>get_pathways_by_genes</s:operation>

          </s:arbitrarywsdl>

        </s:processor>

        <s:link source="Concatenate_two_strings:output" sink="Merge_string_list_to_string1:stringlist" />

        <s:link source="Merge_string_list_to_string:concatenated" sink="Concatenate_two_strings:string2" />

        <s:link source="Split_string_into_string_list_by_regular_expression:split" sink="lister:file" />

        <s:link source="String_Constant:value" sink="Split_string_into_string_list_by_regular_expression:regex" />

        <s:link source="gene_ids" sink="Split_string_into_string_list_by_regular_expression:string" />

        <s:link source="get_pathways_by_genes1:return" sink="Merge_string_list_to_string:stringlist" />

        <s:link source="lister:listerReturn" sink="Concatenate_two_strings:string1" />

        <s:link source="lister:listerReturn" sink="get_pathways_by_genes1:genes_id_list" />

        <s:link source="Concatenate_two_strings:output" sink="pathway_output" />

        <s:link source="Merge_string_list_to_string1:concatenated" sink="pathway_genes" />

        <s:link source="Merge_string_list_to_string:concatenated" sink="merged" />

        <s:link source="get_pathways_by_genes1:return" sink="pathway_2" />

        <s:link source="lister:listerReturn" sink="split_genes_2" />

        <s:source name="gene_ids" />

        <s:sink name="pathway_output" />

        <s:sink name="merged" />

        <s:sink name="pathway_2" />

        <s:sink name="split_genes_2" />

        <s:sink name="pathway_genes" />

      </s:scufl>

    </s:workflow>

  </s:processor>

  <s:processor name="run_eSearch">

    <s:arbitrarywsdl>

      <s:wsdl>http://eutils.ncbi.nlm.nih.gov/entrez/eutils/soap/eutils.wsdl</s:wsdl>

      <s:operation>run_eSearch</s:operation>

    </s:arbitrarywsdl>

  </s:processor>

  <s:link source="Kegg_gene_ids:return" sink="split_gene_ids:input" />

  <s:link source="Kegg_gene_ids_2:return" sink="split_ncbi_gene_ids:input" />

  <s:link source="Merge_string_list_to_string1:concatenated" sink="REMOVE_NULLS_2:input" />

  <s:link source="Merge_string_list_to_string2:concatenated" sink="add_ncbi_to_string:input" />

  <s:link source="Merge_string_list_to_string:concatenated" sink="Merge_string_list_to_string3:stringlist" />

  <s:link source="NestedWorkflow1:pathway_genes" sink="Merge_string_list_to_string:stringlist" />

  <s:link source="NestedWorkflow:pathway_genes" sink="merge_genes_and_pathways:stringlist" />

  <s:link source="REMOVE_NULLS_2:output" sink="Split_string_into_string_list_by_regular_expression2:string" />

  <s:link source="REMOVE_NULLS_2:output" sink="Split_string_into_string_list_by_regular_expression2:string" />

  <s:link source="Remove_duplicate_strings:strippedlist" sink="Merge_string_list_to_string2:stringlist" />

  <s:link source="Split_string_into_string_list_by_regular_expression1:split" sink="NestedWorkflow1:gene_ids" />

  <s:link source="Split_string_into_string_list_by_regular_expression2:split" sink="Remove_duplicate_strings:stringlist" />

  <s:link source="Split_string_into_string_list_by_regular_expression:split" sink="NestedWorkflow:gene_ids" />

  <s:link source="add_ncbi_to_string:output" sink="Kegg_gene_ids_2:string" />

  <s:link source="add_uniproti_to_string:output" sink="Kegg_gene_ids:string" />

  <s:link source="chromo:value" sink="getgenesbyspecies:chromo" />

  <s:link source="database:value" sink="parametersXML:db" />

  <s:link source="end:value" sink="getgenesbyspecies:end" />

  <s:link source="getGeneInfo:Result" sink="parse_ddbj_gene_info:file_direct_data" />

  <s:link source="getcurrentdatabase:output" sink="getgenesbyspecies:database" />

  <s:link source="getgenesbyspecies:output" sink="split_by_regex:string" />

  <s:link source="merge_swiss_ids:concatenated" sink="remove_Nulls:input" />

  <s:link source="new_line_regex:value" sink="Split_string_into_string_list_by_regular_expression2:regex" />

  <s:link source="new_line_regex:value" sink="split_swissprot_by_regex:regex" />

  <s:link source="options:value" sink="parse_ddbj_gene_info:options" />

  <s:link source="parametersXML:output" sink="run_eSearch:parameters" />

  <s:link source="parse_ddbj_gene_info:output" sink="parse_swiss:input" />

  <s:link source="parse_ncbi_protein_xml:output" sink="Merge_string_list_to_string1:stringlist" />

  <s:link source="parse_swiss:output" sink="merge_swiss_ids:stringlist" />

  <s:link source="regex:value" sink="split_by_regex:regex" />

  <s:link source="regex_2:value" sink="Split_string_into_string_list_by_regular_expression1:regex" />

  <s:link source="regex_2:value" sink="Split_string_into_string_list_by_regular_expression:regex" />

  <s:link source="remove_Nulls:output" sink="add_uniproti_to_string:input" />

  <s:link source="remove_Nulls:output" sink="split_swissprot_by_regex:string" />

  <s:link source="run_eSearch:parameters" sink="parse_ncbi_protein_xml:new_direct_data" />

  <s:link source="species:value" sink="getcurrentdatabase:species" />

  <s:link source="split_swissprot_by_regex:split" sink="parametersXML:term" />

  <s:link source="Merge_string_list_to_string3:concatenated" sink="merged_ncbi_pathwyas" />

  <s:link source="Merge_string_list_to_string:concatenated" sink="ncbi_pathways" />

  <s:link source="getgenesbyspecies:output" sink="genes_in_qtl" />

  <s:link source="merge_genes_and_pathways:concatenated" sink="complete_merged" />

  <s:link source="split_by_regex:split" sink="getGeneInfo:geneId" />

  <s:link source="split_gene_ids:output" sink="Split_string_into_string_list_by_regular_expression:string" />

  <s:link source="split_ncbi_gene_ids:output" sink="Split_string_into_string_list_by_regular_expression1:string" />

  <s:link source="start:value" sink="getgenesbyspecies:start" />

  <s:sink name="genes_in_qtl" />

  <s:sink name="complete_merged" />

  <s:sink name="ncbi_pathways" />

  <s:sink name="merged_ncbi_pathwyas" />

</s:scufl>





