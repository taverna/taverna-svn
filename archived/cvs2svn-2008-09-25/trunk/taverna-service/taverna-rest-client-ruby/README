Taverna Remote Execution service client
=======================================

Authors: Stian Soiland, David Withers
Copyright: 2006-2008 University of Manchester, UK
Version: 0.5.0
URL: http://taverna.sourceforge.net/
Contact: taverna-hackers@lists.sourceforge.net
Licence: LGPL 3 (See LICENCE or http://www.gnu.org/licenses/lgpl.html)

This is a Ruby library for submitting Taverna[1] workflows to the Taverna
Remote Execution service[2]. This requires the Remote Execution service that
has already been installed and configured, and with a client username and
password already registered by the administrator of the service. We 
recommend first testing the service using the Remote Execution service
from the Taverna workbench[3].



Installation
------------

Run "gem install taverna.gem" as an administrator. This should also download 
and install any required 3rd party libraries.


Usage
-----
Here's the simplest usecase. Given a Taverna workflow in "workflow.xml" (that produces
a value at the port "myOutput") and a Taverna Remote Execution service [2] running 
at http://localhost:8080/tavernaservice/v1/ you can try::

	> SERVICE = "http://localhost:8080/tavernaservice/v1/"
	> workflow = IO.read("workflow.xml")
	> require 'rubygems'
	> require 'enactor/client'
	> enactor = Enactor::Client(SERVICE, "johndoe", "s3cret")
	> results = enactor.execute_sync(workflow)
	> print results["myOutput"]


Note that the call to execute_sync() will block until the workflow has been executed
on the server. If you want to do this asynchronously, try::
	
	> workflow_url = enactor.upload_workflow(workflow)
	> job_url = enactor.submit_job(workflow_url)
	> sleep 1 while not enactor.finished?(job_url)
	> if enactor.get_job_status(job_url) == Enactor::Status.COMPLETE
	>   results = enactor.get_job_outputs(job_url)
	>   print results["myOutput"]
	> end


You can also supply inputs as a hash::

	> inputs = {}
	> inputs['gene'] = ["MY_GENE", "HIS_GENE"]
	> inputs['database'] = "kegg"
	> results = enactor.execute_sync(workflow, inputs)

or::

	> inputs_url = enactor.upload_data(inputs)
	> job_url = enactor.submitJob(workflow_url, inputsURL)


See the rdoc documentation of Enactor::Client for more information, try::

	> help Enactor::Client


Included are also lower level modules Baclava for parsing 
and creating Baclava data documents, and Scufl for extracting basic 
information about a workflow, such as which input and output ports it defines.



References
----------

[1] http://taverna.sourceforge.net/
[2] http://www.mygrid.org.uk/usermanual1.7/remote_execution_server.html
[3] http://www.mygrid.org.uk/usermanual1.7/remote_execution.html

