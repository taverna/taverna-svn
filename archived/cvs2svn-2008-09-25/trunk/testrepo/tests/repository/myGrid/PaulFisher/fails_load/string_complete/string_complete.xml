<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:P81DV9PQW02" author="" title="" />
  <s:processor name="database" boring="true">
    <s:stringconstant>mus_musculus_core_36_34d</s:stringconstant>
  </s:processor>
  <s:processor name="start" boring="true">
    <s:stringconstant>19592504</s:stringconstant>
  </s:processor>
  <s:processor name="end" boring="true">
    <s:stringconstant>44592504</s:stringconstant>
  </s:processor>
  <s:processor name="chromosome" boring="true">
    <s:stringconstant>17</s:stringconstant>
  </s:processor>
  <s:processor name="getgenesbyspecies">
    <s:description>Retrieves a list of Ensembl genes for a given species, chromosome and position</s:description>
    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/qtl_analysis.getgenesbyspecies</s:soaplabwsdl>
  </s:processor>
  <s:processor name="probeset_in_qtl">
    <s:description>Gets the probesets that are in a region of a chromosome e.g. in a QTL or based on 2 marker names</s:description>
    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/qtl_analysis.probeset_in_qtl</s:soaplabwsdl>
  </s:processor>
  <s:processor name="array_name" boring="true">
    <s:stringconstant>Mouse430_2</s:stringconstant>
  </s:processor>
  <s:processor name="probeset_to_gene">
    <s:description>Gets ENSEMBL gene IDS that are based on the probeset names passed to it</s:description>
    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/qtl_analysis.probeset_to_gene</s:soaplabwsdl>
  </s:processor>
  <s:processor name="split_by_regex1">
    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>
  </s:processor>
  <s:processor name="regex1" boring="true">
    <s:stringconstant>\n</s:stringconstant>
  </s:processor>
  <s:processor name="Merge_string_list1">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>
  </s:processor>
  <s:processor name="comma1" boring="true">
    <s:stringconstant>,</s:stringconstant>
  </s:processor>
  <s:processor name="parse_gene_name">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++) 
{		
	String trimmed = split[i].trim();
	String[] trimmedSplit = trimmed.split("\t");
	if(trimmed.length() == 4)
	{
		nonEmpty.add(trimmedSplit[3].trim());
	}		
}

String output = "";

for (int i = 0; i &lt; nonEmpty.size(); i++)
{
	output = output + (String) (nonEmpty.elementAt(i) + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="regex_2" boring="true">
    <s:stringconstant>\n</s:stringconstant>
  </s:processor>
  <s:processor name="getGeneInfo">
    <s:arbitrarywsdl>
      <s:wsdl>http://xml.nig.ac.jp/wsdl/Ensembl.wsdl</s:wsdl>
      <s:operation>getGeneInfo</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="options" boring="true">
    <s:stringconstant>gene_name</s:stringconstant>
  </s:processor>
  <s:processor name="split_by_regex_2">
    <s:local>org.embl.ebi.escience.scuflworkers.java.SplitByRegex</s:local>
  </s:processor>
  <s:processor name="parse_ddbj_gene_info">
    <s:description>extract information from geneGeneInfo processor at http://xml.nig.ac.jp/wsdl/Ensembl.wsdl</s:description>
    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/seq_analysis.parse_ddbj_gene_info</s:soaplabwsdl>
  </s:processor>
  <s:processor name="parsing_options" boring="true">
    <s:stringconstant>swiss</s:stringconstant>
  </s:processor>
  <s:processor name="parse_swiss">
    <s:beanshell>
      <s:scriptvalue>String[] split = input.split("\n");
Vector nonEmpty = new Vector();

for (int i = 0; i &lt; split.length; i++) 
{
	String trimmed = split[i].trim();
	String[] trimmedSplit = trimmed.split(":");
	if(trimmedSplit.length() == 2)
	{	
		nonEmpty.add(trimmedSplit[1].trim());
	}
		
}

String output = "";

for (int i = 0; i &lt; nonEmpty.size(); i++)
{
	output = output + (String) (nonEmpty.elementAt(i) + "\n");
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="parse_ddbj_gene_info2">
    <s:description>extract information from geneGeneInfo processor at http://xml.nig.ac.jp/wsdl/Ensembl.wsdl</s:description>
    <s:soaplabwsdl>http://phoebus.cs.man.ac.uk:1977/axis/services/seq_analysis.parse_ddbj_gene_info</s:soaplabwsdl>
  </s:processor>
  <s:link source="Merge_string_list1:concatenated" sink="probeset_to_gene:probeset_list" />
  <s:link source="array_name:value" sink="probeset_in_qtl:array_name" />
  <s:link source="chromosome:value" sink="getgenesbyspecies:chromo" />
  <s:link source="chromosome:value" sink="probeset_in_qtl:chromosome" />
  <s:link source="chromosome:value" sink="probeset_to_gene:chromosome" />
  <s:link source="comma1:value" sink="Merge_string_list1:seperator" />
  <s:link source="database:value" sink="getgenesbyspecies:database" />
  <s:link source="database:value" sink="probeset_in_qtl:database" />
  <s:link source="database:value" sink="probeset_to_gene:database" />
  <s:link source="end:value" sink="getgenesbyspecies:end" />
  <s:link source="end:value" sink="probeset_in_qtl:end" />
  <s:link source="end:value" sink="probeset_to_gene:end" />
  <s:link source="getGeneInfo:Result" sink="parse_ddbj_gene_info2:file_direct_data" />
  <s:link source="getGeneInfo:Result" sink="parse_ddbj_gene_info:file_direct_data" />
  <s:link source="getgenesbyspecies:output" sink="split_by_regex_2:string" />
  <s:link source="options:value" sink="parse_ddbj_gene_info:options" />
  <s:link source="parse_ddbj_gene_info2:output" sink="parse_swiss:input" />
  <s:link source="parse_ddbj_gene_info:output" sink="parse_gene_name:input" />
  <s:link source="parsing_options:value" sink="parse_ddbj_gene_info2:options" />
  <s:link source="getgenesbyspecies:output" sink="genes_in_qtl" />
  <s:link source="parse_gene_name:output" sink="gene_name" />
  <s:link source="parse_swiss:output" sink="swissprot_id" />
  <s:link source="probeset_in_qtl:output" sink="split_by_regex1:string" />
  <s:link source="regex1:value" sink="split_by_regex1:regex" />
  <s:link source="regex_2:value" sink="split_by_regex_2:regex" />
  <s:link source="split_by_regex1:split" sink="Merge_string_list1:stringlist" />
  <s:link source="split_by_regex_2:split" sink="getGeneInfo:geneId" />
  <s:link source="start:value" sink="probeset_in_qtl:start" />
  <s:link source="start:value" sink="probeset_to_gene:start" />
  <s:link source="probeset_in_qtl:output" sink="probesets_in_qtl" />
  <s:link source="probeset_to_gene:output" sink="genes_from_probeset" />
  <s:link source="start:value" sink="getgenesbyspecies:start" />
  <s:sink name="probesets_in_qtl" />
  <s:sink name="genes_from_probeset" />
  <s:sink name="genes_in_qtl" />
  <s:sink name="gene_name" />
  <s:sink name="swissprot_id" />
</s:scufl>


