<?xml version="1.0"?>
<project default="war" name="fetaEngine1.0">
    <!--Sorted by SortDocument-->
    <!--This file has been auto-generated by the AntMerge tool. Do not edit-->
    <!--Generated from C:\work\code\mygrid\fetaEngine1.0\fetaEngine-in.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\webdav.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\test.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\checkdependencies.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\axis-ws.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\mygrid.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\default.xml-->
    <!--Generated from C:\work\code\mygrid\antmerge\bin\..\etc\noantmerge.xml-->
    <property file="init.properties" id="init.properties"/>
    <property file="${ant.project.name}.properties" id="project.properties"/>
    <property file="${user.home}/.ant/${ant.project.name}.properties" id="project.home.properties"/>
    <property file="antmerge-default.properties" id="default.properties"/>
    <property file="${user.home}/.ant/antmerge-default.properties" id="default.home.properties"/>
    <property file="antmerge-mygrid.properties" id="mygrid.properties"/>
    <property file="${user.home}/.ant/antmerge-mygrid.properties" id="mygrid.home.properties"/>
    <property file="${user.home}/.ant/antmerge-test.properties" id="antmerge.test.properties"/>
    <property file="./antmerge-test.properties" id="antmerge.test.home.properties"/>
    <property id="antmerge.generated" name="antmerge.infile" value="fetaEngine-in.xml"/>
    <property name="javadoc.link.offline" value="false"/>
    <property name="javadoc.link.location1" value="http://java.sun.com/j2se/1.4.2/docs/api/"/>
    <property name="javadoc.package.list.location1" value="/usr/local/javapackage/java-1.4.1"/>
    <property name="javadoc.link.location2" value="http://xml.apache.org/xerces2-j/javadocs/api/"/>
    <property name="javadoc.package.list.location2" value="/usr/localjavapackage/xerces-2.3.0/"/>
    <property name="javadoc.link.location3" value="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/servletapi/"/>
    <property name="javadoc.package.list.location3" value="/usr/local/jakarta-tomcat-5.0.28/"/>
    <property name="src" value="src"/>
    <property name="bin" value="bin"/>
    <property name="doc" value="doc"/>
    <property name="etc" value="etc"/>
    <property name="generated-root" value="."/>
    <property name="lib" value="${generated-root}/lib"/>
    <property name="ext" value="${generated-root}/ext"/>
    <property name="build" value="${generated-root}/build"/>
    <property name="classes" value="${build}/classes"/>
    <property name="javadoc" value="${generated-root}/javadoc"/>
    <property name="dist" value="${build}/dist"/>
    <property name="ext-base" value="../../mygrid-external-dependencies"/>
    <property name="default-dependencies" value="YouHaveNothingToLoseButYourChains"/>
    <property name="jar-dependencies" value="          ${default-dependencies}     axis-1.2-RC3.jar     axis-jaxrpc-1.2-RC3.jar     axis-saaj-1.2-RC3.jar     axis-wsdl4j-1.2-RC3.jar     commons-logging-1.0.4.jar   ,     activation-1.0.jar     concurrent-1.3.4.jar     icu4j-2.6.1.jar     jakarta-oro-2.0.5.jar     jdom-b10.jar     jena-2.1.jar     log4j-1.2.8.jar     rdf-api-2001-01-19.jar     uddi4j.jar     SESAME-2-ALPH-3-openrdf-model.jar     SESAME-2-ALPH-3-openrdf-util.jar     SESAME-2-ALPH-3-rio.jar     SESAME-2-ALPH-3-sesame.jar     mail.jar     lsid-server-1.1.2.jar     lsid-client-1.1.2.jar     xalan-2.5.1.jar     xercesImpl.jar     xml-apis.jar   "/>
    <property name="jar-dependencies.compile" value="     ${default-dependencies}     xercesImpl-2.6.2.jar     xml-apis-2.0.2.jar   "/>
    <property name="jar-dependencies.deploy" value="          ${default-dependencies}     activation-1.0.jar     commons-discovery-0.2.jar     log4j-1.2.8.jar     mail-1.2.jar   ,     soap.jar   "/>
    <property name="jar-dependencies.tools" value="          ${default-dependencies}     catalina-ant-5.0.28.jar        junit-3.8.1.jar   "/>
    <property name="int-base" value="${ext-base}"/>
    <property name="publish" value="${int-base}/lib"/>
    <property name="ant" value="${ext-base}/ant"/>
    <property name="antmerge.tasks" value="antmerge-tasks.jar"/>
    <property name="orig-bin-dirs" value="${doc}/**,config/**"/>
    <property name="built-bin-dirs" value="webapps/**"/>
    <property name="bin-files" value="LICENSE,LICENSE.TXT,README,README.TXT"/>
    <property name="orig-src-dirs" value="${orig-bin-dirs}/**,${src}/**,${tests},${test-data},${conf}/**,doc/**,etc/**,tests/**"/>
    <property name="built-src-dirs" value="${built-bin-dirs}/**,javadoc/**"/>
    <property name="src-files" value="${bin-files},${antmerge.infile},build.xml"/>
    <property name="dist-version" value=""/>
    <property name="dist-name" value="${ant.project.name}${dist-version}"/>
    <property name="project.jar" value="${ant.project.name}.jar"/>
    <property name="jar.manifest.dir" value="${build}"/>
    <property name="jar.manifest" value="${jar.manifest.dir}/manifest.mf"/>
    <property name="mygrid.netbeans.display.category" value="myGrid"/>
    <property location="${generated-root}/webapps" name="webapps"/>
    <property location="${webapps}/${ant.project.name}.war" name="project.war"/>
    <property location="${basedir}/war-template" name="war-template"/>
    <property name="project.webxml" value="${etc}/web.xml"/>
    <property name="project.context" value="/${ant.project.name}"/>
    <property name="tomcat.host" value="localhost"/>
    <property name="tomcat.port" value="8080"/>
    <property name="tomcat.url" value="http://${tomcat.host}:${tomcat.port}"/>
    <property name="tomcat.manager.url" value="${tomcat.url}/manager"/>
    <property name="tomcat.manager.username" value="username"/>
    <property name="tomcat.manager.password" value="password"/>
    <property name="testsuite" value="uk.ac.man.cs.img.fetaEngine.AllTests"/>
    <property name="tests" value="tests"/>
    <property name="test-data" value="test-data"/>
    <property name="test-results" value="${build}/test-results"/>
    <property name="junit.usefile" value="yes"/>
    <property name="junit.printsummary" value="no"/>
    <property name="test-dir" value="${ext}"/>
    <property name="webdav.server" value="http://phoebus.cs.man.ac.uk:8100/feta-beta"/>
    <property name="webdav.ant" value="${ant}/jakarta-slide-ant-webdav-2.1.jar:${ext-base}/ext/jakarta-slide-webdavlib-2.1.jar:${ext-base}/ext/commons-httpclient.jar:${ext-base}/ext/commons-logging.jar:${ext-base}/ext/jdom.jar"/>
    <property name="antmerge.parent" value="default+mygrid+axis-ws+checkdependencies+test+webdav"/>
    <property name="jar-dependencies.endorsed" value="     ${super}     xalan-2.5.1.jar   "/>
    <property name="conf" value="conf"/>
    <patternset id="all-jar-deps-pattern">
        <patternset includes="${jar-dependencies}"/>
        <patternset includes="${jar-dependencies.compile}"/>
        <patternset includes="${jar-dependencies.deploy}"/>
        <patternset includes="${jar-dependencies.tools}"/>
    </patternset>
    <patternset id="compile-jar-deps-pattern">
        <patternset includes="${jar-dependencies}"/>
        <patternset includes="${jar-dependencies.compile}"/>
    </patternset>
    <patternset id="deploy-jar-deps-pattern">
        <patternset includes="${jar-dependencies}"/>
        <patternset includes="${jar-dependencies.deploy}"/>
    </patternset>
    <path id="lib.jars">
        <fileset dir="${ext}">
            <include name="*.jar"/>
        </fileset>
    </path>
    <path id="base.path">
        <pathelement location="${classes}"/>
    </path>
    <path id="compile-classpath">
        <path refid="base.path"/>
        <fileset dir="${ext}">
            <patternset refid="compile-jar-deps-pattern"/>
        </fileset>
    </path>
    <path id="tools-classpath">
        <path refid="base.path"/>
        <fileset dir="${ext}">
            <patternset refid="all-jar-deps-pattern"/>
        </fileset>
    </path>
    <path id="srcpath">
        <pathelement location="${src}"/>
        <pathelement location="${tests}"/>
    </path>
    <fileset dir="${ext}" id="ext-deploy-jars">
        <patternset refid="deploy-jar-deps-pattern"/>
    </fileset>
    <target name="antmerge">
        <echo message="Antmerge has been disabled"/>
    </target>
    <target name="pregather"/>
    <target name="gather">
        <taskdef classname="uk.ac.man.cs.img.anttasks.CheckDependencies"
            classpath="${ant}/${antmerge.tasks}" name="checkdependencies"/>
        <checkdependencies dirone="${ext-base}/ext" dirtwo="${publish}" patternsetref="all-jar-deps-pattern"/>
        <mkdir dir="${ext}"/>
        <mkdir dir="${publish}"/>
        <copy todir="${ext}">
            <fileset dir="${ext-base}/ext">
                <patternset refid="all-jar-deps-pattern"/>
            </fileset>
            <fileset dir="${publish}">
                <patternset refid="all-jar-deps-pattern"/>
            </fileset>
        </copy>
    </target>
    <target depends="antmerge" name="prepare">
        <mkdir dir="${build}"/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${javadoc}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="config"/>
        <copy todir="config">
            <fileset dir="${conf}"/>
        </copy>
    </target>
    <target if="gather.when.compile" name="gathermaybe">
        <ant target="gather"/>
    </target>
    <target name="precompile"/>
    <target depends="prepare,precompile,gathermaybe,axis.wsdl2java" name="compile">
        <mkdir dir="${classes}"/>
        <javac debug="on" destdir="${classes}" followsymlinks="no" srcdir="${src}">
            <classpath>
                <path refid="compile-classpath"/>
            </classpath>
        </javac>
        <copy todir="${build}/classes/">
            <fileset dir="${etc}/">
                <include name="mygrid-services-lite.rdfs"/>
                <include name="service.rdfs"/>
            </fileset>
        </copy>
    </target>
    <target name="doc"/>
    <target name="prejavadoc"/>
    <target depends="antmerge,prejavadoc"
        description="generate all javadoc" name="javadoc">
        <javadoc destdir="${javadoc}">
            <fileset dir="${src}">
                <include name="**/*.java"/>
                <exclude name="**/*.xml"/>
            </fileset>
            <classpath>
                <path refid="compile-classpath"/>
            </classpath>
            <link href="${javadoc.link.location1}"
                offline="${javadoc.link.offline}" packagelistLoc="${javadoc.package.list.location1}"/>
        </javadoc>
    </target>
    <target name="manifest">
        <manifest file="${jar.manifest}">
            <attribute name="Built-With" value="antmerge"/>
            <attribute name="Built-By" value="${user.name}"/>
        </manifest>
    </target>
    <target name="prejar"/>
    <target depends="compile,manifest,prejar" name="jar">
        <jar jarfile="${lib}/${project.jar}" manifest="${jar.manifest}">
            <fileset dir="${classes}"/>
        </jar>
    </target>
    <target name="prepublish"/>
    <target depends="prepublish,jar"
        description="Releases module code so that it can be used by other components" name="publish">
        <copy todir="${publish}">
            <fileset dir="${lib}" includes="*"/>
        </copy>
    </target>
    <target description="Protection against clean"
        if="clean.safety.check" name="clean_safety">
        <fail message="The property clean.safety.check has been set,       which disallows running the clean target. Perhaps you want       cleanclasses instead?"/>
    </target>
    <target
        depends="clean_safety,cleanclasses,cleandist,cleanjavadoc,cleandirs,antmerge"
        description="Delete all generated files" name="clean"/>
    <target depends="clean"
        description="Really delete all generated files" name="distclean">
        <delete dir="${ext}"/>
    </target>
    <target name="cleanclasses">
        <delete dir="${classes}"/>
    </target>
    <target name="cleandirs">
        <delete dir="${build}"/>
        <delete dir="${classes}"/>
        <delete dir="${lib}"/>
        <delete dir="${javadoc}"/>
        <delete dir="${dist}"/>
        <delete dir="${webapps}"/>
    </target>
    <target name="cleandist">
        <delete dir="${dist}"/>
        <delete file="./${dist-name}.tar"/>
        <delete file="./${dist-name}.tar.gz"/>
        <delete file="./${dist-name}.src.tar.gz"/>
        <delete file="./${dist-name}.zip"/>
        <delete file="./${dist-name}.src.zip"/>
    </target>
    <target name="cleanjavadoc">
        <delete dir="${javadoc}"/>
    </target>
    <target depends="distclean"
        description="Delete absolutely all generated files" name="maintainer.clean">
        <delete file="build.xml"/>
    </target>
    <target depends="war,jar,doc,javadoc,dist-bin,dist-src" name="dist"/>
    <target depends="dist-bin.build,dist-bin.pack" name="dist-bin"/>
    <target name="dist-bin.copy">
        <mkdir dir="${dist}/binary/${dist-name}"/>
        <copy todir="${dist}/binary/${dist-name}">
            <fileset dir="${basedir}" includes="${bin-files},${orig-bin-dirs}"/>
            <fileset dir="${generated-root}" includes="${built-bin-dirs}"/>
        </copy>
    </target>
    <target name="dist-bin.check-bin">
        <available file="${dist}/binary/${dist-name}/${bin}" property="dist-bin.bin-exists"/>
    </target>
    <target depends="dist-bin.check-bin" if="dist-bin.bin-exists" name="dist-bin.chmod">
        <!-- the copy task flattens the file permissions, unlike the
    unix cp command, so make anything in bin executable. This is not
    very satisfactory, but results from a weakness in java -->
        <chmod dir="${dist}/binary/${dist-name}/${bin}" includes="**" perm="+x"/>
    </target>
    <target depends="dist-bin.copy,dist-bin.chmod" name="dist-bin.build"/>
    <target name="dist-bin.pack">
        <antcall target="-tar">
            <param name="basedir-tar" value="${dist}/binary"/>
            <param name="includes-tar" value="${dist-name}/**"/>
            <param name="dest-name-tar" value="${dist-name}.tar.gz"/>
        </antcall>
        <antcall target="-zip">
            <param name="basedir-tar" value="${dist}/binary"/>
            <param name="includes-tar" value="${dist-name}/**"/>
            <param name="dest-name-tar" value="${dist-name}.zip"/>
        </antcall>
    </target>
    <target depends="jar" name="dist-src">
        <antcall target="myZip">
            <param name="fileName" value="${ant.project.name}-source"/>
            <param name="includes" value="conf/**,ext/**,doc/**,etc/**,src/**,build.xml"/>
            <param name="baseDir" value="."/>
        </antcall>
        <antcall target="myTar">
            <param name="fileName" value="${ant.project.name}-source"/>
            <param name="includes" value="conf/**,ext/**,doc/**,etc/**,src/**,build.xml"/>
            <param name="baseDir" value="."/>
        </antcall>
    </target>
    <target name="dist-src.copy">
        <mkdir dir="${dist}/source/${dist-name}"/>
        <copy todir="${dist}/source/${dist-name}">
            <fileset dir="${basedir}" includes="${src-files},${orig-src-dirs}"/>
            <fileset dir="${generated-root}" includes="${built-src-dirs}"/>
        </copy>
    </target>
    <target name="dist-src.check-bin">
        <available file="${dist}/source/${dist-name}/${bin}" property="dist-src.bin-exists"/>
    </target>
    <target depends="dist-src.check-bin" if="dist-src.bin-exists" name="dist-src.chmod">
        <!-- the copy task flattens the file permissions, unlike the
    unix cp command, so make anything in bin executable. This is not
    very satisfactory, but results from a weakness in java -->
        <chmod dir="${dist}/source/${dist-name}/${bin}" includes="**" perm="+x"/>
    </target>
    <target depends="dist-src.copy,dist-src.chmod" name="dist-src.build"/>
    <target name="dist-src.pack">
        <antcall target="-tar">
            <param name="basedir-tar" value="${dist}/source"/>
            <param name="includes-tar" value="${dist-name}/**"/>
            <param name="dest-name-tar" value="${dist-name}.src.tar.gz"/>
        </antcall>
        <antcall target="-zip">
            <param name="basedir-tar" value="${dist}/source"/>
            <param name="includes-tar" value="${dist-name}/**"/>
            <param name="dest-name-tar" value="${dist-name}.src.zip"/>
        </antcall>
    </target>
    <target name="-tar">
        <tar compression="gzip" destfile="./${dest-name-tar}"
            includes="${includes-tar}" longfile="gnu">
            <tarfileset dir="${basedir-tar}">
                <include name="${includes-tar}"/>
                <exclude name="${bin}/**"/>
            </tarfileset>
            <tarfileset dir="${basedir-tar}" mode="755">
                <include name="${bin}/**"/>
            </tarfileset>
        </tar>
    </target>
    <target name="-zip">
        <zip basedir="${basedir-tar}" destfile="./${dest-name-tar}" includes="${includes-tar}"/>
    </target>
    <target depends="gather" name="tomcat.prepare">
        <!-- TODO: Investigate Ant's descriptor for defining all these tasks -->
        <taskdef classname="org.apache.catalina.ant.InstallTask" name="tomcat.install">
            <classpath refid="tools-classpath"/>
        </taskdef>
        <taskdef classname="org.apache.catalina.ant.ListTask" name="tomcat.list">
            <classpath refid="tools-classpath"/>
        </taskdef>
        <taskdef classname="org.apache.catalina.ant.ReloadTask" name="tomcat.reload">
            <classpath refid="tools-classpath"/>
        </taskdef>
        <taskdef classname="org.apache.catalina.ant.RemoveTask" name="tomcat.remove">
            <classpath refid="tools-classpath"/>
        </taskdef>
        <!-- TODO: Add start & stop actions -->
    </target>
    <target depends="jar" description="Create the WAR for Feta" name="war">
        <mkdir dir="${webapps}"/>
        <war destfile="${project.war}" webxml="${project.webxml}">
            <lib dir="${lib}"/>
            <lib dir="${ext}">
                <patternset refid="deploy-jar-deps-pattern"/>
            </lib>
            <webinf file="${etc}/server-config.wsdd"/>
            <fileset dir="${etc}">
                <include name="*.html"/>
                <include name="*.jsp"/>
            </fileset>
            <fileset dir="${etc}/lsid-servlet-config"/>
        </war>
    </target>
    <target depends="tomcat.prepare,war" name="tomcat.install">
        <copy todir="">
            <fileset dir="">
                <filename name="${conf}/fetaEngine.properties"/>
            </fileset>
        </copy>
        <tomcat.install password="${tomcat.manager.password}"
            path="${project.context}" url="${tomcat.manager.url}"
            username="${tomcat.manager.username}" war="jar:file:${project.war}!/"/>
    </target>
    <target depends="tomcat.prepare"
        description="List installed applications on servlet container" name="tomcat.list">
        <tomcat.list password="${tomcat.manager.password}"
            url="${tomcat.manager.url}" username="${tomcat.manager.username}"/>
    </target>
    <target depends="tomcat.prepare,war"
        description="Reload application on servlet container" name="tomcat.reload">
        <tomcat.reload password="${tomcat.manager.password}"
            path="${project.context}" url="${tomcat.manager.url}" username="${tomcat.manager.username}"/>
    </target>
    <target depends="tomcat.prepare"
        description="Unload application from servlet container" name="tomcat.remove">
        <tomcat.remove password="${tomcat.manager.password}"
            path="${project.context}" url="${tomcat.manager.url}" username="${tomcat.manager.username}"/>
    </target>
    <target depends="compiletests" description="runs the test files" name="test">
        <mkdir dir="${test-results}"/>
        <junit fork="yes" haltonfailure="no" printsummary="${junit.printsummary}">
            <classpath refid="tools-classpath"/>
            <!-- set usefile="no" to write to console -->
            <formatter type="plain" usefile="${junit.usefile}"/>
            <test name="${testsuite}" todir="${test-results}"/>
        </junit>
    </target>
    <target depends="compiletests" description="Starts a GUI tester" name="guitest">
        <java classname="junit.swingui.TestRunner" fork="yes">
            <classpath refid="tools-classpath"/>
            <arg value="${testsuite}"/>
        </java>
    </target>
    <target name="precompiletests"/>
    <target depends="prepare,precompiletests,compile"
        description="compiles the test files" name="compiletests">
        <javac classpathref="tools-classpath" debug="on"
            destdir="${classes}" srcdir="${tests}"/>
    </target>
    <target depends="compiletests"
        description="runs the test file with java" name="testclass">
        <java classname="${testsuite}" fork="yes">
            <classpath refid="tools-classpath"/>
        </java>
    </target>
    <target name="jdee-global-classpath">
        <!-- this is a bit of a hack because my reordering schema still is
    not working perfectly -->
        <property name="jdee-global-classpath" refid="test-classpath"/>
    </target>
    <target name="webdav.tasks">
        <taskdef classname="org.apache.webdav.ant.taskdefs.Put"
            classpath="${webdav.ant}" name="davput"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Get"
            classpath="${webdav.ant}" name="davget"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Lock"
            classpath="${webdav.ant}" name="lock"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Unlock"
            classpath="${webdav.ant}" name="unlock"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Mkcol"
            classpath="${webdav.ant}" name="mkcol"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Delete"
            classpath="${webdav.ant}" name="davdelete"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Proppatch"
            classpath="${webdav.ant}" name="proppatch"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Copy"
            classpath="${webdav.ant}" name="davcopy"/>
        <taskdef classname="org.apache.webdav.ant.taskdefs.Move"
            classpath="${webdav.ant}" name="davmove"/>
    </target>
    <target depends="webdav.tasks" name="publish.descriptions">
        <mkcol url="${webdav.server}/mygrid/"/>
        <davput url="${webdav.server}/mygrid/descriptions">
            <fileset dir="${etc}/descriptions">
                <include name="**/*.xml"/>
            </fileset>
        </davput>
    </target>
    <target name="axis.wsdl2java">
        <java classname="org.apache.axis.wsdl.WSDL2Java"
            classpathref="tools-classpath" failonerror="true" fork="yes">
            <arg value="-sf${etc}/NStoPkg.properties"/>
            <arg value="-o${src}"/>
            <arg value="${etc}/fetaEngine.wsdl"/>
        </java>
    </target>
    <target name="myTar">
        <tar basedir="${baseDir}" includes="${includes}" tarfile="${fileName}.tar"/>
        <gzip src="${fileName}.tar" zipfile="${fileName}.tar.gz"/>
    </target>
    <target name="myZip">
        <zip basedir="${baseDir}" destfile="${fileName}.zip" includes="${includes}"/>
    </target>
</project>
