<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:BAE1PYWZ532" author="Tom Oinn, Thomas Down" title="BioJava, Beanshell and Soaplab test">Uses the Beanshell processor to construct a URL object, this is then used to create a BioJava DAS client proxy. The client is queried for a sequence or sequences and these fed into the Soaplab tmap tool. Used as a test of the API Consumer in Taverna1.&lt;p&gt;
Requires the biojava.jar and bytecode.jar from http://www.biojava.org, version 1.4pre1 was used for testing. Add jars to the lib directory of Taverna (or the workflow enactor when running in service mode) before starting.</s:workflowdescription>
  <s:processor name="DASSequenceDB">
    <apiconsumer>
      <class name="org.biojava.bio.program.das.DASSequenceDB" />
      <method name="DASSequenceDB" static="false" constructor="true" type="org.biojava.bio.program.das.DASSequenceDB" dimension="0" />
      <description />
      <parameter name="dataSourceURL" type="java.net.URL" dimension="0" />
    </apiconsumer>
  </s:processor>
  <s:processor name="seqString">
    <s:description>Stringify this symbol list.
 &lt;p&gt;
 It is expected that this will use the symbol's token to render each
 symbol. It should be parsable back into a SymbolList using the default
 token parser for this alphabet.</s:description>
    <apiconsumer>
      <class name="org.biojava.bio.symbol.SymbolList" />
      <method name="seqString" static="false" constructor="false" type="java.lang.String" dimension="0" />
      <description>Stringify this symbol list.
 &lt;p&gt;
 It is expected that this will use the symbol's token to render each
 symbol. It should be parsable back into a SymbolList using the default
 token parser for this alphabet.</description>
    </apiconsumer>
  </s:processor>
  <s:processor name="CreateURLObject">
    <s:beanshell>
      <s:scriptvalue>url = new java.net.URL(urlstring);</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">urlstring</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">url</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="getSequence">
    <apiconsumer>
      <class name="org.biojava.bio.seq.db.SequenceDBLite" />
      <method name="getSequence" static="false" constructor="false" type="org.biojava.bio.seq.Sequence" dimension="0" />
      <description />
      <parameter name="id" type="java.lang.String" dimension="0" />
    </apiconsumer>
  </s:processor>
  <s:processor name="allEntryPointsDB">
    <apiconsumer>
      <class name="org.biojava.bio.program.das.DASSequenceDB" />
      <method name="allEntryPointsDB" static="false" constructor="false" type="org.biojava.bio.seq.db.SequenceDBLite" dimension="0" />
      <description />
    </apiconsumer>
  </s:processor>
  <s:processor name="FlattenImageList">
    <s:local>org.embl.ebi.escience.scuflworkers.java.FlattenList</s:local>
  </s:processor>
  <s:processor name="tmap">
    <s:description>Displays membrane spanning regions</s:description>
    <s:soaplabwsdl>http://www.ebi.ac.uk/soaplab/services/protein_2d_structure.tmap</s:soaplabwsdl>
  </s:processor>
  <s:link source="id" sink="getSequence:id" />
  <s:link source="url" sink="CreateURLObject:urlstring" />
  <s:link source="CreateURLObject:url" sink="DASSequenceDB:dataSourceURL" />
  <s:link source="getSequence:result" sink="seqString:object" />
  <s:link source="seqString:result" sink="sequence" />
  <s:link source="DASSequenceDB:object" sink="allEntryPointsDB:object" />
  <s:link source="allEntryPointsDB:result" sink="getSequence:object" />
  <s:link source="seqString:result" sink="tmap:sequences_direct_data" />
  <s:link source="tmap:Graphics_in_PNG" sink="FlattenImageList:inputlist" />
  <s:link source="FlattenImageList:outputlist" sink="tmap" />
  <s:source name="id">
    <s:metadata>
      <s:description>Enter a protein ID (or list of IDs) here. With the example DAS server (see url docs) the IDs P12345 and Q12345 work well enough.</s:description>
    </s:metadata>
  </s:source>
  <s:source name="url">
    <s:metadata>
      <s:description>Example DAS server URL is http://www.ebi.ac.uk/das-srv/uniprot/das/aristotle/</s:description>
    </s:metadata>
  </s:source>
  <s:sink name="sequence" />
  <s:sink name="tmap">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>image/png</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
</s:scufl>


