<?xml version="1.0" encoding="UTF-8"?>
<section id="plugins">
  <title>Creating Plugins.</title>

  <toc></toc>

  <section>
    <title>Writing the Plugin.</title>

    <para>We assume at this point you are know what your plugin is going to
    do, and are familiar with the Taverna API, and inparticular which <link
    linkend="spi">SPI(s)</link> you are going to use as your extension
    point(s).</para>

    <para>Before you embark on writing your plugin it is necessary that you
    familiarise yourself with <ulink url="http://maven.apache.org/">Maven
    2</ulink>, version 2.0.4, as this will be necessary for publishing your
    Plugin as artifacts. We also recommend using the <ulink
    url="http://m2eclipse.codehaus.org/">Maven 2 Plugin</ulink> within
    Eclipse. Its beyond the scope of this guide to go into great detail about
    using Maven, but there is a good free book available, <ulink
    url="http://www.mergere.com/m2book_download.jsp">Better Builds with
    Maven</ulink>, and plenty of other resources available on the Web. As a
    starting point, although not essential, it is advisable to structure your
    project as follows:<itemizedlist>
        <listitem>
          <para>src/main/java/ - your main java sourcecode</para>
        </listitem>

        <listitem>
          <para>src/main/resources/ - your resources, including declared SPI's
          in META-INF/services/</para>
        </listitem>

        <listitem>
          <para>src/test/java/ - your java unit tests</para>
        </listitem>

        <listitem>
          <para>pom.xml - the project configuration file</para>
        </listitem>
      </itemizedlist></para>

    <para>If you use the Maven plugin for Eclipse, it will generate your
    pom.xml for you when you enable Maven for your java project. It will
    contain information that looks like the following. This file will grow
    over time as your project evolves.</para>

    <screen>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;org.myproject.app&lt;/groupId&gt;
  &lt;artifactId&gt;my-app&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;My Funky Plugin&lt;/name&gt;

  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;mygrid-repository&lt;/id&gt;
      &lt;name&gt;myGrid Repository&lt;/name&gt;
      &lt;url&gt;http://www.mygrid.org.uk/maven/repository&lt;/url&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
    &lt;/repository&gt;
  &lt;repositories&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

&lt;/project&gt;</screen>

    <para>You need to include the mygrid-repository to be able to add Taverna
    dependencies to your project.</para>

    <important>
      <para>Its important that when you define your Taverna dependencies you
      use artifact versions that are consistent with the version of Taverna
      you are wish to install your plugin into. If the version of Taverna is
      1.5.1.x then you will want your artifact versions to be 1.5.1.x. In
      general when moving between 3rd order versions most plugins will simply
      need their dependencies changing and the plugin rebuilding with minimal,
      if any, code changes. You should read the <link
      linkend="versioning">Taverna versioning section</link> for more detailed
      information.</para>
    </important>
  </section>

  <section>
    <title>Publishing the Plugin.</title>

    <section id="plugin_deploy">
      <title>Deploying the Plugin artifact.</title>

      <para>To be able to install the plugin to Taverna, Taverna needs to be
      able to find the artifacts required. This is possible using Maven
      repositories. A maven repository is simply a http based file server such
      as <ulink url="http://www.apache.org">Apache</ulink>. If you with to be
      able to share your plugins with other Taverna users you will need to set
      up this server so it is publicly accessible on the Internet.</para>

      <para>Full details of how you deploy your artifact can be found by
      reading the Maven documentation, but here is a brief summary of
      deploying via ftp, the most likely scenario.</para>

      <para>First you will need to define within the pom.xml for your plugin
      project the location the artifact is going to be deployed to. <screen>&lt;project&gt;

...

  &lt;distributionManagement&gt;
    &lt;repository&gt;
      &lt;id&gt;my-ftp-repository&lt;/id&gt;
      &lt;name&gt;My Ftp Repository&lt;/name&gt;
      &lt;url&gt;ftp://webserver/var/www/html/maven/repository/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/distributionManagement&gt;

...

  &lt;build&gt;
    &lt;extensions&gt;
      &lt;extension&gt;
        &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;
        &lt;artifactId&gt;wagon-ftp&lt;/artifactId&gt;
        &lt;version&gt;1.0-alpha-6&lt;/version&gt;
      &lt;/extension&gt;
    &lt;/extensions&gt;
  &lt;/build&gt;

...

&lt;/project&gt;</screen>where webserver is the name of the server you are
      deploying to, and /var/www/html/ is the Apache server document root.
      /maven/repository/ is a sensible place to put your repository on you
      server, but you can of course choose your own. The declaration of
      wagon-ftp is also required for Maven to be able to find the extension to
      support ftp.</para>

      <para>Since Maven will need to know the user name and password for the
      transfer, and you obviously don't want to declare these within your
      project file, these are defined within your Maven settings.xml as
      follows:<screen>&lt;settings&gt;

...

  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;my-ftp-repository&lt;/id&gt;
      &lt;username&gt;user&lt;/username&gt;
      &lt;password&gt;pass&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;

...

&lt;/settings&gt;</screen> The settings.xml file can be found within
      $HOME/.m2/settings.xml when using Linux or the Mac, or "Documents and
      Settings\&lt;user&gt;\.m2\settings.xml" when using Windows.</para>

      <para>Maven also supports deployment using <ulink
      url="http://maven.apache.org/guides/mini/guide-deploy-ssh-external.html">ssh.</ulink></para>

      <para>Once this has been set up then the plugin is deployed using the
      maven command 'mvn deploy'.</para>

      <para>If your plugin has additional dependencies that are not available
      through the myGrid or Maven Central repositories, you will need to
      publish those within your repository also. You can do this by using the
      <ulink
      url="http://maven.apache.org/guides/mini/guide-deploying-3rd-party-jars.html">mvn
      deploy:deploy-file</ulink> command to deploy individual jar files. If
      you find the artifact is available in another repository your can use
      that but will need to include that repository in the list of
      repositories when describing your plugin in the next section.</para>
    </section>

    <section id="plugin_describing">
      <title>Describing the Plugin.</title>

      <para>Once the artifact is deployed, it is necessary to describe the
      plugin before it can be installed into Taverna. This comprises of two
      simple xml files. The first file provides details about your plugin and
      contains the following content, using the myGrid Feta plugin as an
      example:</para>

      <para><screen>&lt;plugin&gt;

  &lt;name&gt;Feta&lt;/name&gt;
  &lt;description&gt;Service discovery&lt;/description&gt;
  &lt;identifier&gt;uk.org.mygrid.taverna.plugins.feta&lt;/identifier&gt;
  &lt;version&gt;1.1.1&lt;/version&gt;
  &lt;provider&gt;mygrid.org.uk&lt;/provider&gt;

  &lt;repositories&gt;
    &lt;repository&gt;http://www.mygrid.org.uk/maven/repository/&lt;/repository&gt;
  &lt;/repositories&gt;

  &lt;profile&gt;
    &lt;artifact groupId="uk.org.mygrid.feta" artifactId="feta-client" version="1.1.1"/&gt;
  &lt;/profile&gt;

  &lt;taverna&gt;
    &lt;version&gt;1.5.1&lt;/version&gt;
  &lt;/taverna&gt;

&lt;/plugin&gt;</screen>Although many are self explanatory, here is a
      description of all the elements:</para>

      <table>
        <title>Plugin description elements.</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Element</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>name</entry>

              <entry>The name of the Plugin</entry>
            </row>

            <row>
              <entry>description</entry>

              <entry>The description of the plugin that is displayed in
              Taverna's Plugin Manager</entry>
            </row>

            <row>
              <entry>identifier</entry>

              <entry>An additional identifier for your plugin that helps
              distinguish it from other plugins with the same name, though
              obviously you should try to avoid a name clash if
              possible.</entry>
            </row>

            <row>
              <entry>version</entry>

              <entry>The published version of your plugin. This doesn't
              necessarily match the version of your plugin artifact, but in
              most cases will.</entry>
            </row>

            <row>
              <entry>provider</entry>

              <entry>An identier for your plugin site, to help identifying the
              origin of a plugin.</entry>
            </row>

            <row>
              <entry>repositories/repository</entry>

              <entry>A list of one or more repository locations that the
              plugin artifact can be found as well as dependencies. This will
              at least include the repository you created when deploying your
              plugin in the previous section. Its not necessary to declare the
              central maven repository or the mygrid repository here as
              Taverna already knows about these. If you plugin repository
              mirrored you will want to include your mirror sites
              here.</entry>
            </row>

            <row>
              <entry>profile/artifact</entry>

              <entry>The profile lists the artifact for your plugin that you
              created and deployed previously. This can contain one or more
              artifacts, though in the majority of cases there will just be
              one. The artifact element should include the groupId, artifactId
              and version that relate directly to the project pom.xml of your
              plugin.</entry>
            </row>

            <row>
              <entry>taverna/version</entry>

              <entry>A list of the versions of Taverna your plugin is
              compatible with. When checking for compatibility these values
              are compared as a string comparison with the start of the
              running Taverna version. So a version of 1.5.1 declared here
              would state this plugin is compatible with all 1.5.1.x versions
              of Taverna, or in an extreme case a 1 here would state the
              plugin is compatible with all 1.x.x.x versions of Taverna
              (though this scenerio is practically impossible!).</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This information is stored in an xml file named of your chosing,
      though a name that reflects the plugin and version is clearly
      advisable.</para>

      <para>The next xml file is a list of the plugins avaliable at your site,
      and has to be named pluginlist.xml. This contains a simple list of the
      files just produced, which can either be declared as relative or
      absolute locations. E.g.</para>

      <screen>&lt;plugins&gt;
  &lt;plugin&gt;feta-plugin-1.1.1.xml&lt;/plugin&gt;
  &lt;plugin&gt;http://www.somefaroffplace.org/another-plugin.xml&lt;/plugin&gt;
&lt;/plugins&gt;</screen>

      <caution>
        <para>In Taverna 1.5.0 this file was called plugins.xml, and did not
        contain the &lt;taverna&gt;&lt;version/&gt;&lt;/taverna&gt; elements.
        This was renamed to pluginlist.xml to avoid the possibility of
        installing incompatible plugins into Taverna 1.5.0. If you omit these
        elements, Taverna will assume it is only compatible with Taverna
        1.5.0.</para>
      </caution>

      <para>The final step in publishing your plugin is to place these files
      on a http server where they can be accessed from Taverna, once again
      somewhere publically accessible if you wish to share your plugin with
      Taverna users. The http server that hosts your repository, but within a
      seperate directory not within the repository, would be a natural
      location.</para>

      <tip>
        <para>The <ulink
        url="http://www.mygrid.org.uk/taverna/updates/1.5/plugins/">live
        myGrid plugin</ulink> declarations may provide some additional useful
        examples.</para>
      </tip>
    </section>

    <section>
      <title>Installing the Plugin.</title>

      <para>Now all thats required is to install your plugin into Taverna.
      This is done through the Plugin Manager -&gt; Find Plugins -&gt; Add
      Plugin Site.</para>

      <screenshot>
        <screeninfo>Adding a Plugin site</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/add_pluginsite.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>The URL should point to the root directory that the pluginlist.xml
      was published, not directly to the pluginlist.xml file itself. If all
      has gone well, once adding this your plugin should appear in the list of
      available plugins for installation.</para>

      <para>However, what is probably more interesting here is what happens
      once the plugin site has been defined and the plugin installed.</para>

      <para>When the site is added an entry is added to a pluginsites.xml file
      in $taverna.home/plugins/ which is created if it didn't already exist.
      This file looks like:</para>

      <screen>&lt;pluginSites&gt;
  &lt;pluginSite&gt;
    &lt;name&gt;My Plugin Site&lt;/name&gt;
    &lt;url&gt;http://mypluginserver.org/plugins/&lt;/url&gt;
  &lt;/pluginSite&gt;
&lt;/pluginSites&gt;</screen>

      <para>Once the plugin itself is actually installed, it is added to a
      file plugins.xml in the same location. Taverna inserts the information
      from the plugins xml definintion into this file. So for using our Feta
      example this would look like</para>

      <screen>&lt;plugins&gt;

...

  &lt;plugin&gt;
    &lt;name&gt;Feta&lt;/name&gt;
    &lt;description&gt;Service discovery&lt;/description&gt;
    &lt;identifier&gt;uk.org.mygrid.taverna.plugins.feta&lt;/identifier&gt;
    &lt;version&gt;1.1.1&lt;/version&gt;
    &lt;provider&gt;mygrid.org.uk&lt;/provider&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;

    &lt;repositories&gt;
      &lt;repository&gt;http://www.mygrid.org.uk/maven/repository/&lt;/repository&gt;
    &lt;/repositories&gt;

    &lt;profile&gt;
      &lt;artifact groupId="uk.org.mygrid.feta" artifactId="feta-client" version="1.1.1" /&gt;
    &lt;/profile&gt;

    &lt;taverna&gt;
      &lt;version&gt;1.5.1&lt;/version&gt;
    &lt;/taverna&gt;

&lt;/plugin&gt;

...

&lt;/plugins&gt;</screen>

      <tip>
        <para>Whilst testing your plugin you can bypass the publishing stage
        by directly manipulating the $taverna.home/plugins.xml file.</para>

        <para>You can also bypass the deployment stage by using file URL's to
        point directly at your local maven repository, for example
        &lt;repository&gt;file:/home/elvis/.m2/repository/&lt;/repository&gt;</para>
      </tip>
    </section>
  </section>

  <section id="plugin_publishing_updates">
    <title>Publishing Plugin updates.</title>

    <para>Eventually you will probably add an improvement to your plugin, or,
    heaven forbid, find a bug that requires fixing. Once you have made your
    changes you will be wanting to publish an update for the benefit of other
    users of your plugin. This is actually quite straightforward.</para>

    <para>Once your changes have been made you will need to increment the
    version of your plugin artifact in the pom.xml for your artifact. Once
    this is done, you can deploy your artifact to your repository just as
    decscribed previously in <link linkend="plugin_deploy">Deploying the
    Plugin Artifact</link>. Once this is complete you then need to create a
    new copy of the xml description of your plugin, as explained in <link
    linkend="plugin_describing">Describing your plugin.</link>You should
    create a new name for this file that reflects the new version. Within this
    file you should update the &lt;version/&gt; tag, and also update the
    &lt;artifact/&gt; to reference your new plugin version. This then needs
    adding to the list of plugins defined in your pluginlist.xml for your
    plugin site. We'd suggest adding a new entry, rather than replacing your
    old entry, - this is especially important if your new plugin is compatible
    with a different version of Taverna.</para>

    <para>When starting, or periodically whilst running, Taverna will check
    your site to see if new plugins are available. If the version is greater
    than the version of the currently installed plugin, and providing it is
    still marked as compatible with the current version of Taverna, then there
    is a visual indication that a plugin update is available. This is
    indicated as a green arrow on the right hand side of the toolbar.</para>

    <screenshot>
      <screeninfo>Plugin update available</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/plugin_update_available.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Clicking this arrow will popup the Plugin Manager which then prompts
    the user to update the plugin. Once this is done the new version of the
    plugin is installed.</para>
  </section>
</section>