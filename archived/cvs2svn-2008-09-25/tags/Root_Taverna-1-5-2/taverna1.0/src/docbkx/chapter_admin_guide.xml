<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Administrator's Guide</title>

  <section>
    <title>Overview</title>

    <para>This chapter describes how Taverna can be configured in a multi-user
    setting. It details the bootstrap process used by Taverna when first
    invoked by a user and how to override aspects of this process to insert
    your own configuration, software repositories, profiles, plugin sets etc.
    If you are a system administrator installing Taverna in a central location
    for use by multiple individual users you should read this, if you are just
    using Taverna on a single machine with the default supplied profiles,
    update manager settings etc this chapter is not required.</para>
  </section>

  <section>
    <title>What happens when Taverna loads?</title>

    <para>Taverna from version 1.5 onwards uses a plugin and code manager
    called Raven. This gives us the ability to include multiple versions of
    third party dependencies (i.e. Axis 1.3 and Axis 1.4) without version
    conflicts as well as manage extensions supplied by third parties and
    provide some level of automatic updates. This comes at a cost however, as
    the installation and configuration of Taverna is considerably more
    complex.</para>

    <para>When a fresh Taverna installation is run for the first time after
    being downloaded from one of our download mirrors the following things
    happen, performed by the Bootstrap class in the taverna-launcher jar file
    :</para>

    <orderedlist>
      <listitem>
        <para>Configure an authentication mechanism. This uses the system
        properties<property>http.ProxyUser</property> and
        <property>http.proxyPassword</property> to create a new Authenticator
        to attempt to use password authentication on any HTTP proxy. If either
        property is undefined this stage is skipped.</para>
      </listitem>

      <listitem>
        <para>Determine the application home directory. If the system property
        <property>taverna.home</property> is set then use this, otherwise use
        the default value for <property>user.home</property> with an operating
        system specific suffix added. In effect this means that the default on
        Windows platforms will be the <filename>Documents and
        Settings/<replaceable>USER</replaceable>/Application
        Data/Taverna</filename>, on OSX
        <filename><replaceable>USER</replaceable>/Library/Application
        Support/.taverna</filename> and on linux or other UNIX-like platforms
        <filename>~<replaceable>USER</replaceable>/.taverna</filename>.</para>

        <para>If the application home directory defined above does not exist
        then create it along with a <filename>conf</filename> subdirectory. If
        the <property>taverna.home</property> property wasn't set then set it
        to the absolute path of the <filename>.taverna</filename>
        directory.</para>
      </listitem>

      <listitem>
        <para>Taverna checks for a property
        <property>raven.properties</property>. If defined this is used as the
        URL to fetch a properties file containing Raven configuration,
        otherwise the default
        <uri>http://www.mygrid.org.uk/taverna/updates/1.5/raven.properties</uri>
        is used instead. A Properties object is initialized from the
        properties file.</para>

        <para>A local copy of the properties file is saved as
        <filename><replaceable>taverna.home</replaceable>/conf/raven-1.5.properties</filename>.
        This file is written every time as far as I can see.</para>

        <para>If the fetch process fails for some reason the fallback
        behaviour is to read this file if it exists. If the local copy hasn't
        been written and the remote fetch fails the application will not start
        and you should see an exception message "<literal>Unable to find raven
        properties</literal>" in your console.</para>

        <para>After the remote fetch or local load any system properties are
        pushed onto the Properties object. This means that anything you set
        with <literal>-Dproperty=value</literal> in the batch or shell scripts
        will be visible from this stage onwards.</para>
      </listitem>

      <listitem>
        <para>Raven uses the Properties object loaded in the previous stage to
        search for remote Maven 2 compliant code repositories from which it
        can download code artifacts. It searches for properties with names of
        the form
        <property>raven.repository.<replaceable>NUMBER</replaceable></property>
        and interprets the value as a URL to the root of the repository. At
        the time of writing the repositories in the default properties file
        are :</para>

        <para><literallayout>raven.repository.11 = http://www.mygrid.org.uk/maven/repository/ 
raven.repository.12 = http://www.mygrid.org.uk/maven/proxy/repository/ 
raven.repository.13 = http://mirrors.sunsite.dk/maven2/ 
raven.repository.14 = http://www.ibiblio.org/maven2/ 
raven.repository.15 = http://mobycentral.icapture.ubc.ca/maven/ 
raven.repository.16 = http://bioinf.ncl.ac.uk/mirror/maven/repository/ 
raven.repository.17 = http://mirror.omii.ac.uk/maven/repository/</literallayout></para>

        <para>The first sites contain the primary Taverna code, the
        ibiblio.org site contains almost everything else (and is the default
        Maven 2 mirror used by Maven). There's nothing particularly magic
        about these URLs, they simply point to the root of a directory
        structure containing a mix of jar files and metadata files describing
        dependencies. If you develop with Maven 2 you already know what these
        look like.</para>

        <para>If a repository is identified by a <literal>file://</literal>
        URI the repository is treated as local and Raven is able to access
        artifacts in place rather than copy them to
        <filename><replaceable>taverna.home</replaceable>/repository</filename></para>
      </listitem>

      <listitem>
        <para>Raven attempts to initialize a profile. The profile is in some
        ways the 'version' of Taverna in that it defines the set of code
        artifacts to download, some of these are core components (such as the
        workflow model) and some are optional (such as the processor types
        e.g. BioMoby support).</para>

        <para>The profile is located by the property
        <property>raven.remoteprofile</property> interpreted as a URL to a
        profile definition. In the default properties file this points to
        <uri>http://www.mygrid.org.uk/taverna/updates/1.5/taverna-1.5-profile.xml</uri>.</para>

        <para>A local profile filename is constructed from the value of
        <property>raven.remoteprofile</property> by appending the file part of
        the URL to
        <filename><replaceable>taverna.home</replaceable>/conf/</filename> so
        in the default case this would be
        <filename><replaceable>taverna.home</replaceable>/conf/taverna-1.5-profile.xml</filename>.
        The system property <property>taverna.profile</property> is set to the
        URL form of this filename.</para>

        <para>If the local profile file doesn't already exist it is created by
        copying the <filename>default-profile.xml</filename> file from the
        bootstrap jar archive! One might expect it to be copied instead from
        the profile location you've just given it. In fact what happens is the
        default is used and the first time Taverna is run a 'profile update
        available' appears which will then use the remote profile. This is
        broken IMHO.</para>
      </listitem>

      <listitem>
        <para>Raven determines where to cache jar files and metadata through a
        property <property>taverna.repository</property>. If this is undefined
        it uses
        <filename><replaceable>taverna.home</replaceable>/repository</filename>.
        Note that in the default configuration this results in jar files being
        downloaded to the user profile - this can easily swamp a large shared
        installation as there will be at least 30-40mb of files in a typical
        Taverna build.</para>

        <para>If the specified directory doesn't exist Taverna will create it.
        If it exists and is a file rather than a directory an error will be
        reported on the console declaring this.</para>
      </listitem>

      <listitem>
        <para>The bootstrap uses properties from the file located by
        <property>raven.properties</property> to determine an artifact and
        classname specification for the version of Raven. In the default
        implementation this is as follows :</para>

        <para><literallayout># Repository artifact containing Raven loader (should not have any dependencies) 
raven.loader.groupid = uk.org.mygrid.taverna.raven 
raven.loader.artifactid = raven 
raven.loader.version = 1.5.0 
# This static method will be called with lots of parameters 
raven.loader.class = net.sf.taverna.raven.Loader 
raven.loader.method = doRavenMagic</literallayout></para>

        <para>These properties do not need to be changed unless you're
        upgrading Raven itself, something you have no reason to be doing so
        best to leave them alone! Raven uses these internally to construct a
        Method object through reflection which can be used to build the real
        application object, in this case this is defined by the following
        properties (also in the raven.properties file) :</para>

        <para><literallayout># Which target artifact to load and run (can have dependencies) 
raven.target.groupid = uk.org.mygrid.taverna 
raven.target.artifactid = taverna-workbench 
raven.target.version = 1.5.0 
# This static method will be called with no parameters, or 
# if it accepts String[], commandline args will be passed 
raven.target.class = org.embl.ebi.escience.scuflui.workbench.Workbench 
raven.target.method = getInstance</literallayout></para>

        <para>In this default case the bootstrap is configured to build a
        Class object for
        <literal>org.embl.ebi.escience.scuflui.workbench.Workbench</literal>
        and use the <literal>getInstance</literal> method on it to create a
        new workbench object. I'm not sure why we do this here rather than
        calling a <literal>main(String[...])</literal> method but hey.</para>
      </listitem>

      <listitem>
        <para>Any artifacts in the profile with the attribute
        <varname>system</varname> defined and set to <literal>true</literal>
        are forcibly added to the bootstrap classpath, this only applies to
        artifacts which cannot be normally loaded by Raven such as XML
        parsers. In the default profile this means the following artifacts
        :</para>

        <para><literallayout>&lt;!-- system sax parser --&gt; 
&lt;artifact groupId="xerces" artifactId="xercesImpl" version="2.6.2" system="true"/&gt; 

&lt;!-- Jaxen XML support --&gt; 
&lt;artifact groupId="jaxen" artifactId="jaxen" version="1.0-FCS" system="true"/&gt; 
&lt;artifact groupId="saxpath" artifactId="saxpath" version="1.0-FCS" system="true"/&gt; 
&lt;artifact groupId="dom4j" artifactId="dom4j" version="1.6" system="true"/&gt; 

&lt;!-- system log4j for Raven's Log4jLog proxy --&gt; 
&lt;artifact groupId="log4j" artifactId="log4j" version="1.2.12" system="true"/&gt;</literallayout></para>
      </listitem>

      <listitem>
        <para>Once this environment is configured correctly the reflection
        based loader created in (7) is used to instantiate the Workbench
        class, passing it any arguments from the command line. The
        splashscreen is shown based on properties within the raven.properties
        file as follows (the timeout is in seconds and is the duration for
        which the splash screen will remain, if clicked it goes away
        immediately) :</para>

        <para><literallayout># Show splashscreen? Set to 'false' to disable 
raven.splashscreen = true 
raven.splashscreen.timeout = 10</literallayout></para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Runtime configuration of Raven within the Workbench</title>

    <para>The <property>raven.properties</property> file also contains
    configuration for the workbench plugin manager. Specifically it declares a
    location to go to for a list of available profiles (used by the
    <guimenu>select workbench version</guimenu> menu) as follows :</para>

    <para><literallayout>#raven.remoteprofiles points to an XML document describing all the available taverna profiles 
raven.remoteprofiles=http://www.mygrid.org.uk/taverna/updates/1.5/taverna-1.5-profiles.xml</literallayout></para>

    <para>...and a list of plugin sites used by the plugin manager (the value
    for the <property>raven.pluginsite.1</property> is all one line, split
    here to make it possible to read) :</para>

    <para><literallayout># The default plugin update sites, with mirror sites seperated by commas 
# the .name is optional and provides a name for the site 
raven.pluginsite.1=http://www.mygrid.org.uk/taverna/updates/1.5/plugins/, 
                   http://bioinf.ncl.ac.uk/mirror/taverna/updates/1.5/plugins/, 
                   http://mirror.omii.ac.uk/taverna/updates/1.5/plugins/ 
raven.pluginsite.1.name=Taverna Plugin Update Site</literallayout></para>
  </section>

  <section>
    <title>Copying of mygrid.properties to user profile</title>

    <para>Previous versions of Taverna (prior to 1.5) shipped with a
    <filename>conf/mygrid.properties</filename> file containing all
    configuration data for the workbench. Subsequent to 1.5 this file has been
    bundled inside the
    <filename>taverna-core-<replaceable>version</replaceable>.jar</filename>
    file and is copied into
    <filename><replaceable>taverna.home</replaceable>/conf/mygrid.properties</filename>
    when the workbench is first run.</para>

    <para>The above behaviour is not that great, we really should have a
    default system-wide conf directory from which such things are copied, I
    know the logic is that we can distribute new default configurations with
    new versions of the core classes but I think it's highly broken as it
    stands.</para>

    <para>There are also some 'properties.dist' files, are these to be used as
    backups? When are they created?</para>

    <para>The mygrid.properties file contains some internal logic (which could
    sensibly be within the jar file) but also a lot of user-editable stuff
    such as default services and diagram configuration. These should
    definitely not!</para>
  </section>

  <section>
    <title>Test for SVG support...</title>

    <para><mediaobject>
        <imageobject>
          <imagedata align="center" fileref="ConvertedEMBOSSTutorial.svg"
                     format="SVG" scalefit="1" />
        </imageobject>
      </mediaobject></para>
  </section>
</chapter>