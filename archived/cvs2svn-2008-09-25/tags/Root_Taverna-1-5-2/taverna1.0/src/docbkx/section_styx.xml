<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
    <title>Styx based streaming services</title>

    <para><emphasis>Note - this feature is not adequately tested, so use at
    your own risk</emphasis>. Styx based services differ from the other types
    available within Taverna in that they are reference based rather than
    value based. For a conventional web service, soaplab installation etc the
    data required to start the operation is sent from the workflow enactor (so
    from the user's desktop machine in the default configuration) to the
    service, then the results from that service are sent back to the enactor.
    If the next process in the workflow is also on the same machine as that
    service the data will still have to go back to the enactor then back out -
    this is clearly not efficient and may become impossible in some
    cases.</para>

    <para>In contrast, Styx based services pass data directly between the
    services and use the workflow enactor as a control mechanism. This has
    obvious potential advantages in terms of efficiency and performance at the
    expense of loosing some information about the running workflow - there is
    no way get the intermediate results between two styx operations as the
    data never returns to the enactor.</para>

    <screenshot>
      <screeninfo></screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/styx_workflow.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>In the workflow shown above there is a single string constant
    processor feeding data to the first of two styx services. This data is an
    actual data value, so the link is made to the '<emphasis
    role="bold">stringIn</emphasis>' input. This has the effect of creating a
    stream of data out of the value passed from the <emphasis
    role="bold">SingleString</emphasis> processor and feeding it into the
    <emphasis role="bold">StyxService1</emphasis>. </para>

    <para>As there are two styx services adjacent to one another in the
    workflow the designer can take advantage of the performance improvement
    derived from streaming data directly between the services. The output
    '<emphasis role="bold">refStdOut</emphasis>' in StyxService1 is passed
    into '<emphasis role="bold">refIn</emphasis>' in <emphasis
    role="bold">StyxService2</emphasis> - the actual data passed here through
    the enactor is in the form of a URL corresponding to a stream to which the
    <emphasis role="bold">StyxService2</emphasis> can connect and read data
    directly from <emphasis role="bold">StyxService1</emphasis>. When
    configured in this mode <emphasis role="bold">StyxService1</emphasis> will
    complete immediately as far as the workflow engine is concerned - this may
    well not correspond to completion of the actual service though! One
    immediate benefit of this is that <emphasis
    role="bold">StyxService2</emphasis> can start working on the partial
    results of <emphasis role="bold">StyxService1</emphasis> before that
    service has completed.</para>

    <para>The workflow output requires a value to be passed to it rather than
    a stream so the user links the output '<emphasis
    role="bold">stringOut</emphasis>' in <emphasis
    role="bold">StyxService2</emphasis>. If either '<emphasis
    role="bold">stringOut</emphasis>' or '<emphasis
    role="bold">binaryOut</emphasis>' are connected to a downstream processor
    or to a workflow output the processor will not complete immediately and
    will instead wait, consuming data from the output stream and writing it
    into a value which is then passed to the next stage in the workflow
    through the enactor.</para>

    <para>This hybrid architecture allows parts of the workflow to take
    advantage of the high performance and large data handling abilities
    conveyed by the use of direct streams between services while also
    benefiting from the simplicity of direct value passing where
    feasible.</para>
  </section>