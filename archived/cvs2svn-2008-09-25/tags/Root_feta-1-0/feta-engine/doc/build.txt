
FETA_ENGINE INSTALLATION
------------------------
Individual steps in fetaEngine installation process are described
below. The mygrid project has chosen Tomcat as  the platform for
delivering web-services. The following document assumes that the
web-service will be installed into  Tomcat, This process has been
tested on  Tomcat  versions 4.1 and  5.0.28. It  is expected to
work on other versions of Tomcat as well.

1. If you have the  source distribution make sure you follow all the following steps. If you have the 
binary distribution (i.e. the war file). You can skip step 4.


2. Modify the configuration file <fetaEngine-home>/conf/fetaEngine.properties



	2.1) In order to do RDFS reasoning Feta needs the 
	location of the ontologies used to structure and annotate the semantic service descriptions. 
	The properties file will be pre-cofigured to use the mygrid service and domain ontologies.
	You can change the configuration for the domain ontology to point out to your ontology. But the 
	configurations for the service ontologies need to point out to complementary the myGRid and BioMoby service
	ontologies.


	fetaEngine.ontology.URL0=http\://phoebus.cs.man.ac.uk:8100/feta-beta/mygrid/moby-feta/Common-Service-Ontology.rdfs
	fetaEngine.ontology.URL1=http\://phoebus.cs.man.ac.uk:8100/feta-beta/mygrid/moby-feta/UpdatedmyGridDomainOntology.rdfs



	2.2) In order for Feta to persist the index of services registered to it, we need to specify 
	a file location.


		fetaEngine.persistentIndex.location=c:/SesamePersistence.dat


	2.3) Feta Engine is implemented by providing a high level interface
	(IFetaModel) to an RDF repository. The first property determines
	the class that implements this interface and is used to connect to
	the back-end RDF repository.  Currently the Feta Engine supports
	only the Sesame2Alpha3 based implementation and this is reflected in the
	properties file with the property


	       fetaEngine.backend.provider=uk.ac.man.cs.img.fetaEngine.store.impl.sesame2.SesameModelImpl

	Alternatives to Sesame can be RDF frameworks such as Kowari and
	Jena with NG4J. In case you develop implementations of the Feta Interface
	The "feta.backend.provider" property needs to be set to enable its
	usage by the Feta Web service.


	2.3) The test suite included with Feta Engine source code tests the feta engine located 
	at the web end point which is specified through the property "feta.test.ws.url". Assuming that
	the engine will be deployed on the locahost a default value for this property is set as.
	
	       feta.test.ws.url = http\://locahost:8080/fetaEngine1.0/services/feta
	       fetaEngine.test.file=file\:///C:/work/code/mygrid/fetaEngine1.0/etc/testData/services_test.xml



4. Do "ant war"

5. Start Tomcat and go to http://<host>:<port>/manager/html . Using the web application deployment form 
at this location deploy the newly generated fetEngine1.0.war file to Tomcat.

6. Restart tomcat. Verify the deployment of Feta Engine by going to

   http://<host>:<port>/fetaEngine1.0/services/feta?wsdl
   
7. Copy fetEngine.properties file to <tomcat-home>/common/classes 

8. Use the test client to do publish and inquiry tests using the specified test data file
   The command for this is "ant testclass AllTests"
   This target will cause tests to be run against the Feta Engine web service
   located at the web end point which is the value of property "feta.test.ws.url".



INITIAL TEST DATA PROVIDED WITH FETA ENGINE
-------------------------------------------

The directory <fetaEngine-home>/etc/testData contains an xml file named
"services_test.xml" that is generated for the engine to be tested. The 
XML file contains a group of annotated service descriptions. 

