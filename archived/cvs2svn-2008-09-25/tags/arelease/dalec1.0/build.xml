<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="dalec" default="java" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="2.0"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
    <property name="test.src.dir" value="./test"/>
    <property name="reports.tests" value="./reports"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="modern"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>

        <path id="base-classpath">
	        <!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
	        <!-- Also include our own source tree -->
                <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
        </path>
	<path id="base-compile-classpath">
	        <path refid="base-classpath"/>
		<!-- Jar files that are only used when building the project go here -->
		<fileset dir="./devlib">
			<include name="*.jar"/>
		</fileset>
        </path>
	<path id="base-run-classpath">
	        <path refid="base-classpath"/>
	        <pathelement path="./workbench/conf"/>
	</path>
	<path id="base-test-classpath">
	        <path refid="base-run-classpath"/>
		<path refid="${java.class.path}"/>
		<pathelement path="${build.text.classes}"/>
        </path>
	<path id="compile-classpath">
	        <path refid="base-compile-classpath"/>
	</path>
	<path id="run-classpath">
	        <path refid="base-run-classpath"/>
	</path>
	<path id="test-classpath">
	        <path refid="base-test-classpath"/>
	</path>
	
  	<!--
	<taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc">
		<classpath refid="compile-classpath"/>
	</taskdef>
	-->

	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Version class generator task -->
	<taskdef name="jreleaseinfo" classname="ch.oscg.jreleaseinfo.anttask.JReleaseInfoAntTask">
	        <classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Fetch .jar files -->
	<target name="fetchjars">
	        <mkdir dir="./netlib"/>
            <!-- JDom -->
	    <!--
		<get src="http://www.ibiblio.org/maven/jdom/jars/jdom-1.0.jar" 
		     dest="./netlib/jdom-1.0.jar" usetimestamp="yes"/>
		     -->
		<!-- Reset the compile classpath to include the newly fetched classes -->	
		<path id="downloaded-libs">
		        <fileset dir="./netlib">
			       <include name="*.jar"/>
			</fileset>
		</path>
		<path id="compile-classpath">
		        <path refid="base-compile-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
		<path id="run-classpath">
		<path refid="base-run-classpath"/>
			<path refid="downloaded-libs"/>
		</path>
		<path id="test-classpath">
		        <path refid="base-test-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
		<available classpath="${java.class.path}"
        classname="junit.framework.TestCase"
        property="junit.present"/>

	</target>

	<!-- Purge all fetched jar files -->
	<target name="purgejars">
	        <delete dir="./netlib"/>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			ignoreVersion="yes"
			sourceBrowser="yes"/>
	</target>

	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${reports.tests}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${reports.tests}"/>
		<mkdir dir="netlib"/>
		<path id="downloaded-libs">
		        <fileset dir="./netlib">
			       <include name="*.jar"/>
			</fileset>
		</path>
		<path id="compile-classpath">
		        <path refid="base-compile-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
		<path id="run-classpath">
		<path refid="base-run-classpath"/>
			<path refid="downloaded-libs"/>
		</path>
		<path id="test-classpath">
		        <path refid="base-test-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
	</target>

	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<!-- Autogenerate the version information -->
		<jreleaseinfo targetDir="${build.src}"
		              className="DalecReleaseInfo"
			      packageName="net.sf.taverna.dalec"
			      project="${ant.project.name}"
			      version="${project.version}"
			      withViewer="false"/>
			      
	</target>

    <!-- Prepare the test source tree for compilation -->
    <target name="prepare-test-src" depends="prepare">
        <mkdir dir="${build.test.src}"/>
        <mkdir dir="${build.test.classes}"/>
        <copy todir="${build.test.src}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
            </fileset>
        </copy>
    </target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac
            debug="on"
            srcdir="${build.src}"
            destdir="${build.classes}"
            source="1.4"
		deprecation="on">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
				<exclude name="**/*.java"/>
            </fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.jar" basedir="${build.classes}" update="no"/>
	</target>

    <!-- Build tests -->
    <target name="javac-tests" depends="prepare-test-src, java">
        <!-- Run javac to turn .java files into .class -->
        <javac
            debug="on"
            srcdir="${build.test.src}"
            destdir="${build.test.classes}"
            source="1.4">
            <classpath refid="compile-classpath"/>
        </javac>
        <!-- Copy over any configuration files that you might have -->
        <copy todir="${build.test.classes}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="run-tests" depends="javac-tests">
        <property name="test.subtree" value="**"/>
	<available classpathref="compile-classpath" classname="junit.framework.TestCase" property="junit.present"/>
        <echo message="JUnit present:           ${junit.present}"/>
        <echo message="Running tests:           ${test.subtree}"/>
	<junit maxmemory="128m" printsummary="yes" haltonfailure="no" reloading="no">
            <formatter type="plain" usefile="true"/>
            <classpath>
	      <path refid="compile-classpath"/>
	      <pathelement path="${build.test.classes}"/>
	    </classpath>
	    <!-- The junit task doesn't support 'if' so we test for JUnit here -->
            <batchtest fork="no" todir="${reports.tests}" if="junit.present">
                <fileset dir="${build.test.classes}">
                    <include name="${test.subtree}/*Test.class"/>
                    <include name="${test.subtree}/*TestSuite.class"/>
                    <exclude name="**/Abstract*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes"
			 destdir="${build.javadocs}"
             linksource="yes"
             breakiterator="yes"
			 sourcepath="${build.src}"
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>"
			 packagenames="*"
             source="1.4"
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>

	<!-- Run arbitrary unit test -->
	<target name="runtestunit" depends="jar">
		<java classname="junit.textui.TestRunner" fork="true">
			<arg value="${class}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>
	
	<!-- Run chainsaw -->
	<target name="chainsaw">
		<java classname="org.apache.log4j.chainsaw.Main" fork="true">
			<classpath refid="compile-classpath"/>
			<sysproperty key="chainsaw.port" value="4445"/>
		</java>
	</target>
	
</project>
