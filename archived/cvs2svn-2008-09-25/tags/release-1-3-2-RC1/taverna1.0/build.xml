<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="taverna" default="workbench" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="1.3.2-RC1"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
    <property name="test.src.dir" value="./test"/>
    <property name="reports.tests" value="./reports"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="modern"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>

        <path id="base-classpath">
	        <!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
	        <!-- Also include our own source tree -->
                <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
        </path>
	<path id="base-compile-classpath">
	        <path refid="base-classpath"/>
		<!-- Jar files that are only used when building the project go here -->
		<fileset dir="./devlib">
			<include name="*.jar"/>
		</fileset>
        </path>
	<path id="base-run-classpath">
	        <path refid="base-classpath"/>
	        <pathelement path="./workbench/conf"/>
	</path>
	<path id="base-test-classpath">
	        <path refid="base-run-classpath"/>
		<path refid="${java.class.path}"/>
		<pathelement path="${build.text.classes}"/>
        </path>
	<path id="compile-classpath">
	        <path refid="base-compile-classpath"/>
	</path>
	<path id="run-classpath">
	        <path refid="base-run-classpath"/>
	</path>
	<path id="test-classpath">
	        <path refid="base-test-classpath"/>
	</path>
	
    <!-- Check the current system classpath for JUnit -->
    <available classpath="${java.class.path}"
        classname="junit.framework.TestCase"
        property="junit.present"/>


	<!--
	<taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc">
		<classpath refid="compile-classpath"/>
	</taskdef>
	-->

	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Version class generator task -->
	<taskdef name="jreleaseinfo" classname="ch.oscg.jreleaseinfo.anttask.JReleaseInfoAntTask">
	        <classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Fetch .jar files -->
	<target name="fetchjars">
	        <mkdir dir="./netlib"/>

		<!-- Bean Shell -->
	        <get src="http://www.ibiblio.org/maven/bsh/jars/bsh-2.0b1.jar" 
		     dest="./netlib/bsh-2.0b1.jar" usetimestamp="yes"/>

                <!-- JDom -->
		<get src="http://www.ibiblio.org/maven/jdom/jars/jdom-1.0.jar" 
		     dest="./netlib/jdom-1.0.jar" usetimestamp="yes"/>

		<!-- Axis jar files -->
		<!--
		<get src="http://www.ibiblio.org/maven/axis/jars/axis-1.3.jar"
			 dest="./netlib/axis-1.3.jar" usetimestamp="yes"/>
			 -->
		<get src="http://www.ibiblio.org/maven/axis/jars/axis-jaxrpc-1.3.jar"
			 dest="./netlib/axis-jaxrpc-1.3.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/axis/jars/axis-saaj-1.3.jar"
			 dest="./netlib/axis-saaj-1.3.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/axis/jars/axis-schema-1.3.jar"
		         dest="./netlib/axis-schema-1.3.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/wsdl4j/jars/wsdl4j-1.5.1.jar"
			 dest="./netlib/wsdl4j-1.5.1.jar" usetimestamp="yes"/>	  
			 
		<!-- Apache Commons -->
		<get src="http://www.ibiblio.org/maven/commons-discovery/jars/commons-discovery-0.2.jar" 
		     dest="./netlib/commons-discovery-0.2.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-1.0.4.jar" 
                     dest="./netlib/commons-logging-1.0.4.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/commons-httpclient/jars/commons-httpclient-3.0-rc4.jar" 
		     dest="./netlib/commons-httpclient-3.0-rc4.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/commons-codec/jars/commons-codec-1.2.jar"
		     dest="./netlib/commons-codec-1.2.jar" usetimestamp="yes"/>

		<!-- Log4j -->
		<get src="http://www.ibiblio.org/maven/log4j/jars/log4j-1.2.8.jar" 
                     dest="./netlib/log4j-1.2.8.jar" usetimestamp="yes"/>
		
		<!-- Xerces and XML APIs -->
		<get src="http://www.ibiblio.org/maven/dom4j/jars/dom4j-1.5.jar" 
                     dest="./netlib/dom4j-1.5.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/xerces/jars/xmlParserAPIs-2.2.1.jar" 
                     dest="./netlib/xmlParserAPIs-2.2.1.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/xerces/jars/xercesImpl-2.6.2.jar" 
                     dest="./netlib/xercesImpl-2.6.2.jar" usetimestamp="yes"/>

		<!-- Concurrent library -->
		<get src="http://www.ibiblio.org/maven/concurrent/jars/concurrent-1.3.4.jar" 
                     dest="./netlib/concurrent-1.3.4.jar" usetimestamp="yes"/>
		
		<!-- Servlet API -->
		<get src="http://www.ibiblio.org/maven/servletapi/jars/servlet-api-2.4-20040521.jar" 
                     dest="./netlib/servlet-api-2.4-20040521.jar" usetimestamp="yes"/>

		<!-- JUnit -->
		<get src="http://www.ibiblio.org/maven/junit/jars/junit-3.8.jar" 
                     dest="./netlib/junit-3.8.jar" usetimestamp="yes"/>
		
		<!-- Apache POI, handles Excel format for output -->
		<get src="http://www.ibiblio.org/maven/poi/jars/poi-2.0-final-20040126.jar" 
		     dest="./netlib/poi-2.0-final-20040126.jar" usetimestamp="yes"/>

		<!-- mySQL connector for biomart -->
		<get src="http://www.ibiblio.org/maven/mysql/jars/mysql-connector-java-3.0.10.jar" 
		     dest="./netlib/mysql-connector-java-3.0.10.jar" usetimestamp="yes"/>
		
		<!-- Batik 1.6 for the SVG based graph display -->
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-awt-util-1.6.jar" 
		     dest="./netlib/batik-awt-util-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-bridge-1.6.jar" 
                     dest="./netlib/batik-bridge-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-css-1.6.jar" 
                     dest="./netlib/batik-css-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-dom-1.6.jar" 
                     dest="./netlib/batik-dom-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-ext-1.6.jar" 
                     dest="./netlib/batik-ext-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-extension-1.6.jar" 
                     dest="./netlib/batik-extension-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-gui-util-1.6.jar" 
                     dest="./netlib/batik-gui-util-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-gvt-1.6.jar" 
                     dest="./netlib/batik-gvt-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-parser-1.6.jar" 
                     dest="./netlib/batik-parser-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-rasterizer-1.6.jar" 
                     dest="./netlib/batik-rasterizer-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-script-1.6.jar"  
                     dest="./netlib/batik-script-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-svg-dom-1.6.jar" 
                     dest="./netlib/batik-svg-dom-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-svggen-1.6.jar" 
                     dest="./netlib/batik-svggen-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-swing-1.6.jar" 
                     dest="./netlib/batik-swing-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-transcoder-1.6.jar" 
                     dest="./netlib/batik-transcoder-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-util-1.6.jar" 
                     dest="./netlib/batik-util-1.6.jar" usetimestamp="yes"/>
		<get src="http://www.ibiblio.org/maven/batik/jars/batik-xml-1.6.jar" 
                     dest="./netlib/batik-xml-1.6.jar" usetimestamp="yes"/>

		<!-- Reset the compile classpath to include the newly fetched classes -->	
		<path id="downloaded-libs">
		        <fileset dir="./netlib">
			       <include name="*.jar"/>
			</fileset>
		</path>
		<path id="compile-classpath">
		        <path refid="base-compile-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
		<path id="run-classpath">
		<path refid="base-run-classpath"/>
			<path refid="downloaded-libs"/>
		</path>
		<path id="test-classpath">
		        <path refid="base-test-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
	</target>

	<!-- Purge all fetched jar files -->
	<target name="purgejars">
	        <delete dir="./netlib"/>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			ignoreVersion="yes"
			sourceBrowser="yes"/>
	</target>

	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${reports.tests}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${reports.tests}"/>
		<mkdir dir="netlib"/>
		<path id="downloaded-libs">
		        <fileset dir="./netlib">
			       <include name="*.jar"/>
			</fileset>
		</path>
		<path id="compile-classpath">
		        <path refid="base-compile-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
		<path id="run-classpath">
		<path refid="base-run-classpath"/>
			<path refid="downloaded-libs"/>
		</path>
		<path id="test-classpath">
		        <path refid="base-test-classpath"/>
			<path refid="downloaded-libs"/>
		</path>	
	</target>

	<!-- Build the workbench binary distribution -->
	<target name="workbench" depends="jar">
	    <property name="workbench.dir" value="${build.dir}/${ant.project.name}-workbench-${project.version}"/>
	    <!-- Copy the workbench skeleton to the build directory -->
		<copy todir="${workbench.dir}">
		    <fileset dir="workbench"/>
		</copy>
		<!-- Copy the required libraries into the lib subdirectory of the workbench -->
		<copy todir="${workbench.dir}/lib">
			<!-- List of libraries needeed by the workbench -->
			<fileset dir="./lib" includesfile="./workbenchlibs.text"/>
			<fileset dir="./devlib" includesfile="./workbenchlibs.text"/>
			<fileset dir="./netlib" includesfile="./workbenchlibs.text"/>
			<fileset dir="${build.dir}">
				<include name="*${ant.project.name}-${project.version}.jar"/>
			</fileset>
		</copy>
		<!-- Copy the launcher .jar to the main workbench directory -->
		<copy todir="${workbench.dir}">
		        <fileset dir="${build.dir}">
			        <include name="${ant.project.name}-${project.version}-launcher.jar"/>
			</fileset>
		</copy>
		<copy todir="${workbench.dir}/libext">
		        <fileset dir="./lib" includesfile="./workbenchextlibs.text"/>
			<fileset dir="./devlib" includesfile="./workbenchextlibs.text"/>
			<fileset dir="./netlib" includesfile="./workbenchextlibs.text"/>
		</copy>
		<zip destfile="${build.dir}/${ant.project.name}-scuflworkbench-win32-${project.version}.zip"
			basedir="${workbench.dir}"/>
	</target>

	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<!-- Autogenerate the version information -->
		<jreleaseinfo targetDir="${build.src}"
		              className="TavernaReleaseInfo"
			      packageName="org.embl.ebi.escience.scufl"
			      project="${ant.project.name}"
			      version="${project.version}"
			      withViewer="false"/>
			      
	</target>

    <!-- Prepare the test source tree for compilation -->
    <target name="prepare-test-src" depends="prepare">
        <mkdir dir="${build.test.src}"/>
        <mkdir dir="${build.test.classes}"/>
        <copy todir="${build.test.src}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
            </fileset>
        </copy>
    </target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac
            debug="on"
            srcdir="${build.src}"
            destdir="${build.classes}"
            source="1.4"
		deprecation="on">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
				<exclude name="**/*.java"/>
            </fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.jar" 
		     basedir="${build.classes}"
		     excludes="**/WorkbenchLauncher*.class" 
		     update="no"/>
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}-launcher.jar"
		     basedir="${build.classes}"
		     includes="**/WorkbenchLauncher*.class" 
		     update="no"/>
	</target>

    <!-- Build tests -->
    <target name="javac-tests" depends="prepare-test-src">
        <!-- Run javac to turn .java files into .class -->
        <javac
            debug="on"
            srcdir="${build.test.src}"
            destdir="${build.test.classes}"
            source="1.4">
            <classpath refid="compile-classpath"/>
        </javac>
        <!-- Copy over any configuration files that you might have -->
        <copy todir="${build.classes}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="run-tests" depends="javac-tests">
        <property name="test.subtree" value="**"/>
<available classpath="${java.class.path}"
        classname="junit.framework.TestCase"
        property="${junit.present}"/>
        <echo message="JUnit present:           ${junit.present}"/>
        <echo message="Running tests:           ${test.subtree}"/>

        <junit maxmemory="128m" printsummary="yes" haltonfailure="no" reloading="no">
            <formatter type="plain" usefile="true"/>
            <classpath>
	      <path refid="test-classpath"/>
	      <pathelement path="${java.class.path}"/>
            </classpath>
	    <!-- The junit task doesn't support 'if' so we test for JUnit here -->
            <batchtest fork="no" todir="${reports.tests}" if="junit.present">
                <fileset dir="${build.test.classes}">
                    <include name="${test.subtree}/*Test.class"/>
                    <include name="${test.subtree}/*TestSuite.class"/>
                    <exclude name="**/Abstract*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

	<!-- Create a jar of the enactor extension classes for inclusion in a deployed enactor -->
	<target name="enactor.ext.jar" depends="java">
		<jar destfile="${build.dir}/tavernaenactor-${project.version}.jar" update="no">
			<fileset dir="${build.classes}">
				<include name="**/itinnovation/taverna/**"/>
				<include name="**/escience/scufl/**"/>
			</fileset>
		</jar>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes"
			 destdir="${build.javadocs}"
             linksource="yes"
             breakiterator="yes"
			 sourcepath="${build.src}"
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>"
			 packagenames="*"
             source="1.4"
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>

	<!-- Fetch seqhound metadata -->
	<target name="seqhound" depends="prepare-src">
	        <javadoc sourcefiles="../seqhound/src/org/blueprint/seqhound/SeqHound.java">
		        <doclet name="org.embl.ebi.escience.scuflworkers.seqhound.SeqhoundMetadataDoclet" path="build/classes/">
			<path refid="compile-classpath"/>
			</doclet>
			<classpath refid="compile-classpath"/>
			
		</javadoc>
	</target>

	<!-- Test the scufl parser -->
	<target name="test.parser" depends="jar">
	    <java classname="org.embl.ebi.escience.taverna.ScuflParser">
		    <arg value="http://www.ebi.ac.uk/~tmo/scuflexample.text"/>
			<classpath refid="compile-classpath"/>
		</java>
    </target>

	<!-- retsina GUI -->
        <target name="retsina" depends="jar">
                <java classname="uk.ac.mrc.hgmp.taverna.retsina.RetsinaApplet" fork="yes">
                    <classpath refid="compile-classpath"/>
                </java>
        </target>


	<!-- Test the model, specifically the creation of soaplab nodes -->
	<target name="test.soaplab" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.test.SoaplabProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the creation of talisman processor nodes -->
	<target name="test.talisman" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.TalismanProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>
	<!-- Test the creation of arbitrarywsdl processor nodes -->
	<target name="test.wsdl" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.WSDLBasedProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the XScufl parser -->
	<target name="test.xscuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.XScuflParserTest" fork="yes">
		    <classpath refid="run-classpath"/>
		</java>
	</target>

	<!-- Test the Scufl to XScufl convertor -->
	<target name="test.scuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.Scufl2XScuflParserTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the dot view -->
	<target name="test.dotview">
		<java classname="org.embl.ebi.escience.scufl.view.test.DotViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the XScufl view -->
	<target name="test.xscuflview" depends="jar">
		<java classname="org.embl.ebi.escience.scufl.view.test.XScuflViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

        <!-- Generate the dot views from my hybrid workflow -->
        <target name="test.tools.hybrid">
                <java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.none.dot"/>
                    <arg line="none"/>
                    <classpath refid="compile-classpath"/>
                </java>
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.bound.dot"/>
                    <arg line="bound"/>
                    <classpath refid="compile-classpath"/>
                </java>
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.all.dot"/>
                    <arg line="all"/>
                    <classpath refid="compile-classpath"/>
                </java>
        </target>

	<!-- Run the XScufl to Dot tool -->
	<target name="tools.dot">
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
			<arg line="${file}"/>
			<arg line="${outfile}"/>
			<arg line="${ports}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Run the tree model viewer -->
	<target name="tools.tree">
	        <java classname="org.embl.ebi.escience.scuflui.ScuflModelExplorerDemo" fork="yes">
		        <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

    <!-- Run the diagram viewer -->
	<target name="tools.diagram">
	        <java classname="org.embl.ebi.escience.scuflui.ScuflDiagramDemo" fork="yes">
		        <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

    <!-- Run the component demo -->
	<target name="tools.demo">
	        <java classname="org.embl.ebi.escience.scuflui.ComponentDemo" fork="yes">
		    <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Run the workbench -->
	<target name="tools.workbench">
		<java classname="org.embl.ebi.escience.scuflui.workbench.Workbench" fork="yes">
		        <arg value="${file}"/>
		   	<classpath refid="compile-classpath"/>
		</java>
	</target>

        <!-- Examine the taverna resource bundle -->
        <target name="test.rdfs" depends="java">
		<java classname="org.embl.ebi.escience.scufl.semantics.ParserTest" fork="yes">
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the data thing type system -->
	<target name="test.datathing" depends="java">
		<java classname="org.embl.ebi.escience.baclava.factory.DataThingFactoryTest" fork="no">
			<classpath refid="compile-classpath"/>
		</java>
	</target>
	<!-- Test the data thing iterator system -->
	<target name="test.iterator" depends="java">
		<java classname="org.embl.ebi.escience.baclava.IteratorNodeTests" fork="no">
			<classpath refid="compile-classpath"/>
		</java>
	</target>	
	<!-- Test the data thing iterator UI -->
	<target name="test.iteratorui" depends="java">
		<java classname="org.embl.ebi.escience.baclava.iteratorui.IteratorJTree" fork="no">
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the data thing iterator system -->
	<target name="test.store" depends="java">
		<java classname="org.embl.ebi.escience.baclava.store.test.JDBCStoreTest" fork="no">
			<classpath refid="run-classpath"/>
		</java>
	</target>

	<!-- Test the biomart integration -->
	<target name="test.mart" depends="java">
		<java classname="org.embl.ebi.escience.scuflworkers.biomart.TestQuerySerializer" fork="no">
			<classpath refid="run-classpath"/>
		</java>	
	</target>

	<!-- Run arbitrary unit test -->
	<target name="runtestunit" depends="jar">
		<java classname="junit.textui.TestRunner" fork="true">
			<arg value="${class}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>
	
	<!-- Run chainsaw -->
	<target name="chainsaw">
		<java classname="org.apache.log4j.chainsaw.Main" fork="true">
			<classpath refid="compile-classpath"/>
			<sysproperty key="chainsaw.port" value="4445"/>
		</java>
	</target>
</project>
