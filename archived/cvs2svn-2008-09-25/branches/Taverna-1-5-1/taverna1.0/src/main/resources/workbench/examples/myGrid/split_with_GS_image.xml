<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:taverna1.0.kubrick.mrl.nott.ac.uk:wfDefinition:13914426a6" author="" title="Split with GS image" />
  <s:processor name="make_seq_image_map">
    <s:beanshell>
      <s:scriptvalue>// parse input
items = new java.util.ArrayList();
tracks = new java.util.TreeSet(new Comparator() {
  public int compare(Object o1, Object o2) {
    float v1=((HashMap)o1).get("pos"), v2=((HashMap)o2).get("pos");
    String s1=((HashMap)o1).get("trackname"), s2=((HashMap)o2).get("trackname");
    return v1&gt;v2 ? 1 : (v1&lt;v2 ? -1 : s1.compareTo(s2)); 
  }
  public boolean equals(Object o) { return this==o; }
});
// name pos type begin end height col ref
pattern = java.util.regex.Pattern.compile
("(\\w+)\\s+([-+]?\\d+(\\.\\d+)?)\\s+(\\w+)\\s+(\\d+)\\s+(\\d+)\\s(\\d+)\\s+0x([0-9a-fA-F]+)\\s+(\\S+)[ \\t]*\\n");
matcher = pattern.matcher(seqmapcmds);
min=max=0;
while(matcher.find()) {
  i = new java.util.HashMap();
  i.put("trackname", matcher.group(1));
  i.put("pos", new Float(matcher.group(2)));
//3 internal group
  i.put("type", matcher.group(4));
  i.put("begin", new Integer(matcher.group(5)));
  if (i.get("begin") &gt; max)
    max = i.get("begin");
  i.put("end", new Integer(matcher.group(6)));
  if (i.get("end") &gt; max)
    max = i.get("end");
  i.put("height", new Integer(matcher.group(7)));
  i.put("color", Integer.parseInt(matcher.group(8),16));//base 16
  i.put("ref", matcher.group(9));
  System.out.println(" "+i);
  items.add(i);
  tracks.add(i);
}

// sort tracks by pos
i = tracks.iterator();
count = 0;
tracky = new java.util.HashMap();
indexy = 0;
while(i.hasNext()) {
  next = i.next();
  System.out.println(next.get("trackname")+" "+next.get("pos"));
  tracky.put(next.get("trackname"),count+(next.get("pos")&gt;0 ? 1 : 0));
  if(next.get("pos")&lt;0) indexy=count+1;
  count++;
}

row = 20;
int left=100, width=500, height=row*(count+1);
out = new java.io.ByteArrayOutputStream();
imagebuf = new java.awt.image.BufferedImage(left+width,height,java.awt.image.BufferedImage.TYPE_INT_RGB);
graphics = imagebuf.getGraphics();

imagemap = new StringBuffer();
imagemap.append("&lt;html&gt;&lt;head&gt;&lt;title&gt;title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
imagemap.append("&lt;IMG SRC=\"replacelsid:image\" HEIGHT=\""+height+
  "\" WIDTH=\""+(left+width)+"\" ISMAP USEMAP=\"#areas\"/&gt;\n");
imagemap.append("&lt;map NAME=\"areas\"&gt;\n");


// index
for (f=0.0f; f&lt;1.0f; f=f+0.2f) {
  x = (int)(left+f*width);
  graphics.drawLine(x, row*indexy, x, row*indexy+5);
  graphics.drawString(""+(min+(int)((max-min)*f)),x,row*indexy+10);
}

// tracks 
i = tracks.iterator();
while(i.hasNext()) {
  next = i.next();
  y = tracky.get(next.get("trackname"));
  graphics.drawString(next.get("trackname"),0,y*row+10);
}

// items
i = items.iterator();
while(i.hasNext()) {
  item = i.next();
  int l=(item.get("begin") &lt; item.get("end")) ? item.get("begin") : item.get("end");
  int r=(item.get("begin") &gt; item.get("end")) ? item.get("begin") : item.get("end");
  int xl=left+(l-min)*width/(max-min);
  int xr=left+(r-min)*width/(max-min);
  y = tracky.get(item.get("trackname"))*row+10-(item.get("height")/2);
  graphics.setColor(new java.awt.Color(item.get("color")));
  graphics.fillRect(xl,y,xr-xl,item.get("height"));

  imagemap.append("&lt;area SHAPE=RECT COORDS=\""+xl+","+y+" "+xr+","+
    (y+item.get("height"))+"\" HREF=\""+item.get("ref")+"\" ALT=\""+
    item.get("ref")+"\"&gt;\n");

//System.out.println("rect "+xl+","+((y*row)+10-(height/2))+","+(xr-xl)+","+height);
}

jpegEnc = com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(out);
jpegEnc.encode(imagebuf);
out.close();
image = out.toByteArray();

imagemap.append("&lt;/map&gt;&lt;/body&gt;&lt;/html&gt;\n");
replacelsidimagemap = imagemap.toString();</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">seqmapcmds</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'image/jpeg'">image</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="'text/html'">replacelsidimagemap</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="parse_genscan_and_split_CDS">
    <s:beanshell>
      <s:scriptvalue>// CDS's start with &gt;
java.util.ArrayList genes = new java.util.ArrayList();
int index=0;
System.out.println("CDS is "+CDS);
while(index &lt; CDS.length() &amp;&amp; CDS.charAt(index)=='&gt;') {
  int next = CDS.indexOf("&gt;", index+1);
  if (next&lt;0) {
    genes.add(CDS.substring(index));
    break;
  }
  else
    genes.add(CDS.substring(index, next));
  index = next;
}
StringBuffer metadata = new StringBuffer();
seqmapcmds = new StringBuffer();
StringBuffer []geneMetadata = new StringBuffer[genes.size()];
for (int i=0; i&lt;genes.size(); i++)
  geneMetadata[i] = new StringBuffer();
// skip to start of GS table
// gn.ex type s beg end ...
java.util.regex.Pattern gs_line = java.util.regex.Pattern.compile
("\\n\\s*(\\d+)\\.(\\d+)\\s+(\\w+)\\s+([\\-+])\\s+(\\d+)\\s+(\\d+)");
replacelsidmetadata = "";
System.out.println("GS_Report is "+GS_Report);
java.util.regex.Matcher match = gs_line.matcher(GS_Report);
while (match.find()) {
  System.out.println("GN "+match.group(1)+
	" EX "+match.group(2)+
	" type "+match.group(3)+
	" s "+match.group(4)+
	" begin "+match.group(5)+
	" end "+match.group(6));
  int gn = Integer.parseInt(match.group(1));
  int ex = Integer.parseInt(match.group(2));
  String type = match.group(3);
  int begin = Integer.parseInt(match.group(5));
  int end = Integer.parseInt(match.group(6));
  // not Prom or PlyA
  if (!type.equals("Prom") &amp;&amp; !type.equals("PlyA")) {
    if (geneMetadata[gn-1].length()&gt;0)
      geneMetadata[gn-1].append(",");
    geneMetadata[gn-1].append(begin+"-"+end);
  }
  seqmapcmds.append("GenScan"+(gn-1)+" "+match.group(4)+gn+" rect "+begin+" "+
    end+" 10 0x00ff00 replacelsid:genes["+(gn-1)+"]\n");
}
for (int i=0; i&lt;genes.size(); i++) {
  metadata.append("replacelsid:genes["+i+"] ");
  metadata.append(geneMetadata[i]);
  metadata.append("\n");
}
replacelsidmetadata = metadata.toString();
replacelsidseqmapcmds = seqmapcmds.toString();</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">GS_Report</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">CDS</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">replacelsidmetadata</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="l('text/plain')">genes</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="'text/plain'">replacelsidseqmapcmds</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:link source="GS_Report" sink="parse_genscan_and_split_CDS:GS_Report" />
  <s:link source="CDS" sink="parse_genscan_and_split_CDS:CDS" />
  <s:link source="parse_genscan_and_split_CDS:replacelsidmetadata" sink="metadata" />
  <s:link source="parse_genscan_and_split_CDS:genes" sink="genes" />
  <s:link source="parse_genscan_and_split_CDS:replacelsidseqmapcmds" sink="seqmapcmds" />
  <s:link source="parse_genscan_and_split_CDS:replacelsidseqmapcmds" sink="make_seq_image_map:seqmapcmds" />
  <s:link source="make_seq_image_map:image" sink="image" />
  <s:link source="make_seq_image_map:replacelsidimagemap" sink="imagemap" />
  <s:source name="GS_Report">
    <s:metadata>
      <s:description>GenScan report, e.g. GS_Report output of Hannah's workflow B.</s:description>
    </s:metadata>
  </s:source>
  <s:source name="CDS">
    <s:metadata>
      <s:description>Coding sequences in FASTA format corresponding to the genes predicted in the genscan report input, e.g. CDS output of Hannah's workflow B.</s:description>
    </s:metadata>
  </s:source>
  <s:sink name="metadata">
    <s:metadata>
      <s:description>Information about the input sequence spans in each of the outputs.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="genes">
    <s:metadata>
      <s:description>The individual coding sequences from CDS input.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="seqmapcmds">
    <s:metadata>
      <s:description>The sequence view commands used to make the image.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="image">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>image/jpeg</s:mimeType>
      </s:mimeTypes>
      <s:description>Simple gene (intron) map.</s:description>
    </s:metadata>
  </s:sink>
  <s:sink name="imagemap">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/html</s:mimeType>
      </s:mimeTypes>
      <s:description>Web page with image and imagemap to click through to individual gene sequences.</s:description>
    </s:metadata>
  </s:sink>
</s:scufl>


