/*******************************************************************************
 * Copyright (C) 2008 The University of Manchester   
 * 
 *  Modifications to the initial code base are copyright of their
 *  respective authors, or their employers as appropriate.
 * 
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2.1 of
 *  the License, or (at your option) any later version.
 *    
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *    
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 ******************************************************************************/
package net.sf.taverna.t2.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.GrantedAuthority;
import org.springframework.security.GrantedAuthorityImpl;
import org.springframework.security.userdetails.GroupManager;
import org.springframework.security.userdetails.User;
import org.springframework.security.userdetails.UserDetails;
import org.springframework.security.userdetails.UserDetailsManager;
import org.springframework.util.Assert;

/**
 *
 *
 * @author David Withers
 */
public class UserManagerImpl implements UserManager, InitializingBean {

	private JdbcTemplate template;
	
	private UserDetailsManager userDetailsManager;
	
	private GroupManager groupManager;
	
    public void afterPropertiesSet() throws Exception {
        Assert.notNull(template, "dataSource required");
   		Assert.notNull(userDetailsManager, "userDetailsManager required");
   		Assert.notNull(groupManager, "groupManager required");
      
        try {
            // create user tables
            template.execute("create table users(" + 
            		"username varchar_ignorecase(50) not null primary key," + 
            		"password varchar_ignorecase(50) not null," + 
            		"enabled boolean not null);");
            template.execute("create table authorities (" + 
            		"username varchar_ignorecase(50) not null," + 
            		"authority varchar_ignorecase(50) not null," + 
            		"constraint fk_authorities_users foreign key(username) references users(username));" + 
            		"create unique index ix_auth_username on authorities (username,authority);");
            // create group tables
            template.execute("create table groups (\n" + 
            		"id bigint generated by default as identity(start with 0) primary key, \n" + 
            		"group_name varchar_ignorecase(50) not null);");
            template.execute("create table group_authorities (\n" + 
            		"group_id bigint not null, \n" + 
            		"authority varchar(50) not null, \n" + 
            		"constraint fk_group_authorities_group foreign key(group_id) references groups(id));");
            template.execute("create table group_members (\n" + 
            		"id bigint generated by default as identity(start with 0) primary key, \n" + 
            		"username varchar(50) not null, \n" + 
            		"group_id bigint not null, \n" + 
            		"constraint fk_group_members_group foreign key(group_id) references groups(id));");
         } catch (DataAccessException dataAccessException) {       	
        }
        
   		if (!userDetailsManager.userExists("default")) {
	        GrantedAuthority grantedAuthority = new GrantedAuthorityImpl("ROLE_USER");
	        User user = new User("default", "frgsi;y", true,
 //	        		true, true, true,
	        		(GrantedAuthority[]) Collections.singletonList(grantedAuthority).toArray());
			userDetailsManager.createUser(user);
			groupManager.createGroup("all", (GrantedAuthority[]) new ArrayList<GrantedAuthority>().toArray());
			groupManager.addUserToGroup("david", "all");
		}
	}

    public List<UserDetails> getUsers() {
		String[] users = groupManager.findUsersInGroup("all");
		List<UserDetails> userDetails = new ArrayList<UserDetails>();
		for (String user : users) {
			userDetails.add(userDetailsManager.loadUserByUsername(user));
		}
		return userDetails;
	}
    
    public void setDataSource(DataSource dataSource) {
        this.template = new JdbcTemplate(dataSource);
    }

	public void setUserDetailsManager(UserDetailsManager userDetailsManager) {
		this.userDetailsManager = userDetailsManager;
	}

	public void setGroupManager(GroupManager groupManager) {
		this.groupManager = groupManager;
	}

}
