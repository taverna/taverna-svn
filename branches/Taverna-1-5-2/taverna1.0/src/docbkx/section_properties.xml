<?xml version="1.0" encoding="UTF-8"?>
<section id="useful_properties">
  <title>Useful properties.</title>

  <para>These are sytem properties that can be overridden in the startup
  script used to run Taverna or an external tool, such as
  exectuteworkflow.bat. The are overridden by appending
  -Dproperty=&lt;value&gt; to the list of arguments passed to the java
  command. The best way of overriding these is by adding to the existing set
  of ARGS already present in the current scripts.</para>

  <caution>
    <para>Changing these properties without having a clear idea what they mean
    can lead to unpredictable and sometimes irreversible behaviour. If you
    don't know what they mean, then you probably don't need to be changing
    them!</para>
  </caution>

  <table>
    <title>Useful Properties</title>

    <tgroup cols="3">
      <thead>
        <row>
          <entry>Property</entry>

          <entry>Value Type</entry>

          <entry>Description</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>taverna.home</entry>

          <entry>String, e.g. C:/taverna-home/</entry>

          <entry>The location that Taverna settings, logging and libraries are
          stored. By defaut when using Windows this is "Documents and
          Settings\Application Data\Taverna", using Linux "$HOME/.taverna",
          and using the Mac "$HOME/Library/Application Support/Taverna".
          General configuration files are stored in $taverna.home/conf ; log
          files are stored in $taverna.home/log; details about installed
          plugins and plugin sites are stored in $taverna.home/plugins</entry>
        </row>
        
        <row>
          <entry>taverna.startup</entry>

          <entry>String, e.g. C:/taverna-home/</entry>

          <entry>If not already defined, this defaults to the location of the bootstrap jar file used to
          startup Taverna. This property is used to allow default properties and plugins to be defined. By default properties in
          $taverna.startup/conf, and plugins defined in $taverna.startup/plugins, are used. Similar files in $taverna.home will override these default settings
          so that users can customise their settings in a multi-user environment.</entry>
        </row>

        <row>
          <entry>taverna.repository</entry>

          <entry>String, e.g C:/taverna-cache/</entry>

          <entry>The location that local copies of the artifacts that Taverna
          is dependant upon are copied to. Note that only libraries that exist
          in a remote repository are copied here, if they have been found in a
          'file:/' based repository a local copy is not made. By default this
          is $taverna.home/repository.</entry>
        </row>

        <row>
          <entry>raven.eclipse</entry>

          <entry>Any value</entry>

          <entry>An experimental setting that forces Taverna to use the System
          classloader rather than find classes via Raven. Its only useful when
          running Taverna within Eclipse - and even then the behaviour is not
          necessarily the same as running Taverna correctly. Its main use is
          for debugging.</entry>
        </row>

        <row>
          <entry>raven.profile</entry>

          <entry>URL, or a space seperated list of URLs</entry>

          <entry>If defined this forces this particular profile to be used immediately. Using a single profile
          means that no update options are available. Setting this property overrides raven.profilelist. If a list is provided, the first successful URL is used.</entry>
        </row>
        
        <row>
          <entry>raven.profilelist</entry>

          <entry>URL</entry>

          <entry>This defines the location of the XML that defines a list of profiles available. On first run, a local copy
          of the lowest version of the profile available in the list is used, and continues to be used until an update becomes available and is selected.
          An update becomes available when a higher version than the current version becomes defined in the list. Updating the version is not automatic, but requires a request from the user.
          This property is overridden if a raven.profile property is explicity defined. If a list is provided, the first successful URL is used.</entry>
        </row>

        <row>
          <entry>raven.repository.n (where n is a number between 0 and
          10).</entry>

          <entry>URL</entry>

          <entry>These are repositories that are used to find artifacts, in
          numerical order. This is useful for intergraters or developers to
          them to enforce a particular location for an artifact rather than
          relying on myGrid or Maven repositories. The value 0 to 10,
          inclusively, are available for custom repositories. Its unsafe to
          use values higher than this. The common use of this is during
          development, to set the raven.repository.0 to the local maven
          repository - this ensures that locally built versions of the
          artifacts are used rather than those held remotely.</entry>
        </row>

        <row>
          <entry>raven.target.artifactId</entry>

          <entry>String</entry>

          <entry>The artifactId of the artifact containing the object to be
          invoked at startup by the bootstrap.</entry>
        </row>

        <row>
          <entry>raven.target.class</entry>

          <entry>String</entry>

          <entry>The class of the object to be invoked at startup by the
          bootstrap.</entry>
        </row>

        <row>
          <entry>raven.target.groupId</entry>

          <entry>String</entry>

          <entry>The groupId of the artifact containing the object to be
          invoked at startup by the bootstrap.</entry>
        </row>

        <row>
          <entry>raven.target.method</entry>

          <entry>String</entry>

          <entry>The method to be invokded by the bootstrap at startup. This
          method may be static or non-static, but must either take no
          parameters or String array (String[]).</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>