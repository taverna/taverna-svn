<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="rshell_processor">
  <title>R-scripts with the RShell processor</title>

  <section id="rshell_install">
    <title>Introduction and installation</title>

    <para><ulink url="http://www.r-project.org/">R</ulink> is a popular
    scripting language oriented towards statistical computing, and with the
    addition of the <ulink
    url="http://www.bioconductor.org/">BioConductor</ulink> module, suitable
    for biological data analysis. Taverna comes with support executing
    R-scripts as part of a workflow. The functionality is very similar to how
    to use the <link linkend="???">Beanshell processor</link>, so this section
    will only cover what is special about the <firstterm>RShell
    processor</firstterm>. </para>

    <para>First of all, R and required R packages, such as the BioConductor,
    must be installed locally on the machines that will be executing the
    workflow. This is outside the scope of this manual, we refer to the <ulink
    url="http://cran.r-project.org/doc/FAQ/R-FAQ.html#How-can-R-be-installed_003f">FAQ
    for R</ulink> on how to install. Once you have R installed, you can start
    it either on the command line with the command R or using the appropriate
    application shortcut, where you should get a shell that looks somewhat
    like this:</para>

    <screen>: stain@mira ~;<emphasis role="bold">R</emphasis>

R version 2.4.1 (2006-12-18)
Copyright (C) 2006 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; 
&gt; <emphasis role="bold">sin(pi)</emphasis>
[1] 1.224606e-16
</screen>

    <para>If this is working, it should be quite easy to install required R
    modules such as the <ulink
    url="http://www.bioconductor.org/docs/install-howto.html">BioConductor</ulink>:</para>

    <screen>&gt; <emphasis role="bold">source("http://bioconductor.org/biocLite.R")</emphasis>
&gt; 
&gt;<emphasis role="bold"> biocLite()</emphasis>
Running biocinstall version 1.9.9 with R version 2.4.1 
Your version of R requires version 1.9 of Bioconductor.
Will install the following packages:
 [1] "affy"        "affydata"    "affyPLM"     "annaffy"     "annotate"   
 [6] "Biobase"     "Biostrings"  "DynDoc"      "gcrma"       "genefilter" 
[11] "geneplotter" "hgu95av2"    "limma"       "marray"      "matchprobes"
[16] "multtest"    "ROC"         "vsn"         "xtable"     
Please wait...
(..)
The downloaded packages are in
        /tmp/RtmpNXlF02/downloaded_packages
&gt; </screen>

    <para>Taverna communicates with the local R installation using the <ulink
    url="http://rosuda.org/Rserve/">RServe</ulink> protocol. This is a network
    based service that allows you to submit a script to be run within an R
    environment. In our setup that means that the R script will be executed by
    the RServe server process, and not the Taverna workbench. The service can
    be configured to allow different network users identified with passwords,
    but since they would be able to basically execute any code on that
    machine, for security reason we recommend that you stick with the default,
    which is to only listen on <literal>localhost</literal>, without requring
    a password. If your machine has multiple users we recommend you to enable
    usernames and passwords to make sure only you can access the RServe
    service.</para>

    <para>Follow the <ulink
    url="http://rosuda.org/Rserve/doc.shtml">installation instructions for
    RServe</ulink> for information on how to install and start the RServe
    service. Here's the short version for version 0.4.3:</para>

    <screen>: stain@mira ~/Desktop;<emphasis role="bold">curl -fO http://rosuda.org/Rserve/dist/Rserve_0.4-3.tar.gz</emphasis>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 86336  100 86336    0     0   239k      0 --:--:-- --:--:-- --:--:--  465k

: stain@mira ~/Desktop;<emphasis role="bold">R CMD INSTALL Rserve_0.4-3.tar.gz</emphasis>
* Installing *source* package 'Rserve' ...
checking for gcc... gcc-4.0 -arch i386
(..)
** building package indices ...
* DONE (Rserve)

: stain@mira ~/Desktop;<emphasis role="bold">cd /tmp</emphasis>
: stain@mira /tmp;<emphasis role="bold">sudo -u nobody R CMD Rserve</emphasis>
R version 2.4.1 (2006-12-18)
(..)
Rserv started in daemon mode.

: stain@mira /tmp;</screen>

    <para>Notice that you will have to execute <literal>R CMD Rserve</literal>
    to start the service again if you reboot the computer. For security
    reasons, we recommend you to use a separate, non-privileged user account
    on your machine for running RServe, so that if there is a security
    problem, the R script won't be able to access your files and can be easily
    isolated.</para>

    <remark>The RServe documentation describes several RServe clients, note
    that the RShell processor is based on the <literal>JRclient</literal>
    library.</remark>
  </section>

  <section id="rshell_using">
    <title>Using the RServe processor</title>

    <para>To add an RServe processor to a workflow, locate
    <guilabel>RShell</guilabel> under <guilabel>Local Services</guilabel> in
    the service scavenger panel. Either drag the processor to the
    <guilabel>Advanced model explorer</guilabel>, or right click and select
    <guimenuitem>Add to model</guimenuitem>. </para>

    <screenshot>
      <screeninfo>Adding an RShell processor</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/rshell_add.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Right click on the processor and select <guimenuitem>Configure
    RShell</guimenuitem> to bring up the RShell configure dialogue. </para>

    <screenshot>
      <screeninfo>Right-click to configure RShell</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/rshell_configure.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>The first tab of the dialogue lets you type in the script, similar
    to the editor of beanshell processors. In addition you can open an
    existing script from a file. For this example we'll do a rather trivial
    sinus function.</para>

    <screenshot>
      <screeninfo>Writing the RShell script</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/rshell_script.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Just like the <link linkend="???">beanshell inputs and
    outputs</link> are accessed through variable names, the RShell processor
    makes input ports available as variables named after the port, and output
    ports read their named variable after executing the script. That is, the
    last assigned value to the variable will be the one returned from the
    processor. So for this script to make sense we have to make an input port
    <literal>x</literal> and an output port <literal>y</literal>. Flip to the
    tab <guibutton>Input ports</guibutton> and click <guibutton>Create input
    port</guibutton>, specify the port name <literal>x</literal>. Next, we'll
    have to specify the type this variable will have within the R-script.
    Although Taverna normally operates by passing around text strings, R is a
    typed language and you need to specify that in this case
    <literal>x</literal> is to be parsed a <literal>double</literal>, for
    example <literal>0.45</literal>. </para>

    <screenshot>
      <screeninfo>Adding and configuring input ports</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/rshell_input.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Create the output port <literal>y</literal> in the same way in the
    <guibutton>Output ports</guibutton> tab, and remember to also set it's
    type to <literal>double</literal>. You should now be able to build the
    workflow, connect the ports, and run it with an example input
    <literal>0.5</literal> which should give you an output
    <literal>0.479425538604203</literal>.</para>
  </section>

  <section id="rshell_connection">
    <title>Connection and advanced port types</title>

    <para>If you configured your RServe to use a different port, or to require
    username and password, you can flip to the <guibutton>Connection
    settings</guibutton> tab to configure these connection parameters. In
    addition, you can tick off <guilabel>Keep session alive</guilabel>, which
    will re-use the same connection each time you execute the script. This
    means that if the script assigns objects to other variable names, say
    <literal>z=x+1337</literal>, <literal>z</literal> will be available in the
    R namespace for the next execution, like in an iteration. However, we
    generally recommend transferring such state through the workflow instead
    of keeping it in the R environment.<screenshot>
        <screeninfo>Connection settings for RShell</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/rshell_connection.png" />
          </imageobject>
        </mediaobject>
      </screenshot></para>

    <para>The input and output port type <literal>R-expression</literal> can
    be used to link several R processors together without regarding the
    internal data type. This is useful when passing complex R objects from one
    R script to another, however, as the whole object will be serialised this
    is not recommended for very large structures, for those situations it
    might be better to use the <guilabel>Keep session alive</guilabel> option
    and share a global variable.</para>

    <para>If you select the array datatypes such as
    <literal>double[]</literal>, <literal>integer[]</literal> and
    <literal>string[]</literal>, the processor input port will consume a full
    list of values of the specified type, which is useful if the R-script is
    to do array indexing or statistical analysis on a vector of items.
    Similary an array output port can be used if you want to return more than
    one value. The port types are:</para>

    <variablelist>
      <varlistentry>
        <term>boolean</term>

        <listitem>
          <para>true or false (1 and 0 also allowed)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>double</term>

        <listitem>
          <para>a floating point number</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>integer</term>

        <listitem>
          <para>a natural number</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>R-expression</term>

        <listitem>
          <para>R-expression to pass between RServ processors</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>string</term>

        <listitem>
          <para>string value</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>double[]</term>

        <listitem>
          <para>a list of doubles</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>integer[]</term>

        <listitem>
          <para>a list of integers</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>string[]</term>

        <listitem>
          <para>a list of strings</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>PNG-image</term>

        <listitem>
          <para>an image created by the plotting device (for outputs), see
          section <link linkend="beanshell_graph">Graph output</link>
          below</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Text-file</term>

        <listitem>
          <para><emphasis>(unknown)</emphasis></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="rshell_graph">
    <title>Graph output</title>

    <para>In the interactive R environment you might be used to creating fancy
    graphs. You are able to create graphs in R through Taverna as well, but
    instead of the graphs popping up directly on your screen you will have to
    return them as image data to the workflow. The graphs can then be viewed
    as part of the workflow output. Make a new output port called
    <literal>g</literal>, and set its type to
    <guimenuitem>PNG-image</guimenuitem>, and in your R script, use
    <literal>png(g)</literal> to enable PNG output to a variable called
    <literal>g</literal>, and <literal>dev.off();</literal> when you are
    finished plotting. Example:</para>

    <programlisting>png(g);
plot(rnorm(1:100));
dev.off();</programlisting>
  </section>
</section>