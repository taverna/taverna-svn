<?xml version="1.0" encoding="UTF-8"?>
<chapter id="admin_guide_chapter">
  <title>Administrator's Guide</title>

  <section id="admin_overview">
    <title>Overview</title>

    <para>This chapter describes how Taverna can be configured in a multi-user
    setting. It details the bootstrap process used by Taverna when first
    invoked by a user and how to override aspects of this process to insert
    your own configuration, software repositories, profiles, plugin sets etc.
    If you are a system administrator installing Taverna in a central location
    for use by multiple individual users you should read this, if you are just
    using Taverna on a single machine with the default supplied profiles,
    update manager settings etc this chapter is not required.</para>
  </section>

  <section id="admin_taverna_loads">
    <title>What happens when Taverna loads?</title>

    <para>Taverna from version 1.5 onwards uses a plugin and code manager
    called Raven. This gives us the ability to include multiple versions of
    third party dependencies (i.e. Axis 1.3 and Axis 1.4) without version
    conflicts as well as manage extensions supplied by third parties and
    provide some level of automatic updates. This comes at a cost however, as
    the installation and configuration of Taverna is considerably more
    complex.</para>

    <para>When a fresh Taverna 1.5.2 installation is run for the first time
    after being downloaded from one of our download mirrors the following
    things happen, performed by the Bootstrap class in the taverna-bootstrap
    jar file :</para>

    <orderedlist>
      <listitem>
        <para>Determine the startup location, unless the system property
        <property>taverna.startup</property> is already defined. This is the
        location of the taverna-bootstrap jar file. Once determined it is
        assigned to the <property>taverna.startup</property>.</para>
      </listitem>

      <listitem>
        <para>Determine the application home directory. If the system property
        <property>taverna.home</property> is set then use this, otherwise use
        the default value for <property>user.home</property> with an operating
        system specific suffix added. In effect this means that the default on
        Windows platforms will be the <filename>Documents and
        Settings/<replaceable>USER</replaceable>/Application
        Data/Taverna-1.5.2</filename>, on OSX
        <filename><replaceable>USER</replaceable>/Library/Application
        Support/.taverna-1.5.2</filename> and on linux or other UNIX-like
        platforms
        <filename>~<replaceable>USER</replaceable>/.taverna-1.5.2</filename>.</para>

        <para>If the application home directory defined above does not exist
        then create it along with a <filename>conf</filename>
        subdirectory.</para>
      </listitem>

      <listitem>
        <para>Intialise the <filename>raven.properties</filename>. If this
        file exist in the
        <property>taverna.home</property><filename>/conf</filename> then this
        is used, otherwise it is used from
        <property>taverna.startup</property><filename>/conf</filename>. These
        properties are used for various Raven specific settings.</para>
      </listitem>

      <listitem>
        <para>Configure the proxy settings. These are defined in
        <filename>mygrid.properties</filename> as
        <property>http.proxyHost</property>,
        <property>http.proxyPort</property>,
        <property>http.proxyUser</property>, and
        <property>http.proxyPassword</property> and are transferred to being
        System properties. If the user and password are defined then the
        authentication mechism is set up.</para>

        <para>As with the raven.properties these are read from
        <property>taverna.home</property><filename>/conf</filename> if they
        exist, other
        <property>taverna.startup</property><filename>/conf.</filename></para>
      </listitem>

      <listitem>
        <para>Raven uses the Properties object loaded in the previous stage to
        search for remote Maven 2 compliant code repositories from which it
        can download code artifacts. It searches for properties with names of
        the form
        <property>raven.repository.<replaceable>NUMBER</replaceable></property>
        and interprets the value as a URI to the root of the repository. These
        are defined in <filename>raven.properties</filename>, and at the time
        of writing the repositories in the default properties file are
        :</para>

        <para><literallayout>raven.repository.11 = http://www.mygrid.org.uk/maven/repository/
raven.repository.12 = http://www.mygrid.org.uk/maven/proxy/repository/
raven.repository.13 = http://mobycentral.icapture.ubc.ca/maven/
raven.repository.14 = http://mirrors.sunsite.dk/maven2/
raven.repository.15 = http://www.ibiblio.org/maven2/
raven.repository.16 = http://bioinf.ncl.ac.uk/mirror/maven/repository/
raven.repository.17 = http://mirror.omii.ac.uk/maven/repository/
raven.repository.18 = http://www.mygrid.org.uk/maven/snapshot-repository/</literallayout></para>

        <para>The first sites contain the primary Taverna code, the
        ibiblio.org site contains almost everything else (and is the default
        Maven 2 mirror used by Maven). There's nothing particularly magic
        about these URLs, they simply point to the root of a directory
        structure containing a mix of jar files and metadata files describing
        dependencies. If you develop with Maven 2 you already know what these
        look like.</para>

        <para>If a repository is identified by a <literal>file://</literal>
        URI the repository is treated as local and Raven is able to access
        artifacts in place rather than copy them to
        <property>taverna.home</property><filename>/repository</filename></para>

        <para>If it exists the location
        <property>taverna.startup</property><filename>/repository</filename>
        is added as a repository. This is useful for bundling Taverna together
        with a repository as a complete package.</para>

        <para>In addition to this, a check is made if an old Taverna 1.5.1, or
        Taverna 1.5.0
        <property>taverna.home</property><filename>/repository</filename>
        exists and if so adds it, as a local repository, to the start of the
        list of repositories. The reason for this is that many 3rd party
        artifacts are common between the two versions, and sharing an existing
        repository avoids duplication.</para>
      </listitem>

      <listitem>
        <para>Raven determines where to cache jar files and metadata through a
        property <property>taverna.repository</property>. If this is undefined
        it uses
        <property>taverna.home</property><filename>/repository</filename>.
        Note that in the default configuration this results in jar files being
        downloaded to the user profile - this can easily swamp a large shared
        installation as there will be at least 30-40mb of files in a typical
        Taverna build.</para>

        <para>If the specified directory doesn't exist Taverna will create it.
        If it exists and is a file rather than a directory an error will be
        reported on the console declaring this.</para>
      </listitem>

      <listitem>
        <para>The bootstrap uses properties from the file located by
        <filename>raven.properties</filename> to determine an artifact and
        classname specification for the version of Raven. In the default
        implementation this is as follows :</para>

        <para><literallayout># Repository artifact containing Raven loader (should not have any dependencies) 
raven.loader.groupid = uk.org.mygrid.taverna.raven 
raven.loader.artifactid = raven 
raven.loader.version = 1.5.2.0 
# This static method will be called with lots of parameters 
raven.loader.class = net.sf.taverna.raven.Loader 
raven.loader.method = doRavenMagic</literallayout></para>

        <para>These properties do not need to be changed unless you're
        upgrading Raven itself, something you have no reason to be doing so
        best to leave them alone! Raven uses these internally to construct a
        Method object through reflection which can be used to build the real
        application object, in this case this is defined by the following
        properties (also in the raven.properties file) :</para>

        <para><literallayout># Which target artifact to load and run (can have dependencies) 
raven.target.groupid = uk.org.mygrid.taverna 
raven.target.artifactid = taverna-workbench 
raven.target.version = 1.5.2.0 
# This static method will be called with no parameters, or 
# if it accepts String[], commandline args will be passed 
raven.target.class = org.embl.ebi.escience.scuflui.workbench.Workbench 
raven.target.method = getInstance</literallayout></para>

        <para>In this default case the bootstrap is configured to build a
        Class object for
        <literal>org.embl.ebi.escience.scuflui.workbench.Workbench</literal>
        and use the <literal>getInstance</literal> method on it to create a
        new workbench object. I'm not sure why we do this here rather than
        calling a <literal>main(String[...])</literal> method but hey.</para>
      </listitem>

      <listitem>
        <para>The profile to use is determined. The profile is in some ways
        the 'version' of Taverna in that it defines the set of code artifacts
        to download, some of these are core components (such as the workflow
        model) and some are optional (such as the processor types e.g. BioMoby
        support).</para>

        <para>If the property <property>raven.profile</property> is set, it
        should define a URI to an absolute profile to use. This profile will
        be used immediately, and there will be no ability to update or switch
        between versions. In the presence of
        <property>taverna.startup</property><filename>/conf/profile.xml</filename>
        then <property>raven.profile</property> is set to this profile
        automatically.</para>

        <para>If no <property>raven.profile</property> is defined, then the
        property <property>raven.profilelist</property> is used. This defines
        a URI pointing to an xml document that describes a list of profiles,
        which can change over time (prompting an update). Using the list of
        profiles also provides the ability to switch between versions. On
        first run, the lowest version profile is used, and stored in the file
        <filename><property>taverna.home</property>/conf/current-profile-1.5.2.xml</filename>.
        From then on, this is the profile used when Taverna starts up. This
        current profile is changed either by selecting to do an update, or by
        switching to a specific versions.</para>

        <para>These properties are usually defined in
        <filename>raven.properties</filename>.</para>
      </listitem>

      <listitem>
        <para>Any artifacts in the profile with the attribute
        <varname>system</varname> defined and set to <literal>true</literal>
        are forcibly added to the bootstrap classpath, this only applies to
        artifacts which cannot be normally loaded by Raven such as XML
        parsers. In the default profile this means the following artifacts
        :</para>

        <para><literallayout>&lt;!-- system sax parser --&gt; 
&lt;artifact groupId="xerces" artifactId="xercesImpl" version="2.6.2" system="true"/&gt; 

&lt;!-- Jaxen XML support --&gt; 
&lt;artifact groupId="jaxen" artifactId="jaxen" version="1.0-FCS" system="true"/&gt; 
&lt;artifact groupId="saxpath" artifactId="saxpath" version="1.0-FCS" system="true"/&gt; 
&lt;artifact groupId="dom4j" artifactId="dom4j" version="1.6" system="true"/&gt; 

&lt;!-- system log4j for Raven's Log4jLog proxy --&gt; 
&lt;artifact groupId="log4j" artifactId="log4j" version="1.2.12" system="true"/&gt;</literallayout></para>
      </listitem>

      <listitem>
        <para>Once this environment is configured correctly the reflection
        based loader created in (7) is used to instantiate the Workbench
        class, passing it any arguments from the command line. The
        splashscreen is shown based on properties within the raven.properties
        file as follows (the timeout is in seconds and is the duration for
        which the splash screen will remain, if clicked it goes away
        immediately) :</para>

        <para><literallayout># Show splashscreen? Set to 'false' to disable 
raven.splashscreen = true 
raven.splashscreen.timeout = 10</literallayout></para>
      </listitem>

      <listitem>
        <para>Early in the workbench startup process, plugins are initialised.
        Default plugins are defined in
        <property>taverna.startup</property><filename>/plugins/plugins.xml</filename>.
        User installed plugins are defined in
        <property>taverna.home</property><filename>/plugins/plugins.xml</filename>.
        If the same plugin exists in both location, the settings in
        <property>taverna.home</property><filename>/plugins/plugins.xml</filename>
        take precedence. A user can disable a default plugin, but cannot
        uninstall it.</para>
      </listitem>
    </orderedlist>
  </section>

  <section id="raven_config">
    <title>Runtime configuration of Raven within the Workbench</title>

    <para>The <filename>raven.properties</filename> file also contains
    configuration for the workbench plugin manager. Specifically it declares a
    location to go to for a list of available profiles (used by the
    <guimenu>select workbench version</guimenu> menu) as follows :</para>

    <para><literallayout>#raven.profilelist points to an XML document describing all the available taverna profiles
#a space seperated list of URLs can be provided, and the first one that can be connected to will be used - this facilitates the use of mirrors
raven.profilelist=http://www.mygrid.org.uk/taverna/updates/1.5.2/taverna-1.5.2-profiles.xml /
                  http://bioinf.ncl.ac.uk/mirror/taverna/updates/1.5.2/taverna-1.5.2-profiles.xml /
                  http://mirror.omii.ac.uk/taverna/updates/1.5.2/taverna-1.5.2-profiles.xml</literallayout></para>

    <para>...and a list of plugin sites used by the plugin manager (the value
    for the <property>raven.pluginsite.1</property> is all one line, split
    here to make it possible to read) :</para>

    <para><literallayout># The default plugin update sites, with mirror sites seperated by commas 
# the .name is optional and provides a name for the site 
raven.pluginsite.1=http://www.mygrid.org.uk/taverna/updates/1.5.2/plugins/, 
                   http://bioinf.ncl.ac.uk/mirror/taverna/updates/1.5.2/plugins/, 
                   http://mirror.omii.ac.uk/taverna/updates/1.5.2/plugins/ 
raven.pluginsite.1.name=Taverna Plugin Update Site</literallayout></para>

    <para>Also, as mentioned in <link linkend="admin_taverna_loads">What
    happends when Taverna loads</link> , default plugins can be defined in
    <property>taverna.startup</property><filename>/plugins/plugins.xml</filename>.</para>

    <para>If you wish to use your own specific Raven profile rather than those
    published by myGrid, you can do this by defining the
    <property>raven.profile</property> property as a URI that points to your
    profile XML document. The presence of this property forces this profile to
    be used immediately.</para>
  </section>

  <section id="admin_mygrid_properties">
    <title>Customising mygrid.properties (and raven.properties,
    log4j.properties).</title>

    <para>By default the <filename>mygrid.properties</filename> shipped within
    the Taverna download are used (i.e.
    <property>taverna.startup</property><filename>/conf/mygrid.properties</filename>).
    For most users this is sufficient. However, if Taverna is deployed in a
    multi-user environment individual users may want to customise their own
    <filename>mygrid.properties</filename> without affecting the settings of
    other users.</para>

    <para>The presence of a <filename>mygrid.properties</filename> in
    <property>taverna.home</property><filename>/conf</filename> overrides the
    <property>taverna.startup</property><filename>/conf/mygrid.properties</filename>.
    So users can copy over the default mygrid.properties to this location and
    customise them to their own individual needs.</para>

    <para>This is also true for <filename>raven.properties</filename> and the
    <filename>log4.properties</filename>.</para>
  </section>

  <section id="admin_summary">
    <title>Summary</title>

    <para>So to summarise, the key points to bear in mind if configuring a
    custom installation are:</para>

    <itemizedlist>
      <listitem>
        <para>The properties files, <filename>mygrid.properties</filename>,
        <filename>raven.properties</filename> and
        <filename>log4j.properties</filename> are read from
        <property>taverna.startup</property><filename>/conf/</filename> unless
        they exist in
        <property>taverna.home</property><filename>/conf/</filename> in which
        case these are used.</para>
      </listitem>

      <listitem>
        <para>Artifact repository locations are defined in
        <filename>raven.properties</filename> as
        raven.repository.<replaceable>NUMBER</replaceable> and are checked in
        numeric order. In addition
        <property>taverna.startup</property><filename>/repository</filename>
        is added to the start of the list if it exists. An old 1.5.1 or 1.5.0
        repository is also used if it exists to avoid duplication of common
        artifacts.</para>
      </listitem>

      <listitem>
        <para>When Taverna is first run, or after an update, artifacts the
        require downloading are storing in
        <property>taverna.home</property><filename>/repository</filename>.
        This location can be modified by setting the property
        <property>taverna.repository</property>. Artifacts found in a
        <uri>file:/</uri> based repository are not copied but are used from
        that location.</para>
      </listitem>

      <listitem>
        <para>A specific profile can be forced by setting the property
        <property>raven.profile</property>. An example profile can be found at
        <ulink
        url="???">http://www.mygrid.org.uk/taverna/updates/1.5.2/taverna-1.5.2.0-profile.xml</ulink>.
        This profile will be used without prompting for an update.</para>
      </listitem>

      <listitem>
        <para>A list of profiles can be customised and used by modifying the
        <property>raven.profilelist</property> property. This points to an XMl
        document that defines a list of profiles. Initially the lowest version
        profile is used, and if a higher version exists then an update is
        offered. An example of such an XML document can be found at <ulink
        url="http://www.mygrid.org.uk/taverna/updates/1.5.2/taverna-1.5.2-profiles.xml">http://www.mygrid.org.uk/taverna/updates/1.5.2/taverna-1.5.2-profiles.xml</ulink>.</para>
      </listitem>

      <listitem>
        <para>Default plugins can be declared by the presence of
        <property>taverna.startup</property><filename>/plugins/plugins.xml</filename>.
        To find out more about this XMl document read the section about <link
        linkend="installing_plugins">Installing Plugins</link>.</para>
      </listitem>
    </itemizedlist>

    <para>More information about these and other properties can be found by
    reading about <link linkend="useful_properties">Useful
    properties</link>.</para>
  </section>
</chapter>