package net.sf.taverna.t2.platform.raven;

import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.taverna.t2.platform.pom.ArtifactDescription;
import net.sf.taverna.t2.platform.pom.ArtifactIdentifier;
import net.sf.taverna.t2.platform.pom.PomParser;

/**
 * Defines a method for the construction of a class loader based on a Maven 2
 * artifact. This class loader will inherit from a parent and delegate to a set
 * of child class loaders based on the Maven 2 meta-data defined for the
 * artifact.
 * 
 * @author Tom Oinn
 */
public interface Raven {

	/**
	 * Given an artifact identifier, retrieve or construct a class loader that
	 * can instantiate classes defined by that artifact's corresponding jar
	 * file. Note - the repository list is only used if the class loader is
	 * constructed, implementations may (and should) cache this information so
	 * subsequent calls with different repository location argument will in
	 * effect be ignored.
	 * <p>
	 * Do not make any assumptions about the type of class loader returned, if
	 * the artifact specified is a system artifact you may simply get the system
	 * class loader back.
	 * <p>
	 * If the appropriate artifacts have not been downloaded this method will
	 * block until they are available.
	 * 
	 * @param id
	 *            an artifact defining a set of classes which the caller needs a
	 *            classloader for
	 * @param repositories
	 *            a list of repositories from which jar and pom files can be
	 *            either fetched and cached (for remote URLs) or directly
	 *            referenced (for local file URLs at the discretion of the
	 *            implementation). If null the implementation may interpret this
	 *            as a request to use a default or externally specified list of
	 *            repositories or it may fail and throw a RavenException. This
	 *            behaviour is optional but helpful, the raven instance returned
	 *            through the spring extensions in platform-spring will respond
	 *            sensibly to a null value here.
	 * @return a class loader which can be used to access classes from the
	 *         specified maven artifact
	 * @throws RavenException
	 *             if any problems occur when instantiating and returning the
	 *             new class loader(s)
	 */
	ClassLoader getLoader(ArtifactIdentifier id, List<URL> repositories)
			throws RavenException;

	/**
	 * Get the system artifact set for this Raven instance. A system artifact is
	 * never downloaded, instead it is assumed that the client has provided it
	 * in some way on the parent class loader or some indirect parent thereof.
	 * 
	 * @return the current set of system artifacts, this should return an
	 *         unmodifiable copy of the system artifact set, do not attempt to
	 *         modify the system artifact set through Set methods on the
	 *         returned value.
	 */
	Set<ArtifactIdentifier> getSystemArtifactSet();

	/**
	 * Gets the parent class loader to be used for class loaders generated by
	 * this Raven instance. The parent loader is searched before any artifact
	 * jar class loaders, and is expected to provide artifacts that are
	 * specified in the system artifact list.
	 */
	ClassLoader getParentClassLoader();

	/**
	 * While all the above calls use a specified list of repositories it can be
	 * convenient in some cases to have access to a default set, this returns
	 * such a set if defined. This is used particularly in the spring raven
	 * extensions.
	 */
	List<URL> getDefaultRepositoryList();

	/**
	 * If the supplied object was loaded through an artifact class loader then
	 * return the artifact identifier for the corresponding artifact. If the
	 * object was not loaded by raven then this method returns null.
	 * 
	 * @return the ArtifactIdenfier if the object was loaded through a raven
	 *         based class loader, or null otherwise
	 */
	ArtifactIdentifier definingArtifact(Object o);

	/**
	 * Resolve the transitive dependency set for this set of artifact, including
	 * any converged system dependencies and taking into account any exclusions.
	 * System dependencies will appear in this set. This dependency set
	 * <em>will</em> include optional dependencies, so it is not the same as the
	 * dependency set used when actually generating the classloader for an
	 * artifact. This method is primarily used when creating plug-in
	 * descriptions as it shows the necessary transitive set of dependencies
	 * when determining the artifact set for a plug-in. It is present in this
	 * interface because it relies on much of the same parsing and graph logic
	 * as the rest of the Raven interface although in some senses it's a
	 * distinct operation in itself.
	 * 
	 * @param artifacts
	 *            a set of artifacts to start from when building the dependency
	 *            graph
	 * @param ignoredArtifacts
	 *            a set of artifacts which act as 'stop' points in the graph,
	 *            this is mostly used when showing explanatory dependency graphs
	 *            and can be used to exclude artifacts which have so many
	 *            dependencies on them that they mess up the layout, typically
	 *            this includes things like logging libraries (which almost
	 *            everything depends on). To get a 'true' graph containing
	 *            dependencies this should be empty, it's only used to clarify
	 *            presentation in user interfaces.
	 * @param convergeSystemArtifacts
	 *            if set to true this will force any artifact which also exists
	 *            as a system artifact (but with a different version) to adopt
	 *            the version of the system artifact. This is raven's default
	 *            mode, used because by definition system artifacts are visible
	 *            from all classloaders so we should never load other versions
	 *            of those artifacts as they will in turn by definition cause
	 *            class clashes
	 */
	Map<ArtifactIdentifier, ArtifactDescription> resolve(
			Set<ArtifactIdentifier> artifacts,
			Set<ArtifactIdentifier> ignoredArtifacts,
			boolean convergeSystemArtifacts);

	/**
	 * Return the pom parser used by this raven instance
	 * 
	 * @return
	 */
	PomParser getPomParser();

}
