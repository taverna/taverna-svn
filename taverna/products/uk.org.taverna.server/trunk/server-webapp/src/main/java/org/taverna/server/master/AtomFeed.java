/*
 * Copyright (C) 2011 The University of Manchester
 * 
 * See the file "LICENSE.txt" for license terms.
 */
package org.taverna.server.master;

import static javax.ws.rs.core.UriBuilder.fromUri;

import java.net.URI;
import java.util.List;

import javax.servlet.ServletContext;
import javax.ws.rs.core.UriBuilder;

import org.springframework.web.context.ServletContextAware;
import org.taverna.server.master.ContentsDescriptorBuilder.UriBuilderFactory;
import org.taverna.server.master.interfaces.TavernaRun;
import org.taverna.server.master.notification.atom.AbstractEvent;
import org.taverna.server.master.notification.atom.EventDAO;
import org.taverna.server.master.rest.TavernaServerREST.EventFeed;
import org.taverna.server.master.rest.TavernaServerREST.Events;
import org.taverna.server.master.utils.UsernamePrincipal;
import org.taverna.server.master.utils.InvocationCounter.CallCounted;

import edu.umd.cs.findbugs.annotations.NonNull;

/**
 * Simple REST handler that allows an Atom feed to be served up of events
 * generated by workflow runs.
 * 
 * @author Donal Fellows
 */
public class AtomFeed implements EventFeed, UriBuilderFactory,
		ServletContextAware {
	private EventDAO eventSource;
	private TavernaServerSupport support;
	private URI baseURI;

	public void setEventSource(EventDAO eventSource) {
		this.eventSource = eventSource;
	}

	public void setSupport(TavernaServerSupport support) {
		this.support = support;
	}

	public static class Feed extends Events {
		private UsernamePrincipal owner;
		private EventDAO eventSource;

		Feed(@NonNull EventDAO eventSource, @NonNull UsernamePrincipal owner) {
			this.eventSource = eventSource;
			this.owner = owner;
		}

		@Override
		public String getOwner() {
			return owner.getName();
		}

		@Override
		public List<AbstractEvent> getEvents() {
			return eventSource.getEvents(owner);
		}

		@Override
		public AbstractEvent getEvent(String id) {
			return eventSource.getEvent(owner, id);
		}
	}

	@Override
	@CallCounted
	public Events getFeed() {
		return new Feed(eventSource, support.getPrincipal());
	}

	@Override
	@CallCounted
	public AbstractEvent getEvent(String id) {
		return eventSource.getEvent(support.getPrincipal(), id);
	}

	@Override
	public UriBuilder getRunUriBuilder(TavernaRun run) {
		return fromUri(getBaseUriBuilder().path("runs/{uuid}").build(
				run.getId()));
	}

	@Override
	public UriBuilder getBaseUriBuilder() {
		return fromUri(baseURI);
	}

	@Override
	public void setServletContext(ServletContext servletContext) {
		String base = servletContext
				.getInitParameter("taverna.preferredUserUri");
		if (base == null)
			baseURI = URI.create(servletContext.getContextPath());
		else
			baseURI = URI.create(base);
	}
}
