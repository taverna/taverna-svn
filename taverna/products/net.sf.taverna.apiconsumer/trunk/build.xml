<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="apiconsumer" default="consumer" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="1.1"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="modern"/>
    
    <path id="classpath">
		<!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
	    <!-- Also include our own source tree -->
        <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
    </path>
	
	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="">
		<mkdir dir="${build.dir}"/>
	</target>

	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/.svn/**"/>
			</fileset>
		</copy>			      
	</target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac
            debug="on"
            srcdir="${build.src}"
            destdir="${build.classes}"
            source="1.6"
			deprecation="on"
			includeantruntime="false">
			<classpath refid="classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/.svn/**"/>
				<exclude name="**/*.java"/>
            </fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.jar" basedir="${build.classes}" update="no"/>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes"
			 destdir="${build.javadocs}"
             linksource="yes"
             breakiterator="yes"
			 sourcepath="${build.src}"
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>"
			 packagenames="*"
             source="1.6"
			 version="true">
			<classpath refid="classpath"/>
		</javadoc>
	</target>

	<!-- Consume target API -->
	<target name="consumer" depends="jar">
		<javadoc sourcepath="./target"
			 packagenames="*"
			 source="1.6">
			<doclet name="net.sf.taverna.tools.apiconsumer.APIConsumerDoclet">
				<path refid="classpath"/>
			</doclet>
			<classpath refid="classpath"/>
		</javadoc>
	</target>

</project>
