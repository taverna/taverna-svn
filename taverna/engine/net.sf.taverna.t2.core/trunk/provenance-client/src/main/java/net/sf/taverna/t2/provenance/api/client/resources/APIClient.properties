# configure DB access -- mySQL
dbhost=localhost
dbuser=paolo
dbpassword=riccardino

query.file=src/main/resources/testQuery-nested2-1.xml
#query.file=src/main/resources/provenance-testing/testQueryRunsScope1.xml

OPM.rdf.file=src/main/resources/OPM/OPMGraph.rdf

#*********
# used by ProvenanceAnalysisTest
#*********

#which vars do we want provenance for

#syntax:  query.vars ::= <query.var> {; <query.var>}*
#         query.var  ::= processor/port[/<path to node>]
#         <path to node>  ::= <number> {,<number>}* | ALL

#examples:
#query.vars=datflowName/O1;P4/Y2/1,1
#query.vars=P3/pdbFlatFile/ALL
#default:
  #query.vars=TOP/ALL/ALL == all collection values for all output vars in the top level dataflow

# the ALL keyword in the path is a request to process all elements of any collection that may be bound to processor/port, one at a time
# so if for example OUT/pdbFlatFile is bound to a list, then the request 
#OUT/pdbFlatFile/ALL is translated into one query for each element in that list. The result is presented as a map:
# path -> [ LineageQueryResult ]
# so the results for each path are available independently from one another.
#additionally if OPM is turned ON, then the resulting OPM graph is the union of all graphs for each of the query results 

#which processors are interesting along the path from query.vars
# example: query.processors=Kegg_gene_ids,Kegg_gene_ids_2

#common to all setups: query scope
#query.workflow=
query.wfinstances=LAST
#query.wfinstances=instance1,instance2,...  -- not yet supported

#include processor outputs in addition to inputs? this introduces redundancy because it returns for each edge in the graph
#it returns the values at both ends, but it is sometimes useful
# this is actually REQUIRED to generate a correct and complete OPM graph for the query answer 
query.returnOutputs=true

# if true then the lineage queries also return the dereferenced data values
query.returnDataValues=true


#*******************
#COMPLETE DEPENDENCY GRAPH
#query.vars=nested1 ££ O
query.vars= ALL
query.processors=ALL
#*******************

#******************
#OPM EXPORTER
#******************
#if true then we record artifact values alongside names in OPM
OPM.recordArtifactValues=false

# following switch not yet implemented
OPM.computeGraph=true 

#******************
#OPM IMPORTER
#******************
#our native OPM graph, re-imported
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/OPMGraph.xml

#UC Davis OPM/XML
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/thirdParty/UCDavis/J062941-success.xml
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/thirdParty/UCDavis/J062941-halt1-IsCSVReadyFileExists.xml

#NCSA 
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/thirdParty/NCSA/J609241_output.xml

#SOTON
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/thirdParty/SOTON/pc3opm.xml

#SWIFT  -- generates out of memory error
#OPM.XMLfile=src/test/resources/provenance-testing/OPM/thirdParty/SWIFT/opm-20090519.xml

#VisTrails
#OPM.XMLfile =src/test/resources/provenance-testing/OPM/thirdParty/VisTrails/workflow_opm2-noXMLValues.xml

#*******************
# PROVENANCE QUERIES
#*******************


#*******************
# QUERIES ON NATIVELY CAPTURED PROVENANCE
#*******************
# BASELINE: export complete OPM graph
# NOTE -- only a native T2 workflow can be queried this way, since imported graphs and thus their corresponding MOPDs 
# have no Dataflow type associated to processors, therefore "TOP" cannot be resolved in those case
# this makes sense: workflows only have a top-level container processor if that processor has I/O, which is never
# the case with MOPDs that are induced from imported OPM graphs 
#query.vars=TOP ££ ALL ££ ALL
#query.processors=ALL

#setup for PC3 workflow: PAN-STARRSTaverna.t2flow

# portion of the graph for the Ilkay experiment
#query.vars=CreateEmptyLoadDB ££ DBEntry;IsMatchCSVFileTables ££ IsMatchCSVFileTablesOutput;IsCSVReadyFileExists ££ IsCSVReadyFileExistsOutput
#query.processors=ALL

#provenance query 1:
#query.vars=TOP ££ LoadCSVFileIntoTableOutput ££ 2
#query.processors=LoadCSVFileIntoTable

#provenance query 2:  this checks to see if processor IsMatchTableColumnRanges is in the graph (i.e., it's been executed)
#query.vars=Workflow1 ££ ALL ££ ALL
#query.processors=IsMatchTableColumnRanges

#provenance query 3: Which operation executions were strictly necessary for the Image table to contain a particular (non-computed) value?
#query.vars=LoadCSVFileIntoTable ££ LoadCSVFileIntoTableOutput ££ 1
#query.processors=ALL
#ReadCSVReadyFile,ReadCSVFileColumnNames
#*******************

#*******************
# QUERIES ON IMPORTED OPM GRAPHS
#*******************

#*******************
# UoM re-imported graph
#*******************
# prov query 1: CHECK SEMANTICS
#query.vars=http://taverna.opm.org/LoadCSVFileIntoTable?it=2 ££ LoadCSVFileIntoTable/LoadCSVFileIntoTableOutput?it=2
#query.processors=ALL

# prov query 2
#query.vars=http://taverna.opm.org/LoadCSVFileIntoTable?it=2££LoadCSVFileIntoTable/LoadCSVFileIntoTableOutput?it=2
#query.processors=ALL

#provenance query 3: Which operation executions were strictly necessary for the Image table to contain a particular (non-computed) value?
#query.vars=LoadCSVFileIntoTableOutput ££ 
#query.processors=ALL

#*******************
#UCDAVIS imported OPM graphs
#*******************

#provenance query 2:  this checks to see if processor IsMatchTableColumnRanges is in the graph (i.e., it's been executed)
# report a simple SQL query instead -- this just checks that IsMatchTableColumnRanges is in the graph. Or:
#query.vars=IsMatchTableColumnRanges:1 ££ ALL; IsMatchTableColumnRanges:2 ££ ALL; IsMatchTableColumnRanges:3 ££ ALL 
#query.processors=IsMatchTableColumnRanges:1,IsMatchTableColumnRanges:2,IsMatchTableColumnRanges:3

#provenance query 3: Which operation executions were strictly necessary for the Image table to contain a particular (non-computed) value?
#query.vars=LoadCSVFileIntoTable:2 ££ out 
#query.processors=ALL


#*******************
#NCSA imported OPM graphs
#*******************

#provenance query 2:  this checks to see if processor IsMatchTableColumnRanges is in the graph (i.e., it's been executed)
#query.vars=http://pc3#IsMatchTableColumnRangesProcess1; http://pc3#IsMatchTableColumnRangesProcess0; http://pc3#IsMatchTableColumnRangesProcess2 
#query.processors=http://pc3#IsMatchTableColumnRangesProcess1,http://pc3#IsMatchTableColumnRangesProcess0,http://pc3#IsMatchTableColumnRangesProcess2
	
#provenance query 3: Which operation executions were strictly necessary for the Image table to contain a particular (non-computed) value?
#query.vars=http://pc3#LoadCSVFileIntoTableProcess1 
#query.processors=ALL

#*******************
# queries on native Taverna graphs
#*******************
#setup for keggGenes2KeggPathways-PM.t2flow
#query.vars=keggGenes2KeggPathways ££ commonPathways ££ 0
#query.processors=getPathwayDescriptions2,getCommonPathways,TOP

#query.vars=keggGenes2KeggPathways ££ paths_per_gene ££ 1,10
#;keggGenes2KeggPathways ££ paths_per_gene ££ 1,10 
#query.processors=get_pathways_by_genes,getPathwayDescriptions


#keggGenes2KeggPathways-PM.t2flow  - unfocused
#query.vars=keggGenes2KeggPathways ££ paths_per_gene ££ 1,10
#query.processors=ALL
#keggGenes2KeggPathways-PM.t2flow  - focused
#query.vars=keggGenes2KeggPathways ££ paths_per_gene ££ 1,10
#query.processors=keggGenes2KeggPathways

# setup for bioaid_protein_discovery_1051.t2flow
#focused
#query.vars=BIOAID_protein_discovery ££ discovered_proteins ££  10
#query.processors=Biooptimize_query
#Prioritise_lucene_query
#
#  unfocused
#query.vars=BIOAID_protein_discovery ££ discovered_proteins ££  10
#query.processors=ALL

#*******************

#*******************
#nested1-lists
#query.vars=nested1 ££ O
#query.processors=ALL
#*******************

#all output vars from top-level dataflow
# this has the effect of constructing the complete OPM graph
#query.vars=TOP/ALL
#query.processors=ALL


#*******************
#setup for generated/generatedLinear.t2flow
#query.vars=myFirstLinearDataflow/O/0,0
#query.processors=LISTGEN_1
#*******************

#*******************
#setup for generated/generatedLargeList.t2flow  - BEST CASE
#query.vars=2TO1_FINAL/Y/1,5
#query.processors=LINEARBLOCK_A_1,LINEARBLOCK_A_3,LINEARBLOCK_A_5,LINEARBLOCK_A_7,LINEARBLOCK_A_10,LINEARBLOCK_A_12,LINEARBLOCK_A_15,LINEARBLOCK_A_20,LINEARBLOCK_A_22,LINEARBLOCK_A_25,LINEARBLOCK_A_30,LINEARBLOCK_A_32,LINEARBLOCK_A_35,LINEARBLOCK_A_40,LINEARBLOCK_A_45,LINEARBLOCK_A_50,LINEARBLOCK_A_55,LINEARBLOCK_A_60,LINEARBLOCK_A_65,LINEARBLOCK_A_67,LINEARBLOCK_A_70,LINEARBLOCK_A_75,LINEARBLOCK_A_80,LINEARBLOCK_A_90,LINEARBLOCK_A_92,LINEARBLOCK_A_95,LINEARBLOCK_A_100,LINEARBLOCK_A_102,LINEARBLOCK_A_105,LINEARBLOCK_A_110,LINEARBLOCK_A_120,LINEARBLOCK_A_130,LINEARBLOCK_A_135,LINEARBLOCK_A_140,LINEARBLOCK_A_145,LINEARBLOCK_A_148,LINEARBLOCK_B_1,LINEARBLOCK_B_3,LINEARBLOCK_B_5,LINEARBLOCK_B_7,LINEARBLOCK_B_10,LINEARBLOCK_B_12,LINEARBLOCK_B_15,LINEARBLOCK_B_20,LINEARBLOCK_B_22,LINEARBLOCK_B_25,LINEARBLOCK_B_30,LINEARBLOCK_B_32,LINEARBLOCK_B_35,LINEARBLOCK_B_40,LINEARBLOCK_B_45,LINEARBLOCK_B_50,LINEARBLOCK_B_55,LINEARBLOCK_B_60,LINEARBLOCK_B_65,LINEARBLOCK_B_67,LINEARBLOCK_B_70,LINEARBLOCK_B_75,LINEARBLOCK_B_80,LINEARBLOCK_B_90,LINEARBLOCK_B_92,LINEARBLOCK_B_95,LINEARBLOCK_B_100,LINEARBLOCK_B_102,LINEARBLOCK_B_105,LINEARBLOCK_B_110,LINEARBLOCK_B_120,LINEARBLOCK_B_130,LINEARBLOCK_B_135,LINEARBLOCK_B_140,LINEARBLOCK_B_145,LINEARBLOCK_B_148
#*******************

#*******************
#setup for lineage-example.t2flow
#query.vars=P4 ££ Y1 ££ 1,0,0
#query.processors=P4,P1,P2,P3
#*******************

#*******************
#setup for test5b_list.t2flow
#query.vars=test5b_list/O2
#query.processors=P3
#*******************

#*******************
#setup for test5.t2flow
#query.vars=P5/P5VO
#query.processors=ALL
#*******************

#*******************
#setup for testMismatchingInputNL.t2flow
#query.vars=testMismatchingInputNL/O
#query.processors=ALL
#*******************

#*******************
#setup for test6b.t2flow
#query.vars=P4/Y/[0,1]
#query.processors=P1,P2
#*******************

#*******************
#setup for test7.t2flow
#query.vars=test7/O1
#query.processors=test1,P1,P2,P3
#*******************

#*******************
#setup for pathways_and_gene_annotations_for_qtl_phenotype_28303.t2flow
#query.vars=OUT/pathway_ids
#query.processors=Kegg_gene_ids,Kegg_gene_ids_2
#*******************

#*******************
#setup for baseLineage-a.t2flow
#query.vars=OUT/O1
#query.processors=P
#*******************

#*******************
#setup for #query.processors=ColourAnimals
#query.processors=P1,P2,...
#query.processors=OUTPUT,..
#*******************

#*******************
#setup for nested-1.t2flow
#query.vars=OUT/O
#query.processors=P1,P2
#query.processors=OUTPUT,..
#*******************

#*******************
#setup for nested-1.t2flow
#query.vars=OUT/O
#query.processors=P6,P2
#query.processors=OUTPUT,..
#*******************


