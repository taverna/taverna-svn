#*********
# used by ProvenanceAnalysisTest
#*********

#which vars do we want provenance for

#syntax:  query.vars ::= <query.var> {; <query.var>}*
#         query.var  ::= processor/port[/<path to node>]
#         <path to node>  ::= <number> {,<number>}* | ALL

#examples:
#query.vars=datflowName/O1;P4/Y2/1,1
#query.vars=P3/pdbFlatFile/ALL
#default:
  #query.vars=TOP/ALL/ALL == all collection values for all output vars in the top level dataflow

# the ALL keyword in the path is a request to process all elements of any collection that may be bound to processor/port, one at a time
# so if for example OUT/pdbFlatFile is bound to a list, then the request 
#OUT/pdbFlatFile/ALL is translated into one query for each element in that list. The result is presented as a map:
# path -> [ LineageQueryResult ]
# so the results for each path are available independently from one another.
#additionally if OPM is turned ON, then the resulting OPM graph is the union of all graphs for each of the query results 

#which processors are interesting along the path from query.vars
# example: query.processors=Kegg_gene_ids,Kegg_gene_ids_2

#common to all setups: query scope
query.wfinstances=LAST
#query.wfinstances=instance1,instance2,...  -- not yet supported

#include processor outputs in addition to inputs? this introduces redundancy because it returns for each edge in the graph
#it returns the values at both ends, but it is sometimes useful
query.returnOutputs=false

# if true then the lineage queries also return the dereferenced data values
query.returnDataValues=true

#if true then we record artifact values alongside names in OPM
OPM.recordArtifactValues=true

#*******************
#setup for Tom1
#query.vars=dataflow36/O/
#query.processors=ALL
#*******************

#*******************
#setup for PC3 workflow: PAN-STARRSTaverna.t2flow

#all output vars from top-level dataflow
# construct complete OPM graph
query.vars=TOP/ALL
query.processors=ALL

#provenance query 1:
#query.vars=TOP/LoadCSVFileIntoTableOutput/2
#query.processors=LoadCSVFileIntoTable

#provenance query 2:  this checks to see if a given processor is in the graph (i.e., it's been executed)
#query.vars=TOP/ALL/ALL
#query.processors=IsMatchTableColumnRanges

#provenance query 3:
#query.vars=Workflow1/LoadCSVFileIntoTableOutput/1
#query.processors=ALL

#*******************

#*******************
#setup for generated/generatedLinear.t2flow
#query.vars=myFirstLinearDataflow/O/ALL
#query.processors=2TO1_FINAL
#*******************

#*******************
#setup for generated/generatedLargeList.t2flow  - BEST CASE
#query.vars=2TO1_FINAL/Y/1,5
#query.processors=LINEARBLOCK_A_1,LINEARBLOCK_A_3,LINEARBLOCK_A_5,LINEARBLOCK_A_7,LINEARBLOCK_A_10,LINEARBLOCK_A_12,LINEARBLOCK_A_15,LINEARBLOCK_A_20,LINEARBLOCK_A_22,LINEARBLOCK_A_25,LINEARBLOCK_A_30,LINEARBLOCK_A_32,LINEARBLOCK_A_35,LINEARBLOCK_A_40,LINEARBLOCK_A_45,LINEARBLOCK_A_50,LINEARBLOCK_A_55,LINEARBLOCK_A_60,LINEARBLOCK_A_65,LINEARBLOCK_A_67,LINEARBLOCK_A_70,LINEARBLOCK_A_75,LINEARBLOCK_A_80,LINEARBLOCK_A_90,LINEARBLOCK_A_92,LINEARBLOCK_A_95,LINEARBLOCK_A_100,LINEARBLOCK_A_102,LINEARBLOCK_A_105,LINEARBLOCK_A_110,LINEARBLOCK_A_120,LINEARBLOCK_A_130,LINEARBLOCK_A_135,LINEARBLOCK_A_140,LINEARBLOCK_A_145,LINEARBLOCK_A_148,LINEARBLOCK_B_1,LINEARBLOCK_B_3,LINEARBLOCK_B_5,LINEARBLOCK_B_7,LINEARBLOCK_B_10,LINEARBLOCK_B_12,LINEARBLOCK_B_15,LINEARBLOCK_B_20,LINEARBLOCK_B_22,LINEARBLOCK_B_25,LINEARBLOCK_B_30,LINEARBLOCK_B_32,LINEARBLOCK_B_35,LINEARBLOCK_B_40,LINEARBLOCK_B_45,LINEARBLOCK_B_50,LINEARBLOCK_B_55,LINEARBLOCK_B_60,LINEARBLOCK_B_65,LINEARBLOCK_B_67,LINEARBLOCK_B_70,LINEARBLOCK_B_75,LINEARBLOCK_B_80,LINEARBLOCK_B_90,LINEARBLOCK_B_92,LINEARBLOCK_B_95,LINEARBLOCK_B_100,LINEARBLOCK_B_102,LINEARBLOCK_B_105,LINEARBLOCK_B_110,LINEARBLOCK_B_120,LINEARBLOCK_B_130,LINEARBLOCK_B_135,LINEARBLOCK_B_140,LINEARBLOCK_B_145,LINEARBLOCK_B_148
#*******************

#*******************
#setup for lineage-example.t2flow
#query.vars=lineageexample/O1/0,0,1
#query.processors=ALL
#*******************

#*******************
#setup for test5b_list.t2flow
#query.vars=test5b_list/O2
#query.processors=P3
#*******************

#*******************
#setup for test5.t2flow
#query.vars=P5/P5VO
#query.processors=ALL
#*******************

#*******************
#setup for testMismatchingInputNL.t2flow
#query.vars=testMismatchingInputNL/O
#query.processors=ALL
#*******************

#*******************
#setup for test6b.t2flow
#query.vars=P4/Y/[0,1]
#query.processors=P1,P2
#*******************

#*******************
#setup for test7.t2flow
#query.vars=test7/O1
#query.processors=test1,P1,P2,P3
#*******************

#*******************
#setup for pathways_and_gene_annotations_for_qtl_phenotype_28303.t2flow
#query.vars=OUT/pathway_ids
#query.processors=Kegg_gene_ids,Kegg_gene_ids_2
#*******************

#*******************
#setup for baseLineage-a.t2flow
#query.vars=OUT/O1
#query.processors=P
#*******************

#*******************
#setup for #query.processors=ColourAnimals
#query.processors=P1,P2,...
#query.processors=OUTPUT,..
#*******************

#*******************
#setup for nested-1.t2flow
#query.vars=OUT/O
#query.processors=P1,P2
#query.processors=OUTPUT,..
#*******************

#*******************
#setup for nested-1.t2flow
#query.vars=OUT/O
#query.processors=P6,P2
#query.processors=OUTPUT,..
#*******************


