package net.sf.taverna.t2.workflowmodel.processor.dispatch;

import java.util.List;
import java.util.concurrent.BlockingQueue;

import net.sf.taverna.t2.invocation.Completion;
import net.sf.taverna.t2.invocation.Event;
import net.sf.taverna.t2.workflowmodel.processor.service.Job;
import net.sf.taverna.t2.workflowmodel.processor.service.ServiceAnnotationContainer;

/**
 * Layers within the dispatch stack define a control flow to handle dispatch of
 * jobs from a queue (generated by the iteration system) to appropriate
 * services.
 * <p>
 * A dispatch layer can receive a reference to the Queue and a set of Services,
 * or a single Job and a set of Services from the layer above it (or from the
 * DispatchStackImpl object itself if this is the top layer). It can receive
 * errors, results and partial or total completion events from the layer
 * immediately below it.
 * <p>
 * To assist in graphical representation of the dispatch configuration each
 * layer declares for each class of message whether it intercepts and alters,
 * intercepts and observes or ignores (forwards) the message onto the next layer
 * (either up or down depending on the message) and whether the layer is capable
 * of instigating the creation of each class of message.
 * 
 * @author Tom Oinn
 * 
 */
public interface DispatchLayer<ConfigurationType> {

	/**
	 * Get a configuration object defining the behaviour of this dispatch layer.
	 * The object is an arbitrary Java bean.
	 */
	public ConfigurationType getConfiguration();

	/**
	 * Configure from a bean of type ConfigurationType (the type parameter on
	 * this interface)
	 */
	public void configure(ConfigurationType config);

	/**
	 * Return the action to be taken given reception of the specified class of
	 * message
	 */
	public DispatchLayerAction getActionFor(DispatchMessageType messageType);

	/**
	 * Return whether the specified message can be generated by this dispatch
	 * layer as a result of an action on an incoming message. Note that if the
	 * layer simply forwards the message on or modifies then relays the same
	 * message class this should be set to false, it is only set to true if the
	 * layer actually instigates the creation of the message.
	 */
	public Boolean canProduce(DispatchMessageType messageType);

	/**
	 * Receive a pointer to the job queue along with a set of services, this is
	 * received from the layer above in the dispatch stack or from the
	 * DispatchStackImpl object itself if this is the top layer
	 * 
	 * @param queue
	 * @param services
	 */
	public void receiveJobQueue(String owningProcess,
			BlockingQueue<Event> queue, List<? extends ServiceAnnotationContainer> services);

	/**
	 * Receive a single job and associated set of services from the layer above
	 * 
	 * @param job
	 * @param services
	 */
	public void receiveJob(Job job, List<? extends ServiceAnnotationContainer> services);

	/**
	 * Receive a single error reference from the layer below
	 * 
	 * @param owningProcess
	 *            owning process specification, see Job
	 * @param errorIndex
	 *            index array for the error
	 * @param errorMessage
	 *            free text description of the failure
	 * @param detail
	 *            Throwable, may be null, corresponding to the cause of the
	 *            failure
	 */
	public void receiveError(String owningProcess, int[] errorIndex,
			String errorMessage, Throwable t);

	/**
	 * Receive a result in the form of a Job object from the layer below
	 * 
	 * @param job
	 */
	public void receiveResult(Job job);

	/**
	 * Receive a (possibly partial) completion event from the layer below. This
	 * is only going to be used when the service invocation is capable of
	 * streaming partial data back up through the dispatch stack before the
	 * service has completed. Not all dispatch stack layers are compatible with
	 * this mode of operation, for example retry and recursion do not play well
	 * here!
	 * 
	 */
	public void receiveResultCompletion(Completion completion);

	/**
	 * Called when there will be no more events with the specified process
	 * identifier, can be used to purge cached state from layers within the
	 * stack
	 */
	public void finishedWith(String owningProcess);

	/**
	 * Set the parent dispatch stack of this layer, this is called when a layer
	 * is added to the dispatch stack and can be safely ignored by end users of
	 * this API
	 * 
	 * @param stack
	 */
	public void setDispatchStack(DispatchStack stack);

}
