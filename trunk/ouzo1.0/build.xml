<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="ouzo" default="all" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="0.1beta1"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="modern"/>

	<!-- Path used during compilation -->
	<path id="compile-classpath">
		<!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../taverna1.0/lib">
			<include name="*.jar"/>
		</fileset>		
		<fileset dir="../taverna1.0/devlib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../taverna1.0/build">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
        <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<path id="run-classpath">
		<!-- Jar files used when running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../taverna1.0/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="../taverna1.0/build">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<!-- Import tidier task -->
	<taskdef name="cleanimports" classname="com.tombrus.cleanImports.ant.CleanImports">
	<!-- declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Process the source tree to clean up the import declarations -->
	<!-- CAUTION - modifies the /src directory                       -->
	<target name="tidy">
		<cleanimports srcdir="${src.dir}">
            <cleanformat>
		<!-- Use wildcards iff there are more than five imports -->
                <options collapseAbove="5" blankLines="1" ambiguities="on"/>
		<import/>
		<!-- Handle common java import stuff -->
                <import comment="Utility Imports" package="java.util"/>
                <import comment="IO Imports" package="java.io"/>
                <import comment="JDOM Imports" package="org.jdom"/>
                <import comment="Network Imports" package="java.net"/>
		<import comment="RMI Imports" package="java.rmi"/>
                <options blankLines="0"/>
		<import own="true"/>
		<options blankLines="2"/>
                <import javalang="true"/>
            </cleanformat>
			<classpath refid="compile-classpath"/>
        </cleanimports>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			ignoreVersion="yes"
			sourceBrowser="yes"/>
	</target>

	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare">
		<mkdir dir="${build.dir}"/>
	</target>

	<!-- Build jar file and javadocs -->
	<target name="all" depends="jar,javadoc,doxygen"/>

	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
				<exclude name="**/package.html"/>	
			</fileset>
		</copy>
	</target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac debug="on" srcdir="${build.src}" destdir="${build.classes}">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
            </fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.jar" basedir="${build.classes}" update="no"/>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes"
			 destdir="${build.javadocs}"
			 sourcepath="${build.src}"
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>"
			 packagenames="*"
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>
	
	<!-- Create authority war file -->
	<target name="war" depends="jar">
		<mkdir dir="${build.dir}/war"/>
		<copy todir="${build.dir}/war" filtering="on">
			<fileset dir="./war-template">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
		<!-- fill in the lib directory -->
		<copy todir="${build.dir}/war/WEB-INF/lib" filtering="on">
			<fileset dir="./lib" includesfile="./war-libs.text"/>
			<fileset dir="../taverna1.0/lib" includesfile="./war-libs.text"/>
			<fileset dir="../taverna1.0/devlib" includesfile="./war-libs.text"/>
			<fileset dir="../taverna1.0/build">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${build.dir}">
				<include name="*.jar"/>
			</fileset>	
		</copy>
		<!-- create the war file -->
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.war" basedir="${build.dir}/war" update="no"/>
	</target>

</project>
