<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="executeworkflowprogram">
  <title>Using the Taverna API to programmatically execute a workflow</title>

  <para>Since Taverna version 1.4 it has been possible to execute workflow
  through the <literal>WorkflowLauncher</literal> helper class. However, since
  the introduction of Raven with version 1.5 onwards this became non-trivial
  and needed to be bootstrapped.</para>

  <para>This section describes an approach to directly accessing the Taverna
  API without the need to bootstrap your application. This is in particulary
  useful if you want to use the Taverna API from an application or service,
  and you don't want to transition your application to use Maven and/or
  Raven.</para>

  <para>What Raven provides for Taverna is dynamically loading of dependencies
  and components, such as processor types. Normally in Taverna everything
  except a tiny bootstrapper is loaded dynamically, which makes it possible to
  do plugins and online updates. However, following the approach of this
  section, we will explore a middleway that lets you keep normal Java
  dependencies on the parts of Taverna you need to interface with, and let
  Raven handle the rest. Instead of launching your application through a Raven
  bootstrapper, it will be enough to do a programmatic initialisation of
  Raven.</para>

  <para>Although this example relates to executing a workflow through the
  WorkflowLauncher, it also applies to accessing other parts of the Taverna
  API with careful selection of the relevant artifacts, for example for
  building a workflow using the API.</para>

  <section id="initialise_the_repository">
    <title>Initialising the Repository</title>

    <para>To avoid needing to use a bootstrapped approach, the solution is to
    initialise the Raven repository programmatically. This is achieved by
    using the <literal>LocalRepository</literal> method introduced with
    Taverna 1.5.2:</para>

    <programlisting>public Repository getRepository(File base, ClassLoader loader, Set&lt;Artifact&gt; systemArtifacts);</programlisting>

    <para>The parameter <literal>base</literal> is a <literal>File</literal>
    representing a directory to which any necessary artifacts will be
    downloaded. These are external artifacts that shouldn't be included in the
    classpath of the application that is using the Taverna API.</para>

    <para>The parameter <literal>loader</literal> is the
    <literal>ClassLoader</literal> of the application that is invoking the
    Taverna API, this is where Raven will try to find any classes listed in
    <literal>systemArtifacts</literal>. Normally this will be your
    classloader, and therefore would include your classpath.</para>

    <para>The parameter <literal>systemArtifacts</literal> is a set of
    <literal>Artifact</literal>s that are included within the application
    invoking the Taverna API. Defining these tell Raven that classes within
    these artifacts can be found within the classloader provided as the
    <literal>loader</literal> parameter, and not to use its own internal
    classloaders to create instances of these classes. This is important
    because otherwise Raven may download these artifacts and create another
    instance of this class from its own internal classloaders and wherever
    Taverna interacts with your applications ClassCastExceptions will occur.
    In practice this has been found to be rare, but providing these system
    artifacts acts as a good safety net.</para>

    <para>Next any external artifacts need to be defined. These are artifacts
    that are accessed through the Taverna SPI extension points and are loaded
    through Tavernas internal plugin machinery. In this example of invoking a
    workflow these artifacts are the <literal>Processor</literal> artifacts.
    These are added to your <literal>Repository</literal> instance created
    previously through the method:</para>

    <programlisting>repository.addArtifact(Artifact artifact);</programlisting>

    <para>For these external artifacts, Raven needs to know where to find
    them. This is acheived by providing the repository with a list of Maven 2
    repository URLs that contain the required artifacts. This should at least
    include:</para>

    <simplelist>
      <member><filename>http://www.mygrid.org.uk/maven/repository/</filename>
      - the myGrid artifact repository</member>

      <member><filename>http://moby.ucalgary.ca/moby/moby_maven/</filename> -
      Biomoby specific artifacts</member>

      <member><filename>http://www.ibiblio.org/maven2/</filename> - the
      central Maven repository. You should also include some additional mirror
      sites.</member>
    </simplelist>

    <tip>
      <para>The <literal>raven.properties</literal> included with Taverna (in
      the <literal>conf</literal> folder) provides a comprehensive list of
      mirrors assigned to the property
      <literal>raven.repository.&lt;number&gt;</literal>. Essentially here we
      are providing this same information programmatically.</para>
    </tip>

    <para>To finalise the initialisation of the repository the method</para>

    <programlisting>repository.update();</programlisting>

    <para>now needs to be called. This will download any missing artifacts to
    the local repository base directory defined previously, which can take a
    few minutes when first run. Once they've been downloaded subsequent calls
    will be quick as long as the repository location does not change.
    Optionally you may wish to distribute a copy of this repository with your
    application and set the local repository directory accordingly.</para>
  </section>

  <section id="register_spi_registry">
    <title>Registering the repository with the Taverna SPI registry</title>

    <para>Before using the API, the Taverna plugin registries need to provided
    with the previously initialised repository. This is achieved with a call
    to:</para>

    <programlisting>TavernaSPIRegistry.setRepository(Repository repository);</programlisting>

    <para>You are now ready to interact with the Taverna API. The following
    example demonstrates a simplified approach to using the
    <literal>WorkflowLauncher</literal>, and further details on using
    <literal>WorkflowLauncher</literal> can be found by reading the <ulink
    url="http://www.mygrid.org.uk/wiki/Mygrid/ExecutingWorkflowOutsideOfTaverna">original
    documentation</ulink>. Note that you normally wouldn't run this example
    program as it is, as the <literal>executeworkflow</literal> script of the
    Taverna distribution should do the job.</para>
  </section>

  <section id="example_execute_application">
    <title>Example application</title>

    <para>The next section includes the <link
    linkend="executeworkflowprogram_source">sourcecode for an example
    wrapper</link> to <literal>WorkflowLauncher</literal> that demonstrates
    the procedure for setting up Raven and invoking the
    <literal>WorkflowLauncher</literal>. This example can be downloaded from
    <ulink
    url="http://prdownloads.sourceforge.net/taverna/workflowlauncher-1.7.0.zip?download">http://prdownloads.sourceforge.net/taverna/workflowlauncher-1.7.0.zip?download</ulink>
    and is built using Maven. It is also available in the Taverna source tree
    under <emphasis>/examples/workflowlauncher</emphasis>, though note that
    this isn't always guarenteed to work due to the use of undeployed SNAPSHOT
    artifact versions. To make execution simple it makes use of the maven
    plugin <literal>appassembler</literal>, so to build simply issue the
    command:</para>

    <screen>mvn package appassembler:assemble</screen>

    <para>This will build the application to
    <literal>target/appassembler</literal> and can be invoked with the
    <literal>bin/runme[.bat]</literal> script which takes the following
    parameters:</para>

    <screen>runme [-inputdoc &lt;path to input doc&gt;] [-outputdoc &lt;path to output doc&gt;]
      [-basedir &lt;path to local repository download dir&gt;] 
       -workflow &lt;path to workflow scufl file&gt;</screen>
  </section>

  <section id="executeworkflowprogram_source">
    <title>Example source code</title>

    <para>For quick reference the source code for the example application is
    listed below:</para>

    <programlisting>package net.sf.taverna.example;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.taverna.raven.repository.Artifact;
import net.sf.taverna.raven.repository.BasicArtifact;
import net.sf.taverna.raven.repository.Repository;
import net.sf.taverna.raven.repository.impl.LocalRepository;

import org.apache.log4j.Logger;
import org.embl.ebi.escience.baclava.DataThing;
import org.embl.ebi.escience.scufl.Processor;
import org.embl.ebi.escience.scufl.tools.WorkflowLauncher;
import org.embl.ebi.escience.utils.TavernaSPIRegistry;
import org.jdom.JDOMException;

/**
 * &lt;p&gt;
 * A simplified example application demonstrating how to invoke the Taverna API
 * through Raven, without the need to bootstrap the application.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Its main point is to demonstrate populating an {@link Repository} instance
 * with the system artifacts and external artifacts required to execute a
 * workflow. Workflow execution is the most popular request, but this technique
 * can also be applied to access other parts of the Taverna API.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The system artifacts relate to the artifacts that already exist within the
 * applications classpath. Correctly defining these ensures that the
 * applications classloader is used to create instances of classes contained
 * within these artifacts. This prevents Raven creating instances through its
 * own classloaders leading to ClassCastException or similar errors. These
 * artifacts are defined in
 * {@link WorkflowLauncherWrapper#buildSystemArtifactSet()}
 * &lt;/p&gt;
 * &lt;p&gt;
 * Since you necessarily will be accessing parts of Taverna's API, you will need
 * to include the relevant artifacts on your application's classpath to be able
 * to access the classes. If you access other parts of Taverna than this example
 * shows, you will need to add those artifacts to
 * {@link #buildSystemArtifactSet()} as well.
 * &lt;/p&gt;
 * &lt;p&gt;
 * For instance, if you are constructing a new workflow using the API, and you
 * need access to a
 * {@link org.embl.ebi.escience.scuflworkers.soaplab.SoaplabProcessor}, you
 * will need to both list taverna-soaplab-processor as a system artifact and
 * include it and its dependencies in your application's classpath.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The external artifacts relate to artifacts that exist outside of the
 * application as SPI plugin points, ie. artifacts that are &lt;strong&gt;not&lt;/strong&gt;
 * on the application's classpath. For the purpose of this example this is the
 * {@link Processor}s that are needed during workflow execution. These
 * artifacts are defined in
 * {@link WorkflowLauncherWrapper#buildExternalArtifactSet()}. Depending on
 * which parts of Taverna's API you are invoking, you might have to include more
 * artifacts from Taverna's distribution profile.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Because these artifacts are not defined in the application they, and their
 * dependencies, need to be downloaded when the application is first run and are
 * downloaded to the local repository location defined by the method
 * {@link WorkflowLauncherWrapper#getRepositoryBaseFile()}, and ultimately the
 * runtime argument &lt;em&gt;-basedir&lt;/em&gt; if provided.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The external artifacts are downloaded from the remote repository locations
 * defined in {@link WorkflowLauncherWrapper#buildRepositoryLocationSet}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The key to this approach is initialising a {@link Repository} using the API
 * call:
 * &lt;/p&gt;
 * 
 * &lt;pre&gt;
 * Repository repository =
 *     LocalRepository.getRepository(localrepository, applicationClassloader,
 *         systemArtifacts);
 * &lt;/pre&gt;
 * 
 * &lt;p&gt;
 * Then making sure the local repository is up to date with a call:
 * &lt;/p&gt;
 * 
 * &lt;pre&gt;
 * repository.update();
 * &lt;/pre&gt;
 * 
 * &lt;p&gt;
 * The repository is then registered with the {@link TavernaSPIRegistry} with
 * the call:
 * &lt;/p&gt;
 * 
 * &lt;pre&gt;
 * TavernaSPIRegistry.setRepository(repository);
 * &lt;/pre&gt;
 * 
 * &lt;p&gt;
 * This all takes place within
 * {@link WorkflowLauncherWrapper#initialiseRepository()}
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note that for simplicity in this example the external artifacts and remote
 * repositories have been hardcoded and would normally be better defined
 * separately in a file. For the same reason, exception handling has also been
 * kept to a minimum.
 * &lt;/p&gt;
 * &lt;p&gt;
 * There is nothing requiring you to use this mechanism from an
 * {@link #main(String[])} method started from the command line, this is just to
 * make this example self-contained and simple. As long as you include the
 * necessary dependencies this example should be easily ported to be used within
 * a servlet container such as Tomcat.
 * &lt;/p&gt;
 * &lt;h4&gt;To use:&lt;/h4&gt;
 * &lt;p&gt;
 * First build using maven together with the appassembler plugin:
 * &lt;/p&gt;
 * &lt;pre&gt;mvn package appassembler:assemble&lt;/pre&gt;
 * &lt;p&gt;
 * Then navigate to the &lt;code&gt;target/appassembler/bin&lt;/code&gt; directory
 * and run the &lt;code&gt;runme[.bat]&lt;/code&gt; command:
 * &lt;/p&gt;
 * &lt;pre&gt;
 * runme [-inputdoc &amp;lt;path to input doc&amp;gt; 
 *        -outputdoc &amp;lt;path to output doc&amp;gt; 
 *        -basedir &amp;lt;path to local repository download dir&amp;gt;] 
 *        -workflow &amp;lt;path to workflow scufl file&amp;gt;.
 * &lt;/pre&gt;
 * 
 * @author Stuart Owen
 * @author Stian Soiland
 */
public class WorkflowLauncherWrapper {

    /**
     * The version of Taverna core components that is used, for instance
     * &lt;code&gt;1.6.1.0&lt;/code&gt;.
     * &lt;p&gt;
     * (Note that although processors and plugins might be updated by their
     * minor-minor version, say a
     * {@link org.embl.ebi.escience.scuflworkers.soaplab.SoaplabProcessor} can
     * be in version &lt;code&gt;1.6.1.1&lt;/code&gt;, the core components listed by
     * {@link #buildSystemArtifactSet()} would still be &lt;code&gt;1.6.1.0&lt;/code&gt;,
     * and thus this constant would also be &lt;code&gt;1.6.0.0&lt;/code&gt;. You might
     * have to update use of &lt;code&gt;TAVERNA_BASE_VERSION&lt;/code&gt; in
     * {@link #buildExternalArtifactSet()} if you want a newer version of a
     * processor or similar.)
     * &lt;p&gt;
     * This version has to match the version of the real dependency you have to
     * Taverna libraries on your classpath (ie. the pom.xml dependencies).
     */
    public static final String TAVERNA_BASE_VERSION = "1.7.0.0";

    String workflowName;

    String inputDocumentName;

    String outputDocumentName;

    String baseDirName;

    private static Logger logger =
        Logger.getLogger(WorkflowLauncherWrapper.class);

    public static void main(String[] args) {
        try {
            new WorkflowLauncherWrapper().run(args);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    /**
     * The execution entry point, called by {@link #main(String[])}
     * 
     * @param args
     *            the arguments as passed to {@link #main(String[])}
     * @throws Exception if anything goes wrong
     */
    public void run(String[] args) throws Exception {
        processArgs(args);
        if (workflowName == null) {
            logger.error("You must specify a workflow with the argument -workflow");
            logger.error("e.g. runme.bat -workflow C:/myworkflow.xml");
            System.exit(2);
        }

        InputStream workflowInputStream = getWorkflowInputStream();

        Map&lt;String, DataThing&gt; inputs = loadInputDocument();
        if (inputs == null) {
            inputs = new HashMap&lt;String, DataThing&gt;();
        }
            
        Repository repository = initialiseRepository();
        TavernaSPIRegistry.setRepository(repository);

        WorkflowLauncher launcher = new WorkflowLauncher(workflowInputStream);

        Map&lt;String, DataThing&gt; outputs = launcher.execute(inputs);
        if (outputDocumentName == null) {
            logger.warn("No -outputdoc defined to save results. " + 
                "Results returned contained "
                + outputs.size() + " outputs.");
        } else {
            saveOutputDocument(outputs);
        }

    }

    /**
     * Open an input stream to the workflow defined by the value of the
     * argument &lt;code&gt;-workflow&lt;/code&gt;
     * 
     * @return The workflow {@link InputStream}
     * @throws FileNotFoundException
     *             if the &lt;code&gt;-workflow&lt;/code&gt; argument does not represent 
     *             a valid path to an existing file.
     */
    protected InputStream getWorkflowInputStream() throws FileNotFoundException {
        return new FileInputStream(new File(workflowName));
    }

    /**
     * &lt;p&gt;
     * Provide the required initialisation of a {@link Repository} instance for
     * executing a workflow.
     * &lt;/p&gt;
     * &lt;p&gt;
     * This involves first defining the artifacts that exist within the
     * application classpath, external plugin artifacts required during workflow
     * execution (processors) and a location to download these artifacts to.&lt;/p&gt;
     * &lt;p&gt;
     * Based upon this information the repository is updated, causing any
     * external artifacts to be downloaded to the local repository location
     * defined by &lt;code&gt;-basedir&lt;/code&gt; if required.
     * 
     * @return The initialised {@link Repository} instance
     * @throws IOException
     */
    protected Repository initialiseRepository() throws IOException {
     
        System.setProperty("raven.profile","http://www.mygrid.org.uk/taverna/updates/1.7.0/taverna-1.7.0.0-profile.xml");

        // this line is necessary if working with Taverna 1.5.2 or earlier:
        // Bootstrap.properties = new Properties();

        Set&lt;Artifact&gt; systemArtifacts = buildSystemArtifactSet();
        Set&lt;Artifact&gt; externalArtifacts = buildExternalArtifactSet();
        List&lt;URL&gt; repositoryLocations = buildRepositoryLocationSet();

        File base = getRepositoryBaseFile();
        Repository repository =
            LocalRepository.getRepository(base,
                WorkflowLauncherWrapper.class.getClassLoader(), systemArtifacts);
        for (Artifact artifact : externalArtifacts) {
            repository.addArtifact(artifact);
        }

        for (URL location : repositoryLocations) {
            repository.addRemoteRepository(location);
        }

        repository.update();
        return repository;
    }

    /**
     * Provide an ordered list of {@link URL}s to public Maven 2 repositories
     * containing required artifacts. This should contain at a minimum:
     * &lt;ul&gt;
     * &lt;li&gt;http://www.mygrid.org.uk/maven/repository/ - the myGrid artifact
     * repository&lt;/li&gt;
     * &lt;li&gt;http://moby.ucalgary.ca/moby/moby_maven/ - Biomoby specific
     * artifacts&lt;/li&gt;
     * &lt;li&gt;http://www.ibiblio.org/maven2/ - the central Maven repository and/or
     * any mirrors&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;
     * The repositories will be searched in order.
     * &lt;/p&gt;
     * &lt;p&gt;
     * Although the URLs are hard-coded in this example, it is advisable to
     * store these in a separate file in a real application.
     * 
     * @return A {@link List} containing the list of URL locations
     * @throws MalformedURLException if the programmer entered an invalid URL :-)
     */
    protected List&lt;URL&gt; buildRepositoryLocationSet()
        throws MalformedURLException {
        List&lt;URL&gt; result = new ArrayList&lt;URL&gt;();
        
        // Guess local Maven2 repository is in ~/.m2/repository
        File home = new File(System.getProperty("user.home"));
        File m2Repository = new File(new File(home, ".m2"), "repository");
        if (m2Repository.isDirectory()) {
            // This is useful for developers
            logger.debug("Including local maven repository " + m2Repository);
            result.add(m2Repository.toURI().toURL());
        }
        
        result.add(new URL("http://www.mygrid.org.uk/maven/repository/"));
        result.add(new URL("http://mirrors.sunsite.dk/maven2/"));
        result.add(new URL("http://www.ibiblio.org/maven2/"));
        result.add(new URL("http://moby.ucalgary.ca/moby/moby_maven/"));
        result.add(new URL(
            "http://www.mygrid.org.uk/maven/snapshot-repository/"));
        return result;
    }

    /**
     * &lt;p&gt;
     * Provide a set of {@link Artifact}s (normally {@link BasicArtifact}
     * instances) defining the artifacts (ie. JAR files) whose classes and
     * dependencies also exist within the applications classpath.
     * &lt;/p&gt;
     * &lt;p&gt;
     * These are used to let Raven know that these classes already exist and
     * prevents it creating duplicate classes from its own classloaders leading
     * to a potential ClassCastException or similar.
     * 
     * @return Set&lt;Artifact&gt; containing the list of system {@link Artifact}s
     */
    protected Set&lt;Artifact&gt; buildSystemArtifactSet() {
        
        Set&lt;Artifact&gt; systemArtifacts = new HashSet&lt;Artifact&gt;();
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna",
            "taverna-core", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna",
            "taverna-enactor", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna",
            "taverna-tools", TAVERNA_BASE_VERSION));

        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.baclava",
            "baclava-core", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.baclava",
            "baclava-tools", TAVERNA_BASE_VERSION));

        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.scufl",
            "scufl-core", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.scufl",
            "scufl-model", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.scufl",
            "scufl-tools", TAVERNA_BASE_VERSION));
        systemArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna.scufl",
            "scufl-workflow", TAVERNA_BASE_VERSION));
        
        return systemArtifacts;
    }

    /**
     * &lt;p&gt;
     * Provide additional artifacts that are external SPI plugins and won't
     * already exist on the classpath. This can be compared to the Taverna
     * distributions' profile to specify which components should be dynamically
     * loaded.
     * &lt;/p&gt;
     * &lt;p&gt;
     * In this example, the application executes a workflow, and therefore
     * define all required {@link Processor} types. These artifacts, and their
     * dependencies, will be downloaded from the
     * {@link #buildRepositoryLocationSet()} to {@link #getRepositoryBaseFile()}
     * when the application is first run.
     * &lt;/p&gt;
     * &lt;p&gt;
     * Although hard-coded for this example it would be advisable to define
     * these artifacts in an external file.
     * &lt;/p&gt;
     * 
     * @return Set&lt;Artifact&gt; containing the list of external artifacts.
     */
    protected Set&lt;Artifact&gt; buildExternalArtifactSet() {
        Set&lt;Artifact&gt; externalArtifacts = new HashSet&lt;Artifact&gt;();

        String groupId = "uk.org.mygrid.taverna.processors";
        
        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-beanshell-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-biomart-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact("biomoby.org",
            "taverna-biomoby", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact("uk.org.mygrid.taverna",
            "taverna-contrib", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-java-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-localworkers", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-notification-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-soaplab-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-stringconstant-processor", TAVERNA_BASE_VERSION));

        externalArtifacts.add(new BasicArtifact(groupId,
            "taverna-wsdl-processor", TAVERNA_BASE_VERSION));
        
        return externalArtifacts;
    }

    /**
     * &lt;p&gt;
     * Provide a {@link File} representation of the local repository directory
     * that external artifacts and their dependencies will be downloaded to.&lt;/p&gt;
     * &lt;p&gt;
     * This is defined by the argument &lt;code&gt;-basedir&lt;/code&gt;. If this is not
     * defined a temporary directory is created.&lt;/p&gt;
     * 
     * @return a {@link File} representation
     * @throws IOException if the base directory could not be accessed
     */
    protected File getRepositoryBaseFile() throws IOException {
        if (baseDirName != null) {
            return new File(baseDirName);
        } else {
            File temp = File.createTempFile("repository", "");
            temp.delete();
            temp.mkdir();
            logger.warn("No -basedir defined, so using temporary location of:"
                + temp.getAbsolutePath());
            return temp;
        }
    }

    /**
     * Load an XML input document, if defined by the argument
     * &lt;code&gt;-inputdoc&lt;/code&gt;.
     * 
     * @return The {@link Map} of input {@link DataThing}s, or
     *         &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;-inputdoc&lt;/code&gt; was not specified
     * @throws FileNotFoundException If the input document can't be found
     * @throws JDOMException If the input document is invalid XML
     * @throws IOException If the input document can't be read
     */
    protected Map&lt;String, DataThing&gt; loadInputDocument() 
    throws FileNotFoundException, JDOMException, IOException {
        if (inputDocumentName == null) {
            return null;
        }
        File file = new File(inputDocumentName);
        return WorkflowLauncher.loadInputDoc(file);
    }

    /**
     * Save an XML output document for the results of running the workflow to
     * the location defined by &lt;code&gt;-outputdoc&lt;/code&gt;, if specified.
     * 
     * @param outputs The {@link Map} of results to be saved
     * @throws IOException If the results could not be saved
     */
    protected void saveOutputDocument(Map&lt;String, DataThing&gt; outputs) 
    throws IOException {
        if (outputDocumentName != null) {
            File file = new File(outputDocumentName);
            WorkflowLauncher.saveOutputDoc(outputs, file);
            System.out.println(file.getAbsolutePath());
        }
    }

    /**
     * Process command line argument and set attributes for input/output
     * document, basedir and workflow.
     * 
     * @param args The list of arguments from {@link #main(String[])}
     */
    private void processArgs(String[] args) {
        // TODO: Use org.apache.commons.cli instead of manual parsing
        for (int i = 0; i &lt; args.length; i += 2) {
            boolean handled = false;
            String param = args[i];
            String value = args[i + 1];
            if (param.equals("-workflow")) {
                workflowName = value;
                handled = true;
            }
            if (param.equals("-inputdoc")) {
                inputDocumentName = value;
                handled = true;
            }
            if (param.equals("-outputdoc")) {
                outputDocumentName = value;
                handled = true;
            }
            if (param.equals("-basedir")) {
                baseDirName = value;
                handled = true;
            }
            if (!handled) {
                logger.error("Unrecognised argument:" + param + " with value:"
                    + value);
            }
        }
    }

}</programlisting>
  </section>
</section>