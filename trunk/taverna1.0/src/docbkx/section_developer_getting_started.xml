<?xml version="1.0" encoding="UTF-8"?>
<section id="developer_getting_started">
  <title>Getting started.</title>

  <section id="mailing_lists">
    <title>Subscribing to the mailing lists.</title>

    <para>You are strongly encouraged to subscribe to the taverna-hackers
    mailing list. Here you will get help to many of your problems from fellow
    hackers or the directly from the Taverna team. It also helps the Taverna
    developers become aware of particular issues that they may otherwise be
    ignorant of.</para>

    <para>Whilst you are at it, you would be encouraged to also subsribe to
    the taverna-users list.</para>

    <para>Details of how to join the mailing lists, and browse the archives,
    can be found at the Taverna <ulink
    url="http://sourceforge.net/mail/?group_id=74874">Sourceforge
    site.</ulink></para>
  </section>

  <section id="getting_the_code">
    <title>Getting the Taverna sourcecode.</title>

    <para>Even if you not planning on modifying the Taverna sourcecode
    directly, and are simply planning on creating a <link
    linkend="plugins">Plugin</link>, it is still advisable that you download
    the sourcecode. It can provide a valuable reference on how to use various
    parts of the API.</para>

    <para>When a Taverna release is made the sourcecode used to make that
    release is made available on the <ulink
    url="http://sourceforge.net/project/showfiles.php?group_id=74874">Sourceforge
    download site</ulink>. Sourcecode bundles are prefixed
    taverna-workbench-src followed by the version number. If they are not
    available complain to the taverna-hackers mailing list.</para>

    <para>For the very latest sourcecode you will need to retrieve the
    taverna1.0 module from Taverna CVS repository, using an anonymous login.
    Its advisable to do this within <ulink
    url="http://www.eclipse.org">Eclipse</ulink> using
    taverna.cvs.sourceforge.net as the Host, /cvsroot/tavena as the
    Repository, pserver as the Connection type, and anonymous as the username
    with a blank password.</para>

    <para>The following commands will allow you to retrieve CVS from the
    command line, and when prompted for a password just press enter.</para>

    <screen>cvs -d:pserver:anonymous@taverna.cvs.sourceforge.net:/cvsroot/taverna login 

cvs -z3 -d:pserver:anonymous@taverna.cvs.sourceforge.net:/cvsroot/taverna co -P taverna1.0</screen>

    <para>It is also possible to <ulink
    url="http://taverna.cvs.sourceforge.net/taverna/taverna1.0/">Browse CVS
    online.</ulink></para>
  </section>

  <section id="building_taverna">
    <title>Building Taverna with Maven.</title>

    <para><ulink url="http://maven.apache.org">Maven</ulink>, version 2.0.4,
    is a pre-requisite to building Taverna, as of course is Java, but
    inparticular <ulink
    url="http://java.sun.com/javase/downloads/index_jdk5.jsp">Java SE
    5.0</ulink>.</para>

    <para>Once the pre-requisites have been met, from the root of the Taverna
    directory run the command:</para>

    <screen>mvn install
</screen>

    <para>This installs the artifacts into your local maven repository. Next
    run the command:</para>

    <screen>maven package assembly:directory</screen>

    <para>This builds the Taverna release into the directory
    target/taverna-1.5.1-bin/taverna-1.5.1</para>

    <note>
      <para>In theory the goal 'package' is an unnessary step, but is sadly
      required due to a bug in the maven assembly plugin.</para>
    </note>

    <para>Next change to the target/taverna-1.5.1-bin/taverna-1.5.1/
    directory. If you are making sourcecode changes, then before you can run
    Taverna you need to edit the startup script, runme.sh or runme.bat
    depending upon your platform. If you don't make the following change then
    when you run Taverna it will fetch its artifacts from the central myGrid
    repository, rather than using the artifacts you just built and installed.
    You will need to know the location of your local maven repository. Using
    Linux or the Mac this is by default $HOME/.m2/repository, or using Windows
    "Documents and Settings/&lt;user&gt;/.m2/repository/. You need to assign
    this value to the variable raven.repository.0 in the startup script
    meaning that your local repository is examined first for the Taverna
    artifacts. The path needs to represented as a file URL.</para>

    <para>So for Linux your run.sh will end with something like.</para>

    <screen>ARGS="-Xmx300m"
ARGS="$ARGS -Djava.system.class.loader=net.sf.taverna.tools.BootstrapClassLoader"
ARGS="$ARGS -Djava.protocol.handler.pkgs=uk.ac.rdg.resc.jstyx.client"

#uncomment and complete the next line and complete to change the directory taverna downloads jars to
#ARGS="$ARGS -Dtaverna.repository=&lt;directory&gt;"

#uncomment and complete the next line to set http proxy settings, and the 2nd line if authentication is required
#ARGS="$ARGS -Dhttp.proxyHost=&lt;hostname or ip address&gt; -Dhttp.proxyPort=&lt;port&gt;"
#ARGS="$ARGS -Dhttp.proxyUser=&lt;username&gt; -Dhttp.proxyPassword=&lt;password&gt;"

ARGS="$ARGS -Draven.repository.0=file:/home/elvis/.m2/repository/"

java $ARGS -jar $TAVERNA_HOME/taverna-bootstrap-1.5.1.jar $@
</screen>

    <para>In Windows, note the spaces in the path need to be replaced with
    %20:</para>

    <screen>set ARGS=-Xmx300m
set ARGS=%ARGS% -Djava.system.class.loader=net.sf.taverna.tools.BootstrapClassLoader
set ARGS=%ARGS% -Djava.protocol.handler.pkgs=uk.ac.rdg.resc.jstyx.client
set ARGS=%ARGS% "-Dtaverna.dotlocation=%~dp0\bin\win32i386\dot.exe"

REM uncomment the next line and complete to change the directory taverna downloads jars to
REM set ARGS=%ARGS% -Dtaverna.repository=&lt;directory&gt;

REM uncomment and complete the next line to set http proxy settings, and the 2nd line if authentication is required
REM set ARGS=%ARGS% -Dhttp.proxyHost=&lt;hostname or ip address&gt; -Dhttp.proxyPort=&lt;port&gt;
REM set ARGS=%ARGS% "-Dhttp.proxyUser=&lt;username&gt; -Dhttp.proxyPassword=&lt;password&gt;"

set ARGS=%ARGS% "-Draven.repository.0=file:/C:/Documents%20and%20Settings/Elvis/.m2/repository/"

java %ARGS% -jar "%~dp0\taverna-bootstrap-1.5.1.jar" %*</screen>

    <tip>
      <para>During constant development it can become a pain, to put it
      politely, to need to run mvn package assembly:directory and edit the
      runme script each time. Fortunately there is a way around this. Copy the
      edited runme script to the root folder of the Taverna project, and edit
      it once more so that the final java command invokes the
      taverna-bootsrap-1.5.1.jar in taverna-bootstrap/target/, e.g. in
      Linux:</para>

      <screen>java $ARGS -jar taverna-bootstrap/target/taverna-bootstrap-1.5.1.jar $@</screen>

      <para>or Windows:</para>

      <screen>java %ARGS% -jar "target\taverna-bootstrap\taverna-bootstrap-1.5.1.jar" %*</screen>

      <para>You will then only need to run 'mvn install' each time and then
      start Taverna using your new script.</para>
    </tip>
  </section>
</section>
