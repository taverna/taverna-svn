<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="beanshell_processor">
  <title>Beanshell scripting</title>

  <para>There are often cases in workflow construction where the output of one
  processor is not quite right for the input of the next. There are various
  options to cover these cases - the user can make use of so called shim
  services exposed in the same way as other operations, they could create a
  new service to perform the transformation or, for relatively simple cases,
  they could create a single non service component in the form of a
  script.</para>

  <para>Beanshell scripts, as the name suggests, use the Beanshell scripting
  engine. This gives the user access to a form of interpreted Java; this
  section therefore assumes a minimal level of Java knowledge. For users who
  have never attempted Java programming we recommend the Java tutorial on Sun
  Microsystem's website at <ulink
  url="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</ulink>.
  There are certain minor differences between the core language described
  there and the version used by the Beanshell, these are further documented at
  the Beanshell web site at <ulink
  url="http://www.beanshell.org/">http://www.beanshell.org/</ulink> - the good
  news is that almost all these differences make it easier to use than
  conventional Java; it's unlikely a typical user would ever encounter them
  however.</para>

  <para>As an example of a simple script consider the following use case:
  Given three raw sequence strings (protein or nucleotide) create a single
  string containing the three sequences with FASTA format titles. For
  simplicity's sake assume that the titles are all fixed (although we could
  easily have the titles as parameters to the script).</para>

  <section id="beanshell_instance">
    <title>Creating a new beanshell instance</title>

    <para>Create a new Beanshell processor either by dragging the
    <guimenu>Beanshell scripting host</guimenu> from the local services
    section of the service selection panel into the list of processors in the
    <guilabel>Advanced Model Explorer</guilabel>:</para>

    <screenshot>
      <screeninfo>Drag <guimenuitem>Beanshell scripting host</guimenuitem> to
      the <guilabel>Advanced Model Explorer</guilabel></screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_add_drag.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>or by right-clicking and selecting <guimenuitem>Add to
    model</guimenuitem>:</para>

    <screenshot>
      <screeninfo>Right-click on <guimenuitem>Beanshell scripting
      host</guimenuitem> and select one of the <guimenuitem>Add to
      model</guimenuitem> options</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_add_menu.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>We recommend that you change the name of the inserted beanshell
    processor to something that describes what the processor will do. For our
    example, something like <literal>FASTA_format_sequences</literal> will
    do.</para>

    <screenshot>
      <screeninfo>Right click to <guimenuitem>rename</guimenuitem> the
      processor to <literal>FASTA_format_sequences</literal></screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_rename.png" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section id="beanshell_inputs_outputs">
    <title>Defining inputs and outputs</title>

    <para>The first things to configure, are the input and output ports of the
    new instance. The Beanshell configuration panel is accessible from the
    right click menu of the new processor, selecting <guimenuitem>Configure
    beanshell...</guimenuitem> from the menu:</para>

    <screenshot>
      <screeninfo>Right click to <guimenuitem>configure</guimenuitem> the
      beanshell processor</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_configure.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>This will open a new window containing options to configure the
    script itself and the inputs and outputs. Selecting the
    <guibutton>Ports</guibutton> tab allows you to create, remove and modify
    the types of the inputs and outputs to this processor. Input and output
    ports are the connection points between the workflow and the executed
    beanshell code. From a programming point of view, you can look at the
    input parameters as parameters to a function call, while output parameters
    are return values. Input to the processor will be available as variable
    names within the beanshell script (the names match the input port names),
    while output ports extract the value of the named variables after the
    script has executed.</para>

    <para>A new input is added by entering the name in the text box to the
    right of the <guibutton>Add Input</guibutton> button then clicking on the
    button to create the input. The input ports appear in the Inputs list
    along with the default type <literal>a Plain Text</literal> corresponding
    to a single string with no additional MIME type information. Although in
    this case the default is the correct value this can be changed by
    selecting either the <literal>Plain Text</literal> at which a drop down
    list will present the available types, or the <literal>a</literal>, in
    which case options are available to cycle through the collection types
    such as <literal>a list of</literal>. Leave the defaults for now and use
    the port creation mechanism described above to create three inputs and one
    output with sensible names:</para>

    <screenshot>
      <screeninfo>Add input and output ports to beanshell</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_ports.png" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section id="conf_beanshell">
    <title>Configuring the script</title>

    <para>Now the processor has the correct inputs and outputs the remaining
    task is to specify the logic connecting these together in the form of a
    script. Selecting the <guibutton>Script</guibutton> tab makes available a
    syntax highlighting editor (based on JEdit) into which the user must enter
    a Beanshell compatible script:</para>

    <screenshot>
      <screeninfo>Write the beanshell script</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/beanshell_script.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Having defined the available ports (both inputs and outputs) the
    script engine will, when this processor is enacted, create new bound
    variables in the scripting environment corresponding to the names of the
    input ports. It will extract bound variables with names corresponding to
    the output ports at the end of the invocation, and use the values of these
    as the output values of the processor. In this case therefore the script
    must make use of the variables named <literal>seq1</literal>,
    <literal>seq2</literal> and <literal>seq3</literal> and ensure that there
    is a variable of the appropriate type called <literal>fasta</literal>
    bound in the environment when the script completes. The types are
    determined by the <literal>a</literal>, <literal>a list of</literal> ...
    options in the <guibutton>Ports</guibutton> section - if the type is a
    single <literal>Plain Text</literal> the variable bound to it will be a
    <literal>String</literal> object, if <literal>a list of Plain
    Text</literal> the value will be a Java
    <literal>List&lt;String&gt;</literal> implementation where the items in
    the <literal>List</literal> are <literal>String</literal> objects and so
    on. Corresponding logic applies to the output - if the
    <guibutton>Ports</guibutton> section declares that there is an output
    called <literal>fasta</literal> with type <literal>a Plain Text</literal>
    the script must, before it completes, define a <literal>String</literal>
    called <literal>fasta</literal> containing that result value.</para>

    <para>The screenshot above showed a script (more verbose than strictly
    required) which fulfils this contract and performs the desired function,
    those familiar with Java will realise that this could be done in a single
    line.</para>

    <para>Changes to the script are immediately saved ot the workflow. Note
    that if you are using Mac OS X, instead of the usual clipboard shortcuts
    such as Apple-C for Copy, you will have to use Windows-style Ctrl-C within
    the script editor.</para>
  </section>

  <section id="sharing_beanshell_scripts">
    <title>Sharing and reuse of scripts</title>

    <para>Because the Beanshell processor only exists as part of a workflow
    (unlike, for example, a SOAP service which exists on some networked
    resource) there is a potential problem with reuse - having written a
    potentially complex script it would clearly be desirable to share and
    allow some level of reuse but because the script is within a workflow it
    cannot be simply found as a networked service can be. Fortunately it is
    possible to share scripts by creating a workflow containing the script and
    making the workflow definition available online - this can then be used as
    the target for either a web crawl or single workflow scavenger which will
    in turn expose the script as a child element of the workflow scavenger.
    The script can then be treated exactly as any other processor located in
    this way.</para>
  </section>

  <section id="beanshell_dependencies">
    <title>Depending on third party libraries</title>

    <section id="beanshell_dependencies_using">
      <title id="beanshell_using_deps">Using dependencies</title>

      <para>Just like in Java, in Beanshell you are allowed to reference
      existing classes using <literal>import</literal> statements. By default
      you should have access to the full <ulink
      url="http://java.sun.com/j2se/1.5.0/docs/api/">Java Platform API</ulink>
      so you should have no problems using say a
      <literal>java.util.HashSet</literal>. However, it is often the case that
      you already have some library provided by you or some third party that
      does what you want. If these libraries are available as
      <literal>JAR</literal>s you can access these from within the Beanshell,
      by clicking the <guibutton>Dependencies</guibutton> tab.</para>

      <screenshot>
        <screeninfo>Configuring beanshell dependencies</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/beanshell_dependencies.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>The dialogue should give you the location of the library folder
      into which you must copy the needed JARs. Note that you also have to
      copy the dependencies of that library again. (Taverna does have support
      for using Maven repositories for this purpose, but this is unfortunately
      not yet represented in the GUI dialogues).</para>

      <remark>The library folder is the subdirectory <literal>lib</literal>
      within <literal><link
      linkend="taverna_home">taverna.home</link></literal>, which default
      location depends on your operating system.</remark>

      <para>After copying, close and open the
      <guimenuitem>Configure</guimenuitem> dialogue again, and the
      <guibutton>Dependencies</guibutton> should allow you to tick off the
      required JAR files. Different processors in the workflow, just as
      different workflows, can depend on different JAR files without getting
      conflicts.</para>

      <screenshot>
        <screeninfo>Selecting dependency JAR files for Beanshell</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/beanshell_jars.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>The relative filenames will be stored in your workflow, so that if
      you open the workflow with another Taverna installation that doesn't
      have <literal>hello.jar</literal> installed, that entry will be listed
      in red in the dialogue to indicate that it is missing.</para>

      <important>
        <para>Workflows with dependencies are inherently more difficult to
        share with other Taverna users, as other users would also need to
        download and install the dependencies.</para>
      </important>
    </section>

    <section id="beanshell_dependencies_cl">
      <title>Dependency classloaders</title>

      <caution>
        <para>This section can be quite technical even for hard-core Java
        programmers.</para>
      </caution>

      <para>Normally the default settings will be sufficient for the simple
      cases. However, if you have several beanshell with dependencies that are
      to cooperate using a more complex API, or the library you depend on have
      complex initialisation routines or store state in
      <literal>static</literal> variables, you might want stronger control
      over how the classes are loaded.</para>

      <para>The default <firstterm>classloader persistence</firstterm> is
      <guilabel>Shared over iteration</guilabel>, which means that the classes
      are loaded for each workflow run, for each processor. That means if you
      have two beanshell processor in your workflow that depend on
      <literal>hello.jar</literal>, when you run the workflow each of the
      processors (and hence their Beanshell scripts) will see their classes
      freshly loaded. This isolation ensures that you don't get a 'dirty'
      class, and is neccessary in some cases to avoid thread lock problems
      with static methods. (Remember that several processors might execute in
      parallell in a Taverna workflow). However, some libraries depend on
      static members for sharing state, and if this is what you desire for
      your workflow you might want to consider some of the other classloader
      persistence options.</para>

      <variablelist>
        <varlistentry>
          <term>Always fresh</term>

          <listitem>
            <para>The classes are loaded fresh for each iteration of each
            processor. Although this option is slow, it guarantees that each
            iteration is executed in isolation with regards to the dependency
            classes. This option is generally not recommended.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Shared over iteration <emphasis>(default)</emphasis></term>

          <listitem>
            <para>The classes are loaded fresh for each processor in the
            workflow, for each workflow run. As each processor is executed in
            isolation, beanshells can execute in parallell even when accessing
            non-thread-safe static methods, and can have different transient
            dependencies, for instance two different version of an XML
            library. Processors can't share state through
            <literal>static</literal> members.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Shared for whole workflow</term>

          <listitem>
            <para>The classes are loaded fresh for each workflow run, but are
            shared between all processors with this persistence option. The
            JAR files that are searched is the union of all the selections of
            workflow-shared processors. Normally this means that you only need
            to tick off the required JAR files in one of the processors, as
            long as all of them have <guimenuitem>Shared for whole
            workflow</guimenuitem> set. This option allows the dependency to
            share state through internal static members, and so the behaviour
            of one beanshell might depend on the behaviour of another. This is
            not recommended for scientificly sound provenance, but the
            isolation level is still at the workflow run so that each workflow
            is run with fresh classes. Try this option if <guimenuitem>Shared
            over iteration</guimenuitem> fails and you have several beanshell
            processors accessing the same API.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>System classloader</term>

          <listitem>
            <para>The classes are loaded using the system classloader. This
            means they are only ever loaded once, even if you run several
            workflows or re-run a workflow. This option is generally only
            recommended as a last resort or if you are accessing JNI-based
            native libraries, which in their nature can only be loaded once.
            Notice that if you don't use the normal Taverna startup script you
            will have to add the JAR files to the
            <literal>-classpath</literal>. See the section on <link
            linkend="beanshell_dependencies_jni">JNI-based libraries</link>
            for more information.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In general we recommend using <guimenuitem>Shared over
      iteration</guimenuitem> (the default for Beanshell), or if required,
      <guimenuitem>Shared for whole workflow</guimenuitem> (the default for
      the API consumer).</para>
    </section>

    <section id="beanshell_dependencies_jni">
      <title>JNI-based native libraries</title>

      <para>JNI-based libraries is a way for Java programs to access natively
      compiled code, typically written in languages such as C, C++ or Fortran.
      Even if you don't depend on such a library, one of your dependencies
      might. A JNI-based library is normally identified by an extension such
      as <literal>.jnilib</literal> instead of <literal>.jar</literal>.
      Compiling and building JNI libraries is out of the scope for this
      documentation, but we'll cover how to access such libraries from within
      Taverna. In this section we will assume a Java library
      <filename>hello.jar</filename> that depends on some native functions in
      <filename>hello.jnilib</filename>. To complicate matters, our
      <filename>hello.jnilib</filename> again depends on the native dynamic
      library <filename>fish.dll</filename> / <filename>libfish.so</filename>
      / <filename>libfish.dylib</filename> (Pick your favourite extension
      depending on the operating system).</para>

      <para>First of all you need to make a decission as to where to install
      the libraries. We generally recommend installing the
      <literal>.jnilib</literal> files in the same location as the
      <literal>.jar</literal> files (ie. in <literal>lib</literal> in your
      home directory's Taverna folder), as described in the section <link
      linkend="beanshell_dependencies">Using dependencies</link>, but since
      supporting JNI will require you to modify the Taverna startup scripts,
      you might want to install them to the folder <filename>lib</filename> in
      the Taverna installation directory instead. Here we will assume the home
      directory solution.</para>

      <para>In the Taverna installation directory, locate
      <filename>runme.bat</filename> or <filename>runme.sh</filename>,
      depending on your operating system. Open this file in a decent
      editor.</para>

      <para>You need to add a few lines to set the library path so that the
      <literal>.jnilib</literal> can find it's dependencies. This step might
      not be required if you have no
      <literal>.dll</literal>/<literal>.so</literal>/<literal>.dylib</literal>
      files in addition to the <literal>.jnilib</literal> file, but it might
      be if you have more than one <literal>.jnilib</literal> file. We'll here
      set the dynamic library path to be the <literal>lib</literal> in your
      Taverna home directory.</para>

      <para>In addition, we're going to modify the Java startup parameters to
      set the system property <literal>java.library.path</literal> which tells
      Java where to look for <literal>.jnilib</literal> files. Since both
      paths and variable names vary with operating system we'll show the
      modifications for Window, Linux and OS X.</para>

      <para><emphasis role="bold">Windows</emphasis></para>

      <para>In the Taverna installation folder, find and edit
      <filename>runme.bat</filename> with your favourite editor (in worst case
      Notepad), and add/modify the lines in <emphasis
      role="bold">bold</emphasis>.</para>

      <programlisting>@echo off

<emphasis role="bold">rem Set to %~dp0\lib for shared installations
</emphasis><emphasis role="bold">set LIB_PATH="%APP_DATA\Taverna-1.7.1\lib"
set PATH=%PATH%:%LIB_PATH%

set ARGS=-Xmx300m "-Djava.library.path=%LIB_PATH"
</emphasis>set ARGS=%ARGS% -Djava.system.class.loader=net.sf.taverna.tools.BootstrapClassLoader
(..)</programlisting>

      <para><emphasis role="bold">Linux</emphasis></para>

      <para>In the Taverna installation folder, find end edit
      <filename>runme.sh</filename> with your favourite editor, and add/modify
      the lines in <emphasis role="bold">bold</emphasis>.</para>

      <programlisting>(..)
TAVERNA_HOME="`dirname "$PRG"`"
cd "$saveddir"

<emphasis role="bold"># Set to $TAVERNA_HOME/lib for shared installation
LIB_PATH="$HOME/.taverna-1.7.1/lib"

LD_LIBRARY_PATH="$LIB_PATH"
export LD_LIBRARY_PATH

ARGS="-Xmx300m -Djava.library.path=$LIB_PATH"</emphasis>
ARGS="$ARGS -Djava.system.class.loader=net.sf.taverna.tools.BootstrapClassLoader"
(..)</programlisting>

      <para><emphasis role="bold">Mac OS X</emphasis></para>

      <para>On Mac OS a startup script is not used, Taverna is wrapped in an
      <firstterm>application bundle</firstterm>, which is a kind of directory.
      In particular if dependency on dynamic libraries are needed, we
      recommend you install the JNI libraries inside the bundle. However the
      JAR files, must be installed as explained in <link
      linkend="beanshell_dependencies_using">Using dependencies</link>.</para>

      <remark>Technically you can instead use almost the same solution as in
      Linux, but you would have to start Taverna using the command line
      <literal>DY_LD_LIBRARY_PATH=$HOME/Library/Application\
      Support/Taverna-1.7.1/lib/
      /Applications/Taverna.app/Contents/MacOS/JavaApplicationStub</literal></remark>

      <para>Use the <guilabel>Terminal</guilabel> and change directory to
      inside the <literal>Taverna.app</literal> bundle (commands are shown in
      <emphasis role="bold"><literal>bold</literal></emphasis>):</para>

      <screen>: stain@mira ~;<emphasis role="bold"> cd /Applications/Taverna.app/</emphasis>
: stain@mira /Applications/Taverna.app; <emphasis role="bold">ls</emphasis>
Contents
: stain@mira /Applications/Taverna.app; <emphasis role="bold">cd Contents/MacOS/</emphasis>
: stain@mira /Applications/Taverna.app/Contents/MacOS; <emphasis role="bold">ls</emphasis>
JavaApplicationStub  dataviewer.sh  dot  executeworkflow.sh</screen>

      <para>or in the <guilabel>Finder</guilabel>, right-click (or
      control-click) on the <guilabel>Taverna</guilabel> icon in
      <guilabel>Applications</guilabel> and select <guimenuitem>Show Package
      Contents</guimenuitem>.</para>

      <screenshot>
        <screeninfo>Show package content of Taverna application bundle in Mac
        OS X</screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/osx_show_package_contents.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <para>Navigate down to <literal>Contents/MacOS</literal>. This is where
      we will copy in our <literal>jni</literal> and <literal>dylib</literal>
      files, in this example <literal>libhello.jnilib</literal> and
      <literal>libfish.dylib</literal>.</para>

      <screenshot>
        <screeninfo>Copying the libraries to
        <literal>Taverna.app/Contents/MacOS</literal></screeninfo>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/beanshell_osx_jnilib.png" />
          </imageobject>
        </mediaobject>
      </screenshot>

      <screen>: stain@mira /Applications/Taverna.app/Contents/MacOS;<emphasis
          role="bold"> cp ~/src/jnitest/lib* .</emphasis>
: stain@mira /Applications/Taverna.app/Contents/MacOS;<emphasis role="bold"> ls</emphasis>
JavaApplicationStub  dataviewer.sh  dot  executeworkflow.sh  libfish.dylib  libhello.jnilib</screen>

      <para>However, in order for <literal>libhello.jnilib</literal> to find
      the dependency to libfish.dylib we will have to use the
      <guilabel>Terminal</guilabel> and modify the library path using
      <literal>install_name_tool</literal>. We'll use <literal>otool</literal>
      to inspect the paths.</para>

      <screen>: stain@mira /Applications/Taverna.app/Contents/MacOS; <emphasis
          role="bold">otool -L libhello.jnilib</emphasis> 
libhello.jnilib:
        libhello.jnilib (compatibility version 0.0.0, current version 0.0.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.5.1)
        libfish.dylib (compatibility version 0.0.0, current version 0.0.0)

: stain@mira /Applications/Taverna.app/Contents/MacOS; <emphasis role="bold">install_name_tool -change libfish.dylib @executable_path/libfish.dylib libhello.jnilib</emphasis>

: stain@mira /Applications/Taverna.app/Contents/MacOS; <emphasis role="bold">otool -L libhello.jnilib </emphasis>
libhello.jnilib:
        libhello.jnilib (compatibility version 0.0.0, current version 0.0.0)
        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 88.5.1)
        @executable_path/libfish.dylib (compatibility version 0.0.0, current version 0.0.0)</screen>

      <remark>Why does this work? <literal>@executable_path</literal> is
      resolved to <literal>Contents/MacOS</literal> because Taverna's Java
      runtime is started by
      <literal>Contents/MacOS/JavaApplicationStub</literal></remark>

      <para>If you experience errors, and want to check console for debug
      messages from your library, instead of double-clicking the Taverna icon,
      you can start it from the terminal. The example below shows the typical
      message of when <literal>libhello.jnilib</literal> is located, but some
      of it's dependencies again (<literal>libfish.dylib</literal>) can't be
      located, for instance because we didn't run the
      <literal>install_name_tool</literal> command:</para>

      <screen>: stain@mira ~; <emphasis role="bold">/Applications/Taverna.app/Contents/MacOS/JavaApplicationStub</emphasis> 
Warning: Incorrect memory size qualifier: mm Treating it as m
Exception in thread "Thread-29" java.lang.UnsatisfiedLinkError: /Applications/Taverna.app/Contents/MacOS/libhello.jnilib: 
   (..)</screen>
    </section>
  </section>
</section>