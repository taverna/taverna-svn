package org.embl.ebi.escience.scuflworkers.java;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.embl.ebi.escience.baclava.DataThing;
import org.embl.ebi.escience.scufl.InputPort;
import org.embl.ebi.escience.scufl.XScufl;
import org.embl.ebi.escience.scuflworkers.wsdl.WSDLBasedProcessor;
import org.embl.ebi.escience.scuflworkers.wsdl.parser.ArrayTypeDescriptor;
import org.embl.ebi.escience.scuflworkers.wsdl.parser.BaseTypeDescriptor;
import org.embl.ebi.escience.scuflworkers.wsdl.parser.ComplexTypeDescriptor;
import org.embl.ebi.escience.scuflworkers.wsdl.parser.TypeDescriptor;
import org.embl.ebi.escience.scuflworkers.wsdl.parser.WSDLParser;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;

import uk.ac.soton.itinnovation.taverna.enactor.entities.TaskExecutionException;

/**
 * A LocalWorker that takes a given input port for a complex type, and splits it to a single level generating an array
 * of simple type inputs. Nested complex types remain as type/xml and can be split further by adding additional XMLInputSplitter
 * processors.
 * 
 *
 */

public class XMLInputSplitter implements LocalWorker, XMLExtensible {
	private String[] inputNames = {};

	private String[] inputTypes = {};

	private String[] outputNames = { "output" };

	private String[] outputTypes = { "'text/xml'" };

	private ComplexTypeDescriptor typeDescriptor;

	/**
	 * Dynamically generates the inputNames and inputTypes according to the TypeDescriptor associated with the supplied InputPort.
	 * @param portToSplit
	 */
	public void setUpInputs(InputPort portToSplit) {		
		if (portToSplit.getProcessor() instanceof WSDLBasedProcessor) {			
			WSDLBasedProcessor proc = (WSDLBasedProcessor) portToSplit.getProcessor();
			WSDLParser parser = proc.getParser();
			List inputs = new ArrayList();
			List outputs = new ArrayList();
			try {
				parser.getOperationParameters(proc.getOperationName(), inputs, outputs);
				for (Iterator it = inputs.iterator(); it.hasNext();) {
					TypeDescriptor desc = (TypeDescriptor) it.next();
					if (desc instanceof ComplexTypeDescriptor) {
						if (desc.getName().equalsIgnoreCase(portToSplit.getName())) {
							typeDescriptor = (ComplexTypeDescriptor) desc;
							defineFromTypeDescriptor();
						}
						break;
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Takes the inputs and generates an XML output based upon these inputs. Only inputs provided are included as tags within the
	 * resulting XML.
	 */
	public Map execute(Map inputMap) throws TaskExecutionException {
		Map result = new HashMap();
		Element outputElement = new Element(this.typeDescriptor.getType());
		try {
			for (Iterator iterator = inputMap.keySet().iterator(); iterator.hasNext();) {
				String key = (String) iterator.next();
				DataThing thing = (DataThing) inputMap.get(key);
				Element dataElement = new Element(key);
				dataElement.setText(thing.getDataObject().toString());
				outputElement.addContent(dataElement);
			}
		} catch (Exception e) {
			throw new TaskExecutionException("Problem executing task.", e);
		}

		XMLOutputter outputter = new XMLOutputter();
		String xmlText = outputter.outputString(outputElement);
		DataThing outputThing = new DataThing(xmlText);
		result.put(outputNames[0], outputThing);

		return result;

	}
	
	/**
	 * Generates the TypeDescriptor structure, and then the relevant inputs from the XML element provided.
	 * This assumes that the root of the structure is <complextype/>.
	 * This will be the same xml generated by provideXML.
	 */
	public void consumeXML(Element element) {
		Element child = (Element) element.getChildren().get(0);
		if (child.getName().equalsIgnoreCase("complextype")) {
			typeDescriptor = (ComplexTypeDescriptor) buildTypeDescriptorFromElement(child);
			defineFromTypeDescriptor();
		}		
	}
	
	/**
	 * Generates the XML that describes the TypeDescriptor, and therefore the inputs for this worker, to allow it to be reconstructed
	 * using consumeXML.
	 */
	public Element provideXML() {
		Element result = new Element("extensions", XScufl.XScuflNS);
		Element type = constructElementForComplexType(typeDescriptor);
		result.addContent(type);
		return result;
	}

	
	private void defineFromTypeDescriptor() {
		List elements = typeDescriptor.getElements();
		inputNames = new String[elements.size()];
		inputTypes = new String[elements.size()];
		Class[] types = new Class[elements.size()];
		retrieveSignature(elements, inputNames, types);
		for (int i = 0; i < types.length; i++) {
			inputTypes[i] = translateJavaType(types[i]);
		}
	}

	/**
	 * Translate a java type into a taverna type string
	 */
	private String translateJavaType(Class type) {
		if (type.equals(String[].class)) {
			return "l('text/plain')";
		} else if (type.equals(org.w3c.dom.Element.class)) {
			return "'text/xml'";
		} else if (type.equals(byte[].class)) {
			return "'application/octet-stream'";
		} else {
			return "'text/plain'";
		}
	}

	private void retrieveSignature(List params, String[] names, Class[] types) {
		for (int i = 0; i < names.length; i++) {
			TypeDescriptor descriptor = (TypeDescriptor) params.get(i);
			names[i] = descriptor.getName();
			if (descriptor instanceof ComplexTypeDescriptor) {
				types[i] = org.w3c.dom.Element.class;
			} else {
				String s = descriptor.getType().toLowerCase();
				if ("string".equals(s)) {
					types[i] = String.class;
				} else if ("arrayof_xsd_string".equalsIgnoreCase(s) || "arrayofstring".equalsIgnoreCase(s)
						|| "arrayof_soapenc_string".equalsIgnoreCase(s)) {
					types[i] = String[].class;

				} else if ("double".equals(s)) {
					types[i] = Integer.TYPE;
				} else if ("float".equals(s)) {
					types[i] = Float.TYPE;
				} else if ("int".equals(s)) {
					types[i] = Integer.TYPE;
				} else if ("boolean".equals(s)) {
					types[i] = Boolean.TYPE;
				} else if ("base64binary".equals(s)) {
					types[i] = byte[].class;
				} else {
					types[i] = org.w3c.dom.Element.class;
				}
			}
		}
	}

	

	public String[] inputNames() {

		return inputNames;
	}

	public String[] inputTypes() {

		return inputTypes;
	}

	public String[] outputNames() {

		return outputNames;
	}

	public String[] outputTypes() {

		return outputTypes;
	}	

	private TypeDescriptor buildTypeDescriptorFromElement(Element element) {
		TypeDescriptor result = null;

		if (element.getName().equalsIgnoreCase("complextype")) {
			ComplexTypeDescriptor desc = new ComplexTypeDescriptor();
			Element elements = element.getChild("elements", XScufl.XScuflNS);
			for (Iterator iterator = elements.getChildren().iterator(); iterator.hasNext();) {
				Element childElement = (Element) iterator.next();
				desc.getElements().add(buildTypeDescriptorFromElement(childElement));
			}
			result = desc;
		} else if (element.getName().equalsIgnoreCase("arraytype")) {
			result = new ArrayTypeDescriptor();
		} else if (element.getName().equalsIgnoreCase("basetype")) {
			result = new BaseTypeDescriptor();
		}

		result.setName(element.getAttributeValue("name"));
		result.setType(element.getAttributeValue("typename"));
		result.setOptional(element.getAttributeValue("optional").equalsIgnoreCase("true"));
		result.setUnbounded(element.getAttributeValue("unbounded").equalsIgnoreCase("true"));
		return result;
	}

	private void populateElement(Element element, TypeDescriptor descriptor) {
		element.setAttribute("optional", String.valueOf(descriptor.isOptional()));
		element.setAttribute("unbounded", String.valueOf(descriptor.isUnbounded()));
		element.setAttribute("typename", descriptor.getType());
		element.setAttribute("name", descriptor.getName());
	}

	private Element constructElementForComplexType(ComplexTypeDescriptor descriptor) {
		Element result = new Element("complextype", XScufl.XScuflNS);
		populateElement(result, descriptor);
		Element elements = new Element("elements", XScufl.XScuflNS);
		for (Iterator iterator = descriptor.getElements().iterator(); iterator.hasNext();) {
			TypeDescriptor desc = (TypeDescriptor) iterator.next();
			Element element = null;
			if (desc instanceof ComplexTypeDescriptor) {
				element = constructElementForComplexType((ComplexTypeDescriptor) desc);
			} else if (desc instanceof ArrayTypeDescriptor) {
				element = new Element("arraytype", XScufl.XScuflNS);
				populateElement(element, desc);
			} else if (desc instanceof BaseTypeDescriptor) {
				element = new Element("basetype", XScufl.XScuflNS);
				populateElement(element, desc);
			}
			if (element != null)
				elements.addContent(element);
		}
		result.addContent(elements);
		return result;
	}
	
	

}
