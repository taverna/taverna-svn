<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="taverna" default="all" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="0.1beta8"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
    <property name="test.src.dir" value="./test"/>
    <property name="reports.tests" value="./reports"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="modern"/>
    <property name="build.test.src" value="${build.dir}/test_src"/>
    <property name="build.test.classes" value="${build.dir}/test_classes"/>

	<!-- Show the splash screen -->
	<target name="splash"><!--
		<splash showduration="0" imageurl="http://www.mygrid.org.uk/myGrid/img/mygridlogowhite.gif"/>
-->	</target>

	<!-- Path used during compilation -->
	<path id="compile-classpath">
		<!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<!-- Jar files that are only used when building the project go here -->
		<fileset dir="./devlib">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
                <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<path id="run-classpath">
		<!-- Jar files used when running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
		<!-- ...and the workbench config file -->
		<pathelement path="./workbench/conf"/>
	</path>

    <path id="test-classpath">
        <!-- Jar files used when testing the project -->
        <!-- Jar files used when running the project go here -->
        <fileset dir="./lib">
            <include name="*.jar"/>
        </fileset>
        <!-- Also include our own source tree -->
        <pathelement path="${build.classes}"/>
        <pathelement path="${build.src}"/>
        <!-- ...and the workbench config file -->
        <pathelement path="./workbench/conf"/>
        <!-- ...and the test classes -->
        <pathelement path="${build.test.classes}"/>
    </path>

    <!-- Check the current system classpath for JUnit -->
    <available classpath="${java.class.path}"
        classname="junit.framework.TestCase"
        property="junit.present"/>


	<!--
	<taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc">
		<classpath refid="compile-classpath"/>
	</taskdef>
	-->

	<!-- Import tidier task -->
	<taskdef name="cleanimports" classname="com.tombrus.cleanImports.ant.CleanImports">
	<!-- declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Process the source tree to clean up the import declarations -->
	<!-- CAUTION - modifies the /src directory                       -->
	<target name="tidy" depends="splash">
		<cleanimports srcdir="${src.dir}">
            <cleanformat>
		<!-- Use wildcards iff there are more than five imports -->
                <options collapseAbove="5" blankLines="1" ambiguities="on"/>
		<import/>
		<!-- Handle common java import stuff -->
                <import comment="Utility Imports" package="java.util"/>
                <import comment="IO Imports" package="java.io"/>
                <import comment="JDOM Imports" package="org.jdom"/>
                <import comment="Network Imports" package="java.net"/>
		<import comment="RMI Imports" package="java.rmi"/>
                <options blankLines="0"/>
		<import own="true"/>
		<options blankLines="2"/>
                <import javalang="true"/>
            </cleanformat>
			<classpath refid="compile-classpath"/>
        </cleanimports>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			ignoreVersion="yes"
			sourceBrowser="yes"/>
	</target>

	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="splash">
		<mkdir dir="${build.dir}"/>
        <mkdir dir="${reports.tests}"/>
	</target>

	<!-- Build jar file and javadocs -->
	<target name="all" depends="jar,enactor.ext.jar,javadoc,doxygen"/>


	<!-- Build the workbench binary distribution -->
	<target name="workbench" depends="jar">
	    <property name="workbench.dir" value="${build.dir}/${ant.project.name}-workbench-${project.version}"/>
	    <!-- Copy the workbench skeleton to the build directory -->
		<copy todir="${workbench.dir}">
		    <fileset dir="workbench"/>
		</copy>
		<!-- Copy the required libraries into the lib subdirectory of the workbench -->
		<!--
		<copy todir="${workbench.dir}/resources">
                        <fileset dir="./resources">
                            <exclude name="**/CVS/**"/>
                        </fileset>
                </copy>
		-->
                <copy todir="${workbench.dir}/images">
                        <fileset dir="./images"/>
                </copy>
		<copy todir="${workbench.dir}/lib">
			<!-- List of libraries needeed by the workbench -->
			<fileset dir="./lib" includesfile="./workbenchlibs.text"/>
			<fileset dir="./devlib" includesfile="./workbenchlibs.text"/>
			<fileset dir="${build.dir}">
				<include name="${ant.project.name}-${project.version}.jar"/>
			</fileset>
		</copy>
		<zip destfile="${build.dir}/${ant.project.name}-scuflworkbench-win32-${project.version}.zip"
			basedir="${workbench.dir}"/>
	</target>

	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
			</fileset>
		</copy>
	</target>

    <!-- Prepare the test source tree for compilation -->
    <target name="prepare-test-src" depends="prepare">
        <mkdir dir="${build.test.src}"/>
        <mkdir dir="${build.test.classes}"/>
        <copy todir="${build.test.src}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
            </fileset>
        </copy>
    </target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac
            debug="on"
            srcdir="${build.src}"
            destdir="${build.classes}"
            source="1.4">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<exclude name="**/CVS/**"/>
				<exclude name="**/*.java"/>
            </fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}-${project.version}.jar" basedir="${build.classes}" update="no"/>
	</target>

    <!-- Build tests -->
    <target name="javac-tests" depends="prepare-test-src">
        <!-- Run javac to turn .java files into .class -->
        <javac
            debug="on"
            srcdir="${build.test.src}"
            destdir="${build.test.classes}"
            source="1.4">
            <classpath refid="compile-classpath"/>
        </javac>
        <!-- Copy over any configuration files that you might have -->
        <copy todir="${build.classes}" filtering="on">
            <fileset dir="${test.src.dir}">
                <exclude name="**/CVS/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="run-tests" depends="jar,javac-tests">
        <property name="test.subtree" value="**"/>

        <echo message="JUnit present:           ${junit.present}"/>
        <echo message="Running tests:           ${test.subtree}"/>

        <junit maxmemory="128m" printsummary="yes" haltonfailure="no" reloading="no">
            <formatter type="plain" usefile="true"/>
            <classpath refid="test-classpath"/>
            <!-- The junit task doesn't support 'if' so we test for JUnit here -->
            <batchtest fork="no" todir="${reports.tests}" if="junit.present">
                <fileset dir="${build.test.classes}">
                    <include name="${test.subtree}/*Test.class"/>
                    <include name="${test.subtree}/*TestSuite.class"/>
                    <exclude name="**/Abstract*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

	<!-- Create a jar of the enactor extension classes for inclusion in a deployed enactor -->
	<target name="enactor.ext.jar" depends="java">
		<jar destfile="${build.dir}/tavernaenactor-${project.version}.jar" update="no">
			<fileset dir="${build.classes}">
				<include name="**/itinnovation/taverna/**"/>
				<include name="**/escience/scufl/**"/>
			</fileset>
		</jar>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes"
			 destdir="${build.javadocs}"
             linksource="yes"
             breakiterator="yes"
			 sourcepath="${build.src}"
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>"
			 packagenames="*"
             source="1.4"
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>

	<!-- Test the scufl parser -->
	<target name="test.parser" depends="jar">
	    <java classname="org.embl.ebi.escience.taverna.ScuflParser">
		    <arg value="http://www.ebi.ac.uk/~tmo/scuflexample.text"/>
			<classpath refid="compile-classpath"/>
		</java>
    </target>

	<!-- retsina GUI -->
        <target name="retsina" depends="jar">
                <java classname="uk.ac.mrc.hgmp.taverna.retsina.RetsinaApplet" fork="yes">
                    <classpath refid="compile-classpath"/>
                </java>
        </target>


	<!-- Test the model, specifically the creation of soaplab nodes -->
	<target name="test.soaplab" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.test.SoaplabProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the creation of talisman processor nodes -->
	<target name="test.talisman" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.TalismanProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>
	<!-- Test the creation of arbitrarywsdl processor nodes -->
	<target name="test.wsdl" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.WSDLBasedProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the XScufl parser -->
	<target name="test.xscuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.XScuflParserTest" fork="yes">
		    <classpath refid="run-classpath"/>
		</java>
	</target>

	<!-- Test the Scufl to XScufl convertor -->
	<target name="test.scuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.Scufl2XScuflParserTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the dot view -->
	<target name="test.dotview">
		<java classname="org.embl.ebi.escience.scufl.view.test.DotViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the XScufl view -->
	<target name="test.xscuflview" depends="jar">
		<java classname="org.embl.ebi.escience.scufl.view.test.XScuflViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

        <!-- Generate the dot views from my hybrid workflow -->
        <target name="test.tools.hybrid">
                <java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.none.dot"/>
                    <arg line="none"/>
                    <classpath refid="compile-classpath"/>
                </java>
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.bound.dot"/>
                    <arg line="bound"/>
                    <classpath refid="compile-classpath"/>
                </java>
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
		    <arg line="hybridworkflow/workflow.all.dot"/>
                    <arg line="all"/>
                    <classpath refid="compile-classpath"/>
                </java>
        </target>

	<!-- Run the XScufl to Dot tool -->
	<target name="tools.dot">
		<java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
			<arg line="${file}"/>
			<arg line="${outfile}"/>
			<arg line="${ports}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Run the tree model viewer -->
	<target name="tools.tree">
	        <java classname="org.embl.ebi.escience.scuflui.ScuflModelExplorerDemo" fork="yes">
		        <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

    <!-- Run the diagram viewer -->
	<target name="tools.diagram">
	        <java classname="org.embl.ebi.escience.scuflui.ScuflDiagramDemo" fork="yes">
		        <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

    <!-- Run the component demo -->
	<target name="tools.demo">
	        <java classname="org.embl.ebi.escience.scuflui.ComponentDemo" fork="yes">
		    <arg value="${file}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Run the workbench -->
	<target name="tools.workbench">
		<java classname="org.embl.ebi.escience.scuflui.workbench.Workbench" fork="yes">
		        <arg value="${file}"/>
		   	<classpath refid="compile-classpath"/>
		</java>
	</target>

        <!-- Examine the taverna resource bundle -->
        <target name="test.rdfs" depends="java">
		<java classname="org.embl.ebi.escience.scufl.semantics.ParserTest" fork="yes">
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the data thing type system -->
	<target name="test.datathing" depends="java">
		<java classname="org.embl.ebi.escience.baclava.factory.DataThingFactoryTest" fork="no">
			<classpath refid="compile-classpath"/>
		</java>
	</target>
	<!-- Test the data thing iterator system -->
	<target name="test.iterator" depends="java">
		<java classname="org.embl.ebi.escience.baclava.IteratorNodeTest" fork="no">
			<classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- Test the data thing iterator system -->
	<target name="test.store" depends="java">
		<java classname="org.embl.ebi.escience.baclava.store.test.JDBCStoreTest" fork="no">
			<classpath refid="run-classpath"/>
		</java>
	</target>

	<!-- Run arbitrary unit test -->
	<target name="runtestunit" depends="jar">
		<java classname="junit.textui.TestRunner" fork="true">
			<arg value="${class}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>
	
	<!-- Run chainsaw -->
	<target name="chainsaw">
		<java classname="org.apache.log4j.chainsaw.Main" fork="true">
			<classpath refid="compile-classpath"/>
			<sysproperty key="chainsaw.port" value="4445"/>
		</java>
	</target>
</project>
