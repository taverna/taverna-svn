<!-- Tom Oinn (tmo@ebi.ac.uk) 25th March 2003                    -->
<!-- General mygrid project template, edit to suit               -->
<project name="Taverna" default="all" basedir=".">

	<!-- Current version of the project, used by doxygen -->
	<property name="project.version" value="0.1"/>

	<!-- These directories are pretty standard, you probably     -->
	<!-- don't want to change them                               -->
	<property name="src.dir" value="./src"/>
	<property name="build.dir" value="./build"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.javadocs" value="${build.dir}/api"/>
	<property name="build.compiler" value="jikes"/>
		
	<!-- Show the splash screen -->
	<target name="splash">
<!--
		<splash showduration="0" imageurl="http://mygrid.man.ac.uk/images/mygridlogowhite.gif"/>
-->
	</target>
		
	<!-- Path used during compilation -->
	<path id="compile-classpath">
		<!-- Jar files used when building or running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<!-- Jar files that are only used when building the project go here -->
		<fileset dir="./devlib">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
                <pathelement path="."/>
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<path id="run-classpath">
		<!-- Jar files used when running the project go here -->
		<fileset dir="./lib">
			<include name="*.jar"/>
		</fileset>
		<!-- Also include our own source tree -->
		<pathelement path="${build.classes}"/>
		<pathelement path="${build.src}"/>
	</path>

	<!-- AspectJ task -->
	<taskdef name="ajc" classname="org.aspectj.tools.ant.taskdefs.Ajc">
		<!-- declare classes needed to run the tasks and tools -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Import tidier task -->
	<taskdef name="cleanimports" classname="com.tombrus.cleanImports.ant.CleanImports"> 
	<!-- declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>
	
	<!-- Doxygen task -->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask">
		<!-- Declare classes needed to run the task -->
		<classpath refid="compile-classpath"/>
	</taskdef>

	<!-- Process the source tree to clean up the import declarations -->
	<!-- CAUTION - modifies the /src directory                       -->
	<target name="tidy" depends="splash">
		<cleanimports srcdir="${src.dir}">
            <cleanformat>
		<!-- Use wildcards iff there are more than five imports -->
                <options collapseAbove="5" blankLines="1" ambiguities="on"/>
		<import/>
		<!-- Handle common java import stuff -->
                <import comment="Utility Imports" package="java.util"/>
                <import comment="IO Imports" package="java.io"/>
                <import comment="JDOM Imports" package="org.jdom"/>
                <import comment="Network Imports" package="java.net"/>
		<import comment="RMI Imports" package="java.rmi"/>
                <options blankLines="0"/>
		<import own="true"/>
		<options blankLines="2"/>
                <import javalang="true"/>
            </cleanformat>
			<classpath refid="compile-classpath"/>
        </cleanimports>
	</target>

	<!-- Run doxygen -->
	<target name="doxygen" depends="prepare">
		<mkdir dir="${build.dir}/doxygen"/>
		<!-- Run doxygen, with output specialized for java -->
		<doxygen
			outputDirectory="${build.dir}/doxygen"
			input="${src.dir}"
			recursive="yes"
			generateLatex="false"
			projectNumber="${project.version}"
			projectName="Generated Doxygen Docs for ${ant.project.name}"
			generateTreeview="test"
			optimizeOutputJava="yes"
			haveDot="yes"
			sourceBrowser="yes"/>
	</target>	 	

	<!-- Clean the build -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Trivial setup -->
	<target name="prepare" depends="splash">
		<mkdir dir="${build.dir}"/>
	</target>

	<!-- Build jar file and javadocs -->
	<target name="all" depends="jar,javadoc"/>
	
	<!-- Prepare the source tree for compilation -->
	<target name="prepare-src" depends="prepare">
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.html"/>
				<include name="**/*.xml"/>
				<include name="**/*.text"/>
			</fileset>
		</copy>
		<!-- Use aspectj to prepare the source files -->
		<ajc srcdir="${src.dir}"
			 preprocess="true"
			 workingdir="${build.src}">
			<classpath refid="compile-classpath"/>
		</ajc>
	</target>

	<!-- Compile the source files -->
	<target name="java" depends="prepare-src">
		<!-- Run javac to turn .java files into .class -->
		<javac debug="on" srcdir="${build.src}" destdir="${build.classes}">
			<classpath refid="compile-classpath"/>
		</javac>
		<!-- Copy over any configuration files that you might have -->
		<copy todir="${build.classes}" filtering="on">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<!-- Run the RMI Compiler on anything that looks like a remote class -->
		<rmic base="${build.classes}" verify="true">
			<classpath refid="compile-classpath"/>
		</rmic>
	</target>

	<!-- Create a jar of the classes and configuration files -->
	<target name="jar" depends="java">
		<jar destfile="${build.dir}/${ant.project.name}.jar" basedir="${build.classes}" update="no"/>
	</target>

	<!-- Create a jar of the enactor extension classes for inclusion in a deployed enactor -->
	<target name="enactor.ext.jar" depends="java">
		<jar destfile="${build.dir}/tavernaenactor.jar" update="no">
			<fileset dir="${build.classes}">
				<include name="**/itinnovation/taverna/**"/>
				<include name="**/escience/scufl/**"/>
			</fileset>
		</jar>
	</target>

	<!-- Build javadocs -->
	<target name="javadoc" depends="prepare-src">
		<mkdir dir="${build.javadocs}"/>
		<javadoc windowtitle="${ant.project.name} Java Classes" 
			 destdir="${build.javadocs}" 
			 sourcepath="${build.src}" 
			 doctitle="&lt;h1>${ant.project.name} Java API Documentation&lt;/h1>" 
			 packagenames="*" 
			 version="true">
			<classpath refid="compile-classpath"/>
		</javadoc>
	</target>
				
	<!-- Test the scufl parser -->
	<target name="test.parser" depends="jar">
	    <java classname="org.embl.ebi.escience.taverna.ScuflParser">
		    <arg value="http://www.ebi.ac.uk/~tmo/scuflexample.text"/>	
			<classpath refid="compile-classpath"/>
		</java>
    </target> 

	<!-- Test the editor component (ScuflGraphPanel) -->
	<target name="test.panel" depends="jar">
	    <java classname="org.embl.ebi.escience.taverna.retsina.ScuflGraphPanel" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 

	<!-- Test the editor -->
	<target name="test.retsina" depends="jar">
	    <java classname="org.embl.ebi.escience.taverna.retsina.Retsina" fork="yes">
			<arg value="http://industry.ebi.ac.uk/soap/soaplab/AnalysisFactory"/>
		    <classpath refid="compile-classpath"/>
		</java>
	</target>

	<!-- retsina GUI -->
        <target name="retsina" depends="jar">
                <java classname="uk.ac.mrc.hgmp.taverna.retsina.Retsina" fork="yes">
                    <classpath refid="compile-classpath"/>
                </java>
        </target>
 
	
	<!-- Test the model, specifically the creation of soaplab nodes -->
	<target name="test.soaplab" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.test.SoaplabProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 
	
	<!-- Test the creation of talisman processor nodes -->
	<target name="test.talisman" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.TalismanProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 
	<!-- Test the creation of arbitrarywsdl processor nodes -->
	<target name="test.wsdl" depends="jar">
	        <java classname="org.embl.ebi.escience.scufl.test.WSDLBasedProcessorCreation" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 

	<!-- Test the XScufl parser -->
	<target name="test.xscuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.XScuflParserTest" fork="yes">
		    <classpath refid="run-classpath"/>
		</java>
	</target> 

	<!-- Test the Scufl to XScufl convertor -->
	<target name="test.scuflparser" depends="jar">
	    <java classname="org.embl.ebi.escience.scufl.parser.test.Scufl2XScuflParserTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 

	<!-- Test the dot view -->
	<target name="test.dotview">
		<java classname="org.embl.ebi.escience.scufl.view.test.DotViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 

	<!-- Test the XScufl view -->
	<target name="test.xscuflview" depends="jar">
		<java classname="org.embl.ebi.escience.scufl.view.test.XScuflViewTest" fork="yes">
		    <classpath refid="compile-classpath"/>
		</java>
	</target> 

        <!-- Generate the dot view from my hybrid workflow -->
        <target name="test.tools.hybrid.all">
                <java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
                    <arg line="all"/>
                    <classpath refid="compile-classpath"/>
                </java>
        </target>
        <target name="test.tools.hybrid.bound">
                <java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
                    <arg line="bound"/>
                    <classpath refid="compile-classpath"/>
                </java>
        </target>
        <target name="test.tools.hybrid.none">
                <java classname="org.embl.ebi.escience.scufl.tools.XScufl2Dot" fork="yes">
                    <arg line="hybridworkflow/workflow.xml"/>
                    <arg line="none"/>
                    <classpath refid="compile-classpath"/>
                </java>
        </target>

	<!-- Run arbitrary unit test -->
	<target name="runtestunit" depends="jar">
		<java classname="junit.textui.TestRunner" fork="true">
			<arg value="${class}"/>
			<classpath refid="compile-classpath"/>
		</java>
	</target>
</project>
