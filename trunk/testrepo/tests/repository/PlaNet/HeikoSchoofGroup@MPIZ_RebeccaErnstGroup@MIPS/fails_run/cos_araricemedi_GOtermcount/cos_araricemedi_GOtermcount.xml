<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:MDTDTNJF5Z0" author="" title="" />
  <s:processor name="AraRice_COS_params">
    <s:stringconstant>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;parameter&gt;   &lt;seed_species&gt;     &lt;genome simapid="14" partial="false"&gt;       &lt;name&gt;Arabidopsis thaliana&lt;/name&gt;       &lt;linkout&gt;         &lt;prefix&gt;http://mips.gsf.de/cgi-bin/proj/thal/search_gene?code=&lt;/prefix&gt;         &lt;suffix&gt;&lt;/suffix&gt;       &lt;/linkout&gt;     &lt;/genome&gt;   &lt;/seed_species&gt;   &lt;non_seed_list&gt;     &lt;genome simapid="477" partial="false"&gt;       &lt;name&gt;Oryza sativa jap. MOsDB&lt;/name&gt;       &lt;linkout&gt;         &lt;prefix&gt;&lt;![CDATA[http://mips.gsf.de/proj/plant/jsf/rice/searchjsp/searchforge.jsp?searchby=ByFreetext&amp;searchText=]]&gt;&lt;/prefix&gt;         &lt;suffix&gt;&lt;/suffix&gt;       &lt;/linkout&gt;     &lt;/genome&gt;   &lt;/non_seed_list&gt;   &lt;method type="bbh"&gt;     &lt;minscore&gt;0&lt;/minscore&gt;     &lt;maxnext&gt;1000&lt;/maxnext&gt;   &lt;/method&gt;   &lt;minsize&gt;1&lt;/minsize&gt;  &lt;/parameter&gt;</s:stringconstant>
  </s:processor>
  <s:processor name="AraMedi">
    <s:beanshell>
      <s:scriptvalue>java.util.List seed = new ArrayList();
java.util.List nonseed = new ArrayList();

java.util.regex.Pattern p = java.util.regex.Pattern.compile("&lt;seed&gt;([^&lt;]+)&lt;/seed&gt;");

java.util.regex.Matcher m = p.matcher(in);

while(m.find()){
	seed.add(m.group(1));
}

p = java.util.regex.Pattern.compile("protein simapid=\"([^\"]+)\"");
m = p.matcher(in);

while(m.find()){
	nonseed.add(m.group(1));
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">in</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">seed</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="'text/plain'">nonseed</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="AraRice">
    <s:beanshell>
      <s:scriptvalue>java.util.List seed = new ArrayList();
java.util.List nonseed = new ArrayList();

java.util.regex.Pattern p = java.util.regex.Pattern.compile("&lt;seed&gt;([^&lt;]+)&lt;/seed&gt;");

java.util.regex.Matcher m = p.matcher(in);

while(m.find()){
	seed.add(m.group(1));
}

p = java.util.regex.Pattern.compile("protein simapid=\"([^\"]+)\"");
m = p.matcher(in);

while(m.find()){
	nonseed.add(m.group(1));
}java.util.List seed = new ArrayList();
java.util.List nonseed = new ArrayList();

java.util.regex.Pattern p = java.util.regex.Pattern.compile("&lt;seed&gt;([^&lt;]+)&lt;/seed&gt;");

java.util.regex.Matcher m = p.matcher(in);

while(m.find()){
	seed.add(m.group(1));
}

p = java.util.regex.Pattern.compile("protein simapid=\"([^\"]+)\"");
m = p.matcher(in);

while(m.find()){
	nonseed.add(m.group(1));
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">in</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">seed</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="'text/plain'">nonseed</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="AraMedi_COS_params">
    <s:stringconstant>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;parameter&gt;   &lt;seed_species&gt;     &lt;genome simapid="14" partial="false"&gt;       &lt;name&gt;Arabidopsis thaliana&lt;/name&gt;       &lt;linkout&gt;         &lt;prefix&gt;http://mips.gsf.de/cgi-bin/proj/thal/search_gene?code=&lt;/prefix&gt;         &lt;suffix&gt;&lt;/suffix&gt;       &lt;/linkout&gt;     &lt;/genome&gt;   &lt;/seed_species&gt;   &lt;non_seed_list&gt;     &lt;genome simapid="476" partial="false"&gt;       &lt;name&gt;Medicago truncatula UrMeLDB&lt;/name&gt;       &lt;linkout&gt;         &lt;prefix&gt;&lt;![CDATA[http://mips.gsf.de/proj/plant/jsf/rice/searchjsp/searchforge.jsp?searchby=ByFreetext&amp;searchText=]]&gt;&lt;/prefix&gt;         &lt;suffix&gt;&lt;/suffix&gt;       &lt;/linkout&gt;     &lt;/genome&gt;   &lt;/non_seed_list&gt;   &lt;method type="bbh"&gt;     &lt;minscore&gt;0&lt;/minscore&gt;     &lt;maxnext&gt;1000&lt;/maxnext&gt;   &lt;/method&gt;   &lt;minsize&gt;1&lt;/minsize&gt;  &lt;/parameter&gt;</s:stringconstant>
  </s:processor>
  <s:processor name="Separator">
    <s:stringconstant>_CountMe_</s:stringconstant>
  </s:processor>
  <s:processor name="id_Ara">
    <s:stringconstant>At%g</s:stringconstant>
  </s:processor>
  <s:processor name="ns_Ara">
    <s:stringconstant>MIPS_GE_Arabidopsis</s:stringconstant>
  </s:processor>
  <s:processor name="Count_ArainMediRice">
    <s:beanshell>
      <s:scriptvalue>int count = 1;
java.util.regex.Pattern p = java.util.regex.Pattern.compile("_CountMe_");
java.util.regex.Matcher m = p.matcher(in);
while(m.find()){
    count++;
}</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/plain'">in</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/plain'">count</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="ns_Rice">
    <s:stringconstant>MIPS_GE_Rice</s:stringconstant>
  </s:processor>
  <s:processor name="id_Rice">
    <s:stringconstant>%</s:stringconstant>
  </s:processor>
  <s:processor name="ns">
    <s:stringconstant>AGI_LocusCode</s:stringconstant>
  </s:processor>
  <s:processor name="intersect_Ara">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringSetIntersection</s:local>
  </s:processor>
  <s:processor name="Diff_Ara_NOTinRice">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringSetDifference</s:local>
  </s:processor>
  <s:processor name="Diff_Ara_NOTinMedi">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringSetDifference</s:local>
  </s:processor>
  <s:processor name="Merge_string_list_to_string">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringListMerge</s:local>
  </s:processor>
  <s:processor name="Diff_Rice_NOTinAra">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringSetDifference</s:local>
  </s:processor>
  <s:processor name="Intersection_AraNotMediNotRice">
    <s:local>org.embl.ebi.escience.scuflworkers.java.StringSetIntersection</s:local>
  </s:processor>
  <s:processor name="Parse_moby_data2">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="Create_moby_data2">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="Parse_moby_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="Create_moby_data1">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="Create_moby_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="Parse_moby_data1">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="getCos">
    <s:arbitrarywsdl>
      <s:wsdl>http://harvester:8080/axis/services/CosFinderService?wsdl</s:wsdl>
      <s:operation>getCos</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="ns2">
    <s:stringconstant>AGI_LocusCode</s:stringconstant>
  </s:processor>
  <s:processor name="Create_moby_data3">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="getCos2">
    <s:arbitrarywsdl>
      <s:wsdl>http://harvester:8080/axis/services/CosFinderService?wsdl</s:wsdl>
      <s:operation>getCos</s:operation>
    </s:arbitrarywsdl>
  </s:processor>
  <s:processor name="Parse_moby_data3">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="getGOAccsByAGICode">
    <s:description>takes an AGI code and returns a collection of GO accession numbers</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://mips.gsf.de/cgi-bin/proj/planet/moby/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getGOAccsByAGICode</s:serviceName>
      <s:authorityName>atidb.org</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="getAllGeneticElements_Rice">
    <s:description>Retrieves all genetic element names matching given search string (for example all AGI locus codes for search string 'At')</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://mips.gsf.de/cgi-bin/proj/planet/moby/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getAllGeneticElements</s:serviceName>
      <s:authorityName>mips.gsf.de</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="getGOAccsByAGICode1">
    <s:description>takes an AGI code and returns a collection of GO accession numbers</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://mips.gsf.de/cgi-bin/proj/planet/moby/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getGOAccsByAGICode</s:serviceName>
      <s:authorityName>atidb.org</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="getAllGeneticElements_Ara">
    <s:description>Retrieves all genetic element names matching given search string (for example all AGI locus codes for search string 'At')</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://mips.gsf.de/cgi-bin/proj/planet/moby/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getAllGeneticElements</s:serviceName>
      <s:authorityName>mips.gsf.de</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:link source="AraMedi:seed" sink="Ara_inMedi" />
  <s:link source="AraMedi:nonseed" sink="Medi_inAra" />
  <s:link source="AraRice:seed" sink="Ara_inRice" />
  <s:link source="AraRice:nonseed" sink="Rice_inAra" />
  <s:link source="AraRice:seed" sink="intersect_Ara:list1" />
  <s:link source="AraMedi:seed" sink="intersect_Ara:list2" />
  <s:link source="intersect_Ara:intersection" sink="Ara_inMediRice" />
  <s:link source="Count_ArainMediRice:count" sink="Ara_inMediRice_count" />
  <s:link source="Separator:value" sink="Merge_string_list_to_string:seperator" />
  <s:link source="intersect_Ara:intersection" sink="Merge_string_list_to_string:stringlist" />
  <s:link source="Merge_string_list_to_string:concatenated" sink="Count_ArainMediRice:in" />
  <s:link source="ns_Ara:value" sink="Create_moby_data:namespace" />
  <s:link source="id_Ara:value" sink="Create_moby_data:id" />
  <s:link source="Create_moby_data:mobydata" sink="getAllGeneticElements_Ara:input" />
  <s:link source="getAllGeneticElements_Ara:output" sink="Parse_moby_data:mobydata" />
  <s:link source="AraMedi:seed" sink="Diff_Ara_NOTinMedi:list2" />
  <s:link source="Parse_moby_data:id" sink="Diff_Ara_NOTinMedi:list1" />
  <s:link source="Parse_moby_data:id" sink="Diff_Ara_NOTinRice:list2" />
  <s:link source="AraRice:seed" sink="Diff_Ara_NOTinRice:list1" />
  <s:link source="Diff_Ara_NOTinRice:difference" sink="Ara_NOTinRice" />
  <s:link source="Diff_Ara_NOTinMedi:difference" sink="Ara_NOTinMedi" />
  <s:link source="Intersection_AraNotMediNotRice:intersection" sink="Ara_NOTinMediNOTinRice" />
  <s:link source="Diff_Ara_NOTinMedi:difference" sink="Intersection_AraNotMediNotRice:list2" />
  <s:link source="Diff_Ara_NOTinRice:difference" sink="Intersection_AraNotMediNotRice:list1" />
  <s:link source="ns_Rice:value" sink="Create_moby_data2:namespace" />
  <s:link source="id_Rice:value" sink="Create_moby_data2:id" />
  <s:link source="Create_moby_data2:mobydata" sink="getAllGeneticElements_Rice:input" />
  <s:link source="getAllGeneticElements_Rice:output" sink="Parse_moby_data2:mobydata" />
  <s:link source="Diff_Rice_NOTinAra:difference" sink="Rice_NOTinAra" />
  <s:link source="Parse_moby_data2:id" sink="Diff_Rice_NOTinAra:list2" />
  <s:link source="AraRice:nonseed" sink="Diff_Rice_NOTinAra:list1" />
  <s:link source="AraMedi_COS_params:value" sink="getCos2:in0" />
  <s:link source="getCos2:getCosReturn" sink="AraMedi:in" />
  <s:link source="AraRice_COS_params:value" sink="getCos:in0" />
  <s:link source="getCos:getCosReturn" sink="AraRice:in" />
  <s:link source="intersect_Ara:intersection" sink="Create_moby_data1:id" />
  <s:link source="ns:value" sink="Create_moby_data1:namespace" />
  <s:link source="Create_moby_data1:mobydata" sink="getGOAccsByAGICode:input" />
  <s:link source="getGOAccsByAGICode:output" sink="Parse_moby_data1:mobydata" />
  <s:link source="Parse_moby_data1:id" sink="GO_Ara_inMediRice" />
  <s:link source="ns2:value" sink="Create_moby_data3:namespace" />
  <s:link source="Intersection_AraNotMediNotRice:intersection" sink="Create_moby_data3:id" />
  <s:link source="Create_moby_data3:mobydata" sink="getGOAccsByAGICode1:input" />
  <s:link source="getGOAccsByAGICode1:output" sink="Parse_moby_data3:mobydata" />
  <s:link source="Parse_moby_data3:id" sink="GO_Ara_NOTinMediNOTinRice" />
  <s:sink name="Ara_inMedi" />
  <s:sink name="Medi_inAra" />
  <s:sink name="Ara_inRice" />
  <s:sink name="Rice_inAra" />
  <s:sink name="Ara_inMediRice" />
  <s:sink name="Ara_inMediRice_count" />
  <s:sink name="Ara_NOTinRice" />
  <s:sink name="Ara_NOTinMedi" />
  <s:sink name="Ara_NOTinMediNOTinRice" />
  <s:sink name="Rice_NOTinAra" />
  <s:sink name="GO_Ara_inMediRice" />
  <s:sink name="GO_Ara_NOTinMediNOTinRice" />
  <s:coordination name="getAllGeneticElements_Rice_BLOCKON_getAllGeneticElements_Ara">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>getAllGeneticElements_Ara</s:target>
    </s:condition>
    <s:action>
      <s:target>getAllGeneticElements_Rice</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
  <s:coordination name="getCos_BLOCKON_getCos2">
    <s:condition>
      <s:state>Completed</s:state>
      <s:target>getCos2</s:target>
    </s:condition>
    <s:action>
      <s:target>getCos</s:target>
      <s:statechange>
        <s:from>Scheduled</s:from>
        <s:to>Running</s:to>
      </s:statechange>
    </s:action>
  </s:coordination>
</s:scufl>


